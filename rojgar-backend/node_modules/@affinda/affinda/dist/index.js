'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/** Known values of {@link Region} that the service accepts. */
exports.KnownRegion = void 0;
(function (KnownRegion) {
    /** Api */
    KnownRegion["Api"] = "api";
    /** ApiEu1 */
    KnownRegion["ApiEu1"] = "api.eu1";
    /** ApiUs1 */
    KnownRegion["ApiUs1"] = "api.us1";
})(exports.KnownRegion || (exports.KnownRegion = {}));
/** Known values of {@link OrganizationRole} that the service accepts. */
exports.KnownOrganizationRole = void 0;
(function (KnownOrganizationRole) {
    /** Admin */
    KnownOrganizationRole["Admin"] = "admin";
    /** Member */
    KnownOrganizationRole["Member"] = "member";
})(exports.KnownOrganizationRole || (exports.KnownOrganizationRole = {}));
/** Known values of {@link OrganizationUserRole} that the service accepts. */
exports.KnownOrganizationUserRole = void 0;
(function (KnownOrganizationUserRole) {
    /** Admin */
    KnownOrganizationUserRole["Admin"] = "admin";
    /** Member */
    KnownOrganizationUserRole["Member"] = "member";
})(exports.KnownOrganizationUserRole || (exports.KnownOrganizationUserRole = {}));
/** Known values of {@link ThemeConfigPaletteMode} that the service accepts. */
exports.KnownThemeConfigPaletteMode = void 0;
(function (KnownThemeConfigPaletteMode) {
    /** Light */
    KnownThemeConfigPaletteMode["Light"] = "light";
    /** Dark */
    KnownThemeConfigPaletteMode["Dark"] = "dark";
})(exports.KnownThemeConfigPaletteMode || (exports.KnownThemeConfigPaletteMode = {}));
/** Known values of {@link WorkspaceVisibility} that the service accepts. */
exports.KnownWorkspaceVisibility = void 0;
(function (KnownWorkspaceVisibility) {
    /** Organization */
    KnownWorkspaceVisibility["Organization"] = "organization";
    /** Private */
    KnownWorkspaceVisibility["Private"] = "private";
})(exports.KnownWorkspaceVisibility || (exports.KnownWorkspaceVisibility = {}));
/** Known values of {@link AnnotationContentType} that the service accepts. */
exports.KnownAnnotationContentType = void 0;
(function (KnownAnnotationContentType) {
    /** Text */
    KnownAnnotationContentType["Text"] = "text";
    /** Integer */
    KnownAnnotationContentType["Integer"] = "integer";
    /** Float */
    KnownAnnotationContentType["Float"] = "float";
    /** Decimal */
    KnownAnnotationContentType["Decimal"] = "decimal";
    /** Date */
    KnownAnnotationContentType["Date"] = "date";
    /** Datetime */
    KnownAnnotationContentType["Datetime"] = "datetime";
    /** Daterange */
    KnownAnnotationContentType["Daterange"] = "daterange";
    /** Boolean */
    KnownAnnotationContentType["Boolean"] = "boolean";
    /** Enum */
    KnownAnnotationContentType["Enum"] = "enum";
    /** Location */
    KnownAnnotationContentType["Location"] = "location";
    /** Phonenumber */
    KnownAnnotationContentType["Phonenumber"] = "phonenumber";
    /** Json */
    KnownAnnotationContentType["Json"] = "json";
    /** Table */
    KnownAnnotationContentType["Table"] = "table";
    /** Expectedremuneration */
    KnownAnnotationContentType["Expectedremuneration"] = "expectedremuneration";
    /** Jobtitle */
    KnownAnnotationContentType["Jobtitle"] = "jobtitle";
    /** Language */
    KnownAnnotationContentType["Language"] = "language";
    /** Skill */
    KnownAnnotationContentType["Skill"] = "skill";
    /** Yearsexperience */
    KnownAnnotationContentType["Yearsexperience"] = "yearsexperience";
    /** Group */
    KnownAnnotationContentType["Group"] = "group";
    /** TableDeprecated */
    KnownAnnotationContentType["TableDeprecated"] = "table_deprecated";
    /** Url */
    KnownAnnotationContentType["Url"] = "url";
    /** Image */
    KnownAnnotationContentType["Image"] = "image";
})(exports.KnownAnnotationContentType || (exports.KnownAnnotationContentType = {}));
/** Known values of {@link CollectionDateFormatPreference} that the service accepts. */
exports.KnownCollectionDateFormatPreference = void 0;
(function (KnownCollectionDateFormatPreference) {
    /** DMY */
    KnownCollectionDateFormatPreference["DMY"] = "DMY";
    /** MDY */
    KnownCollectionDateFormatPreference["MDY"] = "MDY";
    /** YMD */
    KnownCollectionDateFormatPreference["YMD"] = "YMD";
})(exports.KnownCollectionDateFormatPreference || (exports.KnownCollectionDateFormatPreference = {}));
/** Known values of {@link DateFormatPreference} that the service accepts. */
exports.KnownDateFormatPreference = void 0;
(function (KnownDateFormatPreference) {
    /** DMY */
    KnownDateFormatPreference["DMY"] = "DMY";
    /** MDY */
    KnownDateFormatPreference["MDY"] = "MDY";
    /** YMD */
    KnownDateFormatPreference["YMD"] = "YMD";
})(exports.KnownDateFormatPreference || (exports.KnownDateFormatPreference = {}));
/** Known values of {@link DocumentState} that the service accepts. */
exports.KnownDocumentState = void 0;
(function (KnownDocumentState) {
    /** Uploaded */
    KnownDocumentState["Uploaded"] = "uploaded";
    /** Review */
    KnownDocumentState["Review"] = "review";
    /** Validated */
    KnownDocumentState["Validated"] = "validated";
    /** Archived */
    KnownDocumentState["Archived"] = "archived";
    /** Rejected */
    KnownDocumentState["Rejected"] = "rejected";
})(exports.KnownDocumentState || (exports.KnownDocumentState = {}));
/** Known values of {@link DateRange} that the service accepts. */
exports.KnownDateRange = void 0;
(function (KnownDateRange) {
    /** Today */
    KnownDateRange["Today"] = "today";
    /** Yesterday */
    KnownDateRange["Yesterday"] = "yesterday";
    /** Week */
    KnownDateRange["Week"] = "week";
    /** Month */
    KnownDateRange["Month"] = "month";
    /** Year */
    KnownDateRange["Year"] = "year";
})(exports.KnownDateRange || (exports.KnownDateRange = {}));
/** Known values of {@link ResumeDataLanguagesItem} that the service accepts. */
exports.KnownResumeDataLanguagesItem = void 0;
(function (KnownResumeDataLanguagesItem) {
    /** Ainu */
    KnownResumeDataLanguagesItem["Ainu"] = "Ainu";
    /** Akan */
    KnownResumeDataLanguagesItem["Akan"] = "Akan";
    /** Akkadian */
    KnownResumeDataLanguagesItem["Akkadian"] = "Akkadian";
    /** Amharic */
    KnownResumeDataLanguagesItem["Amharic"] = "Amharic";
    /** Anam */
    KnownResumeDataLanguagesItem["Anam"] = "Anam";
    /** Arabic */
    KnownResumeDataLanguagesItem["Arabic"] = "Arabic";
    /** Aramaic */
    KnownResumeDataLanguagesItem["Aramaic"] = "Aramaic";
    /** Arem */
    KnownResumeDataLanguagesItem["Arem"] = "Arem";
    /** Armenian */
    KnownResumeDataLanguagesItem["Armenian"] = "Armenian";
    /** Awadhi */
    KnownResumeDataLanguagesItem["Awadhi"] = "Awadhi";
    /** Aymara */
    KnownResumeDataLanguagesItem["Aymara"] = "Aymara";
    /** Azari */
    KnownResumeDataLanguagesItem["Azari"] = "Azari";
    /** Bagheli */
    KnownResumeDataLanguagesItem["Bagheli"] = "Bagheli";
    /** Bagri */
    KnownResumeDataLanguagesItem["Bagri"] = "Bagri";
    /** Bahasa */
    KnownResumeDataLanguagesItem["Bahasa"] = "Bahasa";
    /** Bambara */
    KnownResumeDataLanguagesItem["Bambara"] = "Bambara";
    /** Bangala */
    KnownResumeDataLanguagesItem["Bangala"] = "Bangala";
    /** Bardi */
    KnownResumeDataLanguagesItem["Bardi"] = "Bardi";
    /** Bassa */
    KnownResumeDataLanguagesItem["Bassa"] = "Bassa";
    /** Batak */
    KnownResumeDataLanguagesItem["Batak"] = "Batak";
    /** Belarusian */
    KnownResumeDataLanguagesItem["Belarusian"] = "Belarusian";
    /** Bemba */
    KnownResumeDataLanguagesItem["Bemba"] = "Bemba";
    /** Benga */
    KnownResumeDataLanguagesItem["Benga"] = "Benga";
    /** Bengali */
    KnownResumeDataLanguagesItem["Bengali"] = "Bengali";
    /** Berber */
    KnownResumeDataLanguagesItem["Berber"] = "Berber";
    /** Bhojpuri */
    KnownResumeDataLanguagesItem["Bhojpuri"] = "Bhojpuri";
    /** Bislama */
    KnownResumeDataLanguagesItem["Bislama"] = "Bislama";
    /** Brahui */
    KnownResumeDataLanguagesItem["Brahui"] = "Brahui";
    /** Bulgarian */
    KnownResumeDataLanguagesItem["Bulgarian"] = "Bulgarian";
    /** Bunu */
    KnownResumeDataLanguagesItem["Bunu"] = "Bunu";
    /** Cambodian */
    KnownResumeDataLanguagesItem["Cambodian"] = "Cambodian";
    /** Carew */
    KnownResumeDataLanguagesItem["Carew"] = "Carew";
    /** Carib */
    KnownResumeDataLanguagesItem["Carib"] = "Carib";
    /** Catalan */
    KnownResumeDataLanguagesItem["Catalan"] = "Catalan";
    /** Cebuano */
    KnownResumeDataLanguagesItem["Cebuano"] = "Cebuano";
    /** Chakma */
    KnownResumeDataLanguagesItem["Chakma"] = "Chakma";
    /** Chamorro */
    KnownResumeDataLanguagesItem["Chamorro"] = "Chamorro";
    /** Chango */
    KnownResumeDataLanguagesItem["Chango"] = "Chango";
    /** Chewa */
    KnownResumeDataLanguagesItem["Chewa"] = "Chewa";
    /** Croatian */
    KnownResumeDataLanguagesItem["Croatian"] = "Croatian";
    /** Czech */
    KnownResumeDataLanguagesItem["Czech"] = "Czech";
    /** Dagbani */
    KnownResumeDataLanguagesItem["Dagbani"] = "Dagbani";
    /** Danish */
    KnownResumeDataLanguagesItem["Danish"] = "Danish";
    /** Dari */
    KnownResumeDataLanguagesItem["Dari"] = "Dari";
    /** Dayi */
    KnownResumeDataLanguagesItem["Dayi"] = "Dayi";
    /** Dhatki */
    KnownResumeDataLanguagesItem["Dhatki"] = "Dhatki";
    /** Dhivehi */
    KnownResumeDataLanguagesItem["Dhivehi"] = "Dhivehi";
    /** Dinka */
    KnownResumeDataLanguagesItem["Dinka"] = "Dinka";
    /** Dogri */
    KnownResumeDataLanguagesItem["Dogri"] = "Dogri";
    /** Duala */
    KnownResumeDataLanguagesItem["Duala"] = "Duala";
    /** Dutch */
    KnownResumeDataLanguagesItem["Dutch"] = "Dutch";
    /** English */
    KnownResumeDataLanguagesItem["English"] = "English";
    /** Esperanto */
    KnownResumeDataLanguagesItem["Esperanto"] = "Esperanto";
    /** Estonian */
    KnownResumeDataLanguagesItem["Estonian"] = "Estonian";
    /** Ewondo */
    KnownResumeDataLanguagesItem["Ewondo"] = "Ewondo";
    /** Faroese */
    KnownResumeDataLanguagesItem["Faroese"] = "Faroese";
    /** Filipino */
    KnownResumeDataLanguagesItem["Filipino"] = "Filipino";
    /** Finnish */
    KnownResumeDataLanguagesItem["Finnish"] = "Finnish";
    /** Formula */
    KnownResumeDataLanguagesItem["Formula"] = "Formula";
    /** French */
    KnownResumeDataLanguagesItem["French"] = "French";
    /** Frisian */
    KnownResumeDataLanguagesItem["Frisian"] = "Frisian";
    /** Friulian */
    KnownResumeDataLanguagesItem["Friulian"] = "Friulian";
    /** Fula */
    KnownResumeDataLanguagesItem["Fula"] = "Fula";
    /** Gaelic */
    KnownResumeDataLanguagesItem["Gaelic"] = "Gaelic";
    /** Galo */
    KnownResumeDataLanguagesItem["Galo"] = "Galo";
    /** Garhwali */
    KnownResumeDataLanguagesItem["Garhwali"] = "Garhwali";
    /** Garifuna */
    KnownResumeDataLanguagesItem["Garifuna"] = "Garifuna";
    /** German */
    KnownResumeDataLanguagesItem["German"] = "German";
    /** Gikuyu */
    KnownResumeDataLanguagesItem["Gikuyu"] = "Gikuyu";
    /** Gujarati */
    KnownResumeDataLanguagesItem["Gujarati"] = "Gujarati";
    /** Gujerati */
    KnownResumeDataLanguagesItem["Gujerati"] = "Gujerati";
    /** Gwere */
    KnownResumeDataLanguagesItem["Gwere"] = "Gwere";
    /** Hawaiian */
    KnownResumeDataLanguagesItem["Hawaiian"] = "Hawaiian";
    /** Haya */
    KnownResumeDataLanguagesItem["Haya"] = "Haya";
    /** Hebrew */
    KnownResumeDataLanguagesItem["Hebrew"] = "Hebrew";
    /** Hindi */
    KnownResumeDataLanguagesItem["Hindi"] = "Hindi";
    /** Hmu */
    KnownResumeDataLanguagesItem["Hmu"] = "Hmu";
    /** Hokkien */
    KnownResumeDataLanguagesItem["Hokkien"] = "Hokkien";
    /** Hopi */
    KnownResumeDataLanguagesItem["Hopi"] = "Hopi";
    /** Hungarian */
    KnownResumeDataLanguagesItem["Hungarian"] = "Hungarian";
    /** Hup */
    KnownResumeDataLanguagesItem["Hup"] = "Hup";
    /** Ibanag */
    KnownResumeDataLanguagesItem["Ibanag"] = "Ibanag";
    /** Igbo */
    KnownResumeDataLanguagesItem["Igbo"] = "Igbo";
    /** Ilokano */
    KnownResumeDataLanguagesItem["Ilokano"] = "Ilokano";
    /** Indonesian */
    KnownResumeDataLanguagesItem["Indonesian"] = "Indonesian";
    /** Intermediate */
    KnownResumeDataLanguagesItem["Intermediate"] = "Intermediate";
    /** Irish */
    KnownResumeDataLanguagesItem["Irish"] = "Irish";
    /** Italian */
    KnownResumeDataLanguagesItem["Italian"] = "Italian";
    /** Japanese */
    KnownResumeDataLanguagesItem["Japanese"] = "Japanese";
    /** Jiba */
    KnownResumeDataLanguagesItem["Jiba"] = "Jiba";
    /** Kachin */
    KnownResumeDataLanguagesItem["Kachin"] = "Kachin";
    /** Kalenjin */
    KnownResumeDataLanguagesItem["Kalenjin"] = "Kalenjin";
    /** Kamayo */
    KnownResumeDataLanguagesItem["Kamayo"] = "Kamayo";
    /** Kannada */
    KnownResumeDataLanguagesItem["Kannada"] = "Kannada";
    /** Kaonde */
    KnownResumeDataLanguagesItem["Kaonde"] = "Kaonde";
    /** Kayan */
    KnownResumeDataLanguagesItem["Kayan"] = "Kayan";
    /** Khandeshi */
    KnownResumeDataLanguagesItem["Khandeshi"] = "Khandeshi";
    /** Khmer */
    KnownResumeDataLanguagesItem["Khmer"] = "Khmer";
    /** Kikuyu */
    KnownResumeDataLanguagesItem["Kikuyu"] = "Kikuyu";
    /** Kodava */
    KnownResumeDataLanguagesItem["Kodava"] = "Kodava";
    /** Koma */
    KnownResumeDataLanguagesItem["Koma"] = "Koma";
    /** Kongo */
    KnownResumeDataLanguagesItem["Kongo"] = "Kongo";
    /** Konkani */
    KnownResumeDataLanguagesItem["Konkani"] = "Konkani";
    /** Korean */
    KnownResumeDataLanguagesItem["Korean"] = "Korean";
    /** Korwa */
    KnownResumeDataLanguagesItem["Korwa"] = "Korwa";
    /** Kreyol */
    KnownResumeDataLanguagesItem["Kreyol"] = "Kreyol";
    /** Krio */
    KnownResumeDataLanguagesItem["Krio"] = "Krio";
    /** Kumaoni */
    KnownResumeDataLanguagesItem["Kumaoni"] = "Kumaoni";
    /** Kurdish */
    KnownResumeDataLanguagesItem["Kurdish"] = "Kurdish";
    /** Kurukh */
    KnownResumeDataLanguagesItem["Kurukh"] = "Kurukh";
    /** Kwa */
    KnownResumeDataLanguagesItem["Kwa"] = "Kwa";
    /** Ladino */
    KnownResumeDataLanguagesItem["Ladino"] = "Ladino";
    /** Lango */
    KnownResumeDataLanguagesItem["Lango"] = "Lango";
    /** Latvian */
    KnownResumeDataLanguagesItem["Latvian"] = "Latvian";
    /** Lawa */
    KnownResumeDataLanguagesItem["Lawa"] = "Lawa";
    /** Lingala */
    KnownResumeDataLanguagesItem["Lingala"] = "Lingala";
    /** Lithuanian */
    KnownResumeDataLanguagesItem["Lithuanian"] = "Lithuanian";
    /** Lule */
    KnownResumeDataLanguagesItem["Lule"] = "Lule";
    /** Luxembourgish */
    KnownResumeDataLanguagesItem["Luxembourgish"] = "Luxembourgish";
    /** Magahi */
    KnownResumeDataLanguagesItem["Magahi"] = "Magahi";
    /** Maithili */
    KnownResumeDataLanguagesItem["Maithili"] = "Maithili";
    /** Malay */
    KnownResumeDataLanguagesItem["Malay"] = "Malay";
    /** Malayalam */
    KnownResumeDataLanguagesItem["Malayalam"] = "Malayalam";
    /** Malaysian */
    KnownResumeDataLanguagesItem["Malaysian"] = "Malaysian";
    /** Malvi */
    KnownResumeDataLanguagesItem["Malvi"] = "Malvi";
    /** Maninka */
    KnownResumeDataLanguagesItem["Maninka"] = "Maninka";
    /** Manipuri */
    KnownResumeDataLanguagesItem["Manipuri"] = "Manipuri";
    /** Manx */
    KnownResumeDataLanguagesItem["Manx"] = "Manx";
    /** Marathi */
    KnownResumeDataLanguagesItem["Marathi"] = "Marathi";
    /** Mayan */
    KnownResumeDataLanguagesItem["Mayan"] = "Mayan";
    /** Medumba */
    KnownResumeDataLanguagesItem["Medumba"] = "Medumba";
    /** Memoni */
    KnownResumeDataLanguagesItem["Memoni"] = "Memoni";
    /** Mewari */
    KnownResumeDataLanguagesItem["Mewari"] = "Mewari";
    /** Mizo */
    KnownResumeDataLanguagesItem["Mizo"] = "Mizo";
    /** Montenegrin */
    KnownResumeDataLanguagesItem["Montenegrin"] = "Montenegrin";
    /** Mwan */
    KnownResumeDataLanguagesItem["Mwan"] = "Mwan";
    /** Mwanga */
    KnownResumeDataLanguagesItem["Mwanga"] = "Mwanga";
    /** Ndebele */
    KnownResumeDataLanguagesItem["Ndebele"] = "Ndebele";
    /** Nepali */
    KnownResumeDataLanguagesItem["Nepali"] = "Nepali";
    /** Nimadi */
    KnownResumeDataLanguagesItem["Nimadi"] = "Nimadi";
    /** Oriya */
    KnownResumeDataLanguagesItem["Oriya"] = "Oriya";
    /** Oromo */
    KnownResumeDataLanguagesItem["Oromo"] = "Oromo";
    /** Ovambo */
    KnownResumeDataLanguagesItem["Ovambo"] = "Ovambo";
    /** Pamona */
    KnownResumeDataLanguagesItem["Pamona"] = "Pamona";
    /** Pangasinan */
    KnownResumeDataLanguagesItem["Pangasinan"] = "Pangasinan";
    /** Pashto */
    KnownResumeDataLanguagesItem["Pashto"] = "Pashto";
    /** Phoenician */
    KnownResumeDataLanguagesItem["Phoenician"] = "Phoenician";
    /** Polish */
    KnownResumeDataLanguagesItem["Polish"] = "Polish";
    /** Portuguese */
    KnownResumeDataLanguagesItem["Portuguese"] = "Portuguese";
    /** Pulaar */
    KnownResumeDataLanguagesItem["Pulaar"] = "Pulaar";
    /** Pular */
    KnownResumeDataLanguagesItem["Pular"] = "Pular";
    /** Punjabi */
    KnownResumeDataLanguagesItem["Punjabi"] = "Punjabi";
    /** Quecha */
    KnownResumeDataLanguagesItem["Quecha"] = "Quecha";
    /** Rajasthani */
    KnownResumeDataLanguagesItem["Rajasthani"] = "Rajasthani";
    /** Romanian */
    KnownResumeDataLanguagesItem["Romanian"] = "Romanian";
    /** Russian */
    KnownResumeDataLanguagesItem["Russian"] = "Russian";
    /** Sakha */
    KnownResumeDataLanguagesItem["Sakha"] = "Sakha";
    /** Sango */
    KnownResumeDataLanguagesItem["Sango"] = "Sango";
    /** Santhali */
    KnownResumeDataLanguagesItem["Santhali"] = "Santhali";
    /** Saraiki */
    KnownResumeDataLanguagesItem["Saraiki"] = "Saraiki";
    /** Seim */
    KnownResumeDataLanguagesItem["Seim"] = "Seim";
    /** Shading */
    KnownResumeDataLanguagesItem["Shading"] = "Shading";
    /** Shama */
    KnownResumeDataLanguagesItem["Shama"] = "Shama";
    /** Shan */
    KnownResumeDataLanguagesItem["Shan"] = "Shan";
    /** Shona */
    KnownResumeDataLanguagesItem["Shona"] = "Shona";
    /** Silesian */
    KnownResumeDataLanguagesItem["Silesian"] = "Silesian";
    /** Sindhi */
    KnownResumeDataLanguagesItem["Sindhi"] = "Sindhi";
    /** Slovak */
    KnownResumeDataLanguagesItem["Slovak"] = "Slovak";
    /** Slovene */
    KnownResumeDataLanguagesItem["Slovene"] = "Slovene";
    /** Soga */
    KnownResumeDataLanguagesItem["Soga"] = "Soga";
    /** Sogdian */
    KnownResumeDataLanguagesItem["Sogdian"] = "Sogdian";
    /** Sotho */
    KnownResumeDataLanguagesItem["Sotho"] = "Sotho";
    /** Spanish */
    KnownResumeDataLanguagesItem["Spanish"] = "Spanish";
    /** Sudanese */
    KnownResumeDataLanguagesItem["Sudanese"] = "Sudanese";
    /** Sumerian */
    KnownResumeDataLanguagesItem["Sumerian"] = "Sumerian";
    /** Surajpuri */
    KnownResumeDataLanguagesItem["Surajpuri"] = "Surajpuri";
    /** Surigaonon */
    KnownResumeDataLanguagesItem["Surigaonon"] = "Surigaonon";
    /** Swati */
    KnownResumeDataLanguagesItem["Swati"] = "Swati";
    /** Swazi */
    KnownResumeDataLanguagesItem["Swazi"] = "Swazi";
    /** Swedish */
    KnownResumeDataLanguagesItem["Swedish"] = "Swedish";
    /** Tagalog */
    KnownResumeDataLanguagesItem["Tagalog"] = "Tagalog";
    /** Tamil */
    KnownResumeDataLanguagesItem["Tamil"] = "Tamil";
    /** Tausug */
    KnownResumeDataLanguagesItem["Tausug"] = "Tausug";
    /** Telugu */
    KnownResumeDataLanguagesItem["Telugu"] = "Telugu";
    /** Tetum */
    KnownResumeDataLanguagesItem["Tetum"] = "Tetum";
    /** Tharu */
    KnownResumeDataLanguagesItem["Tharu"] = "Tharu";
    /** Tibetan */
    KnownResumeDataLanguagesItem["Tibetan"] = "Tibetan";
    /** Tigrinya */
    KnownResumeDataLanguagesItem["Tigrinya"] = "Tigrinya";
    /** Tripuri */
    KnownResumeDataLanguagesItem["Tripuri"] = "Tripuri";
    /** Tswana */
    KnownResumeDataLanguagesItem["Tswana"] = "Tswana";
    /** Tulu */
    KnownResumeDataLanguagesItem["Tulu"] = "Tulu";
    /** Turkish */
    KnownResumeDataLanguagesItem["Turkish"] = "Turkish";
    /** Tuwali */
    KnownResumeDataLanguagesItem["Tuwali"] = "Tuwali";
    /** Ubi */
    KnownResumeDataLanguagesItem["Ubi"] = "Ubi";
    /** Ukrainian */
    KnownResumeDataLanguagesItem["Ukrainian"] = "Ukrainian";
    /** Urdu */
    KnownResumeDataLanguagesItem["Urdu"] = "Urdu";
    /** Veps */
    KnownResumeDataLanguagesItem["Veps"] = "Veps";
    /** Vietnamese */
    KnownResumeDataLanguagesItem["Vietnamese"] = "Vietnamese";
    /** Wagdi */
    KnownResumeDataLanguagesItem["Wagdi"] = "Wagdi";
    /** Waziri */
    KnownResumeDataLanguagesItem["Waziri"] = "Waziri";
    /** Xhosa */
    KnownResumeDataLanguagesItem["Xhosa"] = "Xhosa";
    /** Yiddish */
    KnownResumeDataLanguagesItem["Yiddish"] = "Yiddish";
    /** Yoruba */
    KnownResumeDataLanguagesItem["Yoruba"] = "Yoruba";
})(exports.KnownResumeDataLanguagesItem || (exports.KnownResumeDataLanguagesItem = {}));
/** Known values of {@link DocumentFormat} that the service accepts. */
exports.KnownDocumentFormat = void 0;
(function (KnownDocumentFormat) {
    /** Json */
    KnownDocumentFormat["Json"] = "json";
    /** Xml */
    KnownDocumentFormat["Xml"] = "xml";
    /** HrXml */
    KnownDocumentFormat["HrXml"] = "hr-xml";
})(exports.KnownDocumentFormat || (exports.KnownDocumentFormat = {}));
/** Known values of {@link DocumentSplitterType} that the service accepts. */
exports.KnownDocumentSplitterType = void 0;
(function (KnownDocumentSplitterType) {
    /** Llm */
    KnownDocumentSplitterType["Llm"] = "llm";
    /** Extractor */
    KnownDocumentSplitterType["Extractor"] = "extractor";
})(exports.KnownDocumentSplitterType || (exports.KnownDocumentSplitterType = {}));
/** Known values of {@link LLMModelType} that the service accepts. */
exports.KnownLLMModelType = void 0;
(function (KnownLLMModelType) {
    /** AnthropicClaude3Haiku20240307V10 */
    KnownLLMModelType["AnthropicClaude3Haiku20240307V10"] = "anthropic.claude-3-haiku-20240307-v1:0";
    /** AnthropicClaude3Sonnet20240229V10 */
    KnownLLMModelType["AnthropicClaude3Sonnet20240229V10"] = "anthropic.claude-3-sonnet-20240229-v1:0";
    /** AnthropicClaude35Sonnet20240620V10 */
    KnownLLMModelType["AnthropicClaude35Sonnet20240620V10"] = "anthropic.claude-3-5-sonnet-20240620-v1:0";
    /** Gpt35 */
    KnownLLMModelType["Gpt35"] = "gpt-35";
    /** Gpt4 */
    KnownLLMModelType["Gpt4"] = "gpt-4";
})(exports.KnownLLMModelType || (exports.KnownLLMModelType = {}));
/** Known values of {@link InvitationStatus} that the service accepts. */
exports.KnownInvitationStatus = void 0;
(function (KnownInvitationStatus) {
    /** Pending */
    KnownInvitationStatus["Pending"] = "pending";
    /** Accepted */
    KnownInvitationStatus["Accepted"] = "accepted";
    /** Declined */
    KnownInvitationStatus["Declined"] = "declined";
})(exports.KnownInvitationStatus || (exports.KnownInvitationStatus = {}));
/** Known values of {@link InvitationResponseStatus} that the service accepts. */
exports.KnownInvitationResponseStatus = void 0;
(function (KnownInvitationResponseStatus) {
    /** Accepted */
    KnownInvitationResponseStatus["Accepted"] = "accepted";
    /** Declined */
    KnownInvitationResponseStatus["Declined"] = "declined";
})(exports.KnownInvitationResponseStatus || (exports.KnownInvitationResponseStatus = {}));
/** Known values of {@link ResthookEvent} that the service accepts. */
exports.KnownResthookEvent = void 0;
(function (KnownResthookEvent) {
    /** ResumeParseSucceeded */
    KnownResthookEvent["ResumeParseSucceeded"] = "resume.parse.succeeded";
    /** ResumeParseFailed */
    KnownResthookEvent["ResumeParseFailed"] = "resume.parse.failed";
    /** ResumeParseCompleted */
    KnownResthookEvent["ResumeParseCompleted"] = "resume.parse.completed";
    /** InvoiceParseSucceeded */
    KnownResthookEvent["InvoiceParseSucceeded"] = "invoice.parse.succeeded";
    /** InvoiceParseFailed */
    KnownResthookEvent["InvoiceParseFailed"] = "invoice.parse.failed";
    /** InvoiceParseCompleted */
    KnownResthookEvent["InvoiceParseCompleted"] = "invoice.parse.completed";
    /** InvoiceValidateCompleted */
    KnownResthookEvent["InvoiceValidateCompleted"] = "invoice.validate.completed";
    /** DocumentParseSucceeded */
    KnownResthookEvent["DocumentParseSucceeded"] = "document.parse.succeeded";
    /** DocumentParseFailed */
    KnownResthookEvent["DocumentParseFailed"] = "document.parse.failed";
    /** DocumentParseCompleted */
    KnownResthookEvent["DocumentParseCompleted"] = "document.parse.completed";
    /** DocumentValidateCompleted */
    KnownResthookEvent["DocumentValidateCompleted"] = "document.validate.completed";
    /** DocumentClassifySucceeded */
    KnownResthookEvent["DocumentClassifySucceeded"] = "document.classify.succeeded";
    /** DocumentClassifyFailed */
    KnownResthookEvent["DocumentClassifyFailed"] = "document.classify.failed";
    /** DocumentClassifyCompleted */
    KnownResthookEvent["DocumentClassifyCompleted"] = "document.classify.completed";
    /** DocumentRejected */
    KnownResthookEvent["DocumentRejected"] = "document.rejected";
    /** AnnotationValidated */
    KnownResthookEvent["AnnotationValidated"] = "annotation.validated";
})(exports.KnownResthookEvent || (exports.KnownResthookEvent = {}));
/** Known values of {@link ResthookSubscriptionVersion} that the service accepts. */
exports.KnownResthookSubscriptionVersion = void 0;
(function (KnownResthookSubscriptionVersion) {
    /** V1 */
    KnownResthookSubscriptionVersion["V1"] = "v1";
    /** V2 */
    KnownResthookSubscriptionVersion["V2"] = "v2";
    /** V3 */
    KnownResthookSubscriptionVersion["V3"] = "v3";
})(exports.KnownResthookSubscriptionVersion || (exports.KnownResthookSubscriptionVersion = {}));
/** Known values of {@link Version} that the service accepts. */
exports.KnownVersion = void 0;
(function (KnownVersion) {
    /** V1 */
    KnownVersion["V1"] = "v1";
    /** V2 */
    KnownVersion["V2"] = "v2";
    /** V3 */
    KnownVersion["V3"] = "v3";
})(exports.KnownVersion || (exports.KnownVersion = {}));
/** Known values of {@link SearchParametersCustomDataFilterType} that the service accepts. */
exports.KnownSearchParametersCustomDataFilterType = void 0;
(function (KnownSearchParametersCustomDataFilterType) {
    /** Equals */
    KnownSearchParametersCustomDataFilterType["Equals"] = "equals";
    /** Range */
    KnownSearchParametersCustomDataFilterType["Range"] = "range";
})(exports.KnownSearchParametersCustomDataFilterType || (exports.KnownSearchParametersCustomDataFilterType = {}));
/** Known values of {@link ResumeSkillSourcesItemSection} that the service accepts. */
exports.KnownResumeSkillSourcesItemSection = void 0;
(function (KnownResumeSkillSourcesItemSection) {
    /** Achievements */
    KnownResumeSkillSourcesItemSection["Achievements"] = "Achievements";
    /** AdditionalInformation */
    KnownResumeSkillSourcesItemSection["AdditionalInformation"] = "AdditionalInformation";
    /** Education */
    KnownResumeSkillSourcesItemSection["Education"] = "Education";
    /** Extracurriculars */
    KnownResumeSkillSourcesItemSection["Extracurriculars"] = "Extracurriculars";
    /** Organisations */
    KnownResumeSkillSourcesItemSection["Organisations"] = "Organisations";
    /** Other */
    KnownResumeSkillSourcesItemSection["Other"] = "Other";
    /** PersonalDetails */
    KnownResumeSkillSourcesItemSection["PersonalDetails"] = "PersonalDetails";
    /** Projects */
    KnownResumeSkillSourcesItemSection["Projects"] = "Projects";
    /** Publications */
    KnownResumeSkillSourcesItemSection["Publications"] = "Publications";
    /** Referees */
    KnownResumeSkillSourcesItemSection["Referees"] = "Referees";
    /** Skills */
    KnownResumeSkillSourcesItemSection["Skills"] = "Skills";
    /** Summary */
    KnownResumeSkillSourcesItemSection["Summary"] = "Summary";
    /** Training */
    KnownResumeSkillSourcesItemSection["Training"] = "Training";
    /** WorkExperience */
    KnownResumeSkillSourcesItemSection["WorkExperience"] = "WorkExperience";
    /** NotPopulated */
    KnownResumeSkillSourcesItemSection["NotPopulated"] = "NotPopulated";
    /** Header */
    KnownResumeSkillSourcesItemSection["Header"] = "Header";
    /** Footer */
    KnownResumeSkillSourcesItemSection["Footer"] = "Footer";
    /** SkillsInterestsLanguages */
    KnownResumeSkillSourcesItemSection["SkillsInterestsLanguages"] = "Skills/Interests/Languages";
    /** TrainingCertifications */
    KnownResumeSkillSourcesItemSection["TrainingCertifications"] = "Training/Certifications";
    /** ExtracurricularsLeadership */
    KnownResumeSkillSourcesItemSection["ExtracurricularsLeadership"] = "Extracurriculars/Leadership";
})(exports.KnownResumeSkillSourcesItemSection || (exports.KnownResumeSkillSourcesItemSection = {}));
/** Known values of {@link ResumeSearchConfigDistanceUnit} that the service accepts. */
exports.KnownResumeSearchConfigDistanceUnit = void 0;
(function (KnownResumeSearchConfigDistanceUnit) {
    /** Mi */
    KnownResumeSearchConfigDistanceUnit["Mi"] = "mi";
    /** Km */
    KnownResumeSearchConfigDistanceUnit["Km"] = "km";
})(exports.KnownResumeSearchConfigDistanceUnit || (exports.KnownResumeSearchConfigDistanceUnit = {}));
/** Known values of {@link JobDescriptionSearchConfigDistanceUnit} that the service accepts. */
exports.KnownJobDescriptionSearchConfigDistanceUnit = void 0;
(function (KnownJobDescriptionSearchConfigDistanceUnit) {
    /** Mi */
    KnownJobDescriptionSearchConfigDistanceUnit["Mi"] = "mi";
    /** Km */
    KnownJobDescriptionSearchConfigDistanceUnit["Km"] = "km";
})(exports.KnownJobDescriptionSearchConfigDistanceUnit || (exports.KnownJobDescriptionSearchConfigDistanceUnit = {}));
/** Known values of {@link Enum23} that the service accepts. */
exports.KnownEnum23 = void 0;
(function (KnownEnum23) {
    /** Resumes */
    KnownEnum23["Resumes"] = "resumes";
    /** JobDescriptions */
    KnownEnum23["JobDescriptions"] = "job_descriptions";
})(exports.KnownEnum23 || (exports.KnownEnum23 = {}));
/** Known values of {@link IndexDocumentType} that the service accepts. */
exports.KnownIndexDocumentType = void 0;
(function (KnownIndexDocumentType) {
    /** Resumes */
    KnownIndexDocumentType["Resumes"] = "resumes";
    /** JobDescriptions */
    KnownIndexDocumentType["JobDescriptions"] = "job_descriptions";
})(exports.KnownIndexDocumentType || (exports.KnownIndexDocumentType = {}));
/** Known values of {@link DocumentType} that the service accepts. */
exports.KnownDocumentType = void 0;
(function (KnownDocumentType) {
    /** Resumes */
    KnownDocumentType["Resumes"] = "resumes";
    /** JobDescriptions */
    KnownDocumentType["JobDescriptions"] = "job_descriptions";
})(exports.KnownDocumentType || (exports.KnownDocumentType = {}));

const Workspace = {
    type: {
        name: "Composite",
        className: "Workspace",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "Composite",
                    className: "Organization",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            visibility: {
                serializedName: "visibility",
                type: {
                    name: "String",
                },
            },
            collections: {
                serializedName: "collections",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WorkspaceCollectionsItem",
                        },
                    },
                },
            },
            rejectInvalidDocuments: {
                serializedName: "rejectInvalidDocuments",
                type: {
                    name: "Boolean",
                },
            },
            rejectDuplicates: {
                defaultValue: "false",
                serializedName: "rejectDuplicates",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            members: {
                serializedName: "members",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "User",
                        },
                    },
                },
            },
            unvalidatedDocsCount: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "unvalidatedDocsCount",
                type: {
                    name: "Number",
                },
            },
            confirmedDocsCount: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "confirmedDocsCount",
                type: {
                    name: "Number",
                },
            },
            ingestEmail: {
                serializedName: "ingestEmail",
                type: {
                    name: "String",
                },
            },
            whitelistIngestAddresses: {
                serializedName: "whitelistIngestAddresses",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            documentSplitter: {
                serializedName: "documentSplitter",
                type: {
                    name: "Composite",
                    className: "WorkspaceDocumentSplitter",
                },
            },
        },
    },
};
const Organization = {
    type: {
        name: "Composite",
        className: "Organization",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            userRole: {
                serializedName: "userRole",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            avatar: {
                serializedName: "avatar",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            resthookSignatureKey: {
                serializedName: "resthookSignatureKey",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            isTrial: {
                serializedName: "isTrial",
                type: {
                    name: "Boolean",
                },
            },
            validationToolConfig: {
                serializedName: "validationToolConfig",
                type: {
                    name: "Composite",
                    className: "OrganizationValidationToolConfig",
                },
            },
            showCustomFieldCreation: {
                serializedName: "showCustomFieldCreation",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const OrganizationValidationToolConfig = {
    type: {
        name: "Composite",
        className: "OrganizationValidationToolConfig",
        modelProperties: {
            theme: {
                serializedName: "theme",
                type: {
                    name: "Composite",
                    className: "ThemeConfig",
                },
            },
            hideActions: {
                serializedName: "hideActions",
                type: {
                    name: "Boolean",
                },
            },
            hideCollection: {
                serializedName: "hideCollection",
                type: {
                    name: "Boolean",
                },
            },
            hideEditPages: {
                serializedName: "hideEditPages",
                type: {
                    name: "Boolean",
                },
            },
            hideExport: {
                serializedName: "hideExport",
                type: {
                    name: "Boolean",
                },
            },
            hideFilename: {
                serializedName: "hideFilename",
                type: {
                    name: "Boolean",
                },
            },
            hideReject: {
                serializedName: "hideReject",
                type: {
                    name: "Boolean",
                },
            },
            hideReparse: {
                serializedName: "hideReparse",
                type: {
                    name: "Boolean",
                },
            },
            hideRunOcr: {
                serializedName: "hideRunOcr",
                type: {
                    name: "Boolean",
                },
            },
            hideTags: {
                serializedName: "hideTags",
                type: {
                    name: "Boolean",
                },
            },
            hideWarnings: {
                serializedName: "hideWarnings",
                type: {
                    name: "Boolean",
                },
            },
            restrictDocumentSplitting: {
                serializedName: "restrictDocumentSplitting",
                type: {
                    name: "Boolean",
                },
            },
            disableCurrencyFormatting: {
                serializedName: "disableCurrencyFormatting",
                type: {
                    name: "Boolean",
                },
            },
            disableEditDocumentMetadata: {
                serializedName: "disableEditDocumentMetadata",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const ThemeConfig = {
    type: {
        name: "Composite",
        className: "ThemeConfig",
        modelProperties: {
            palette: {
                serializedName: "palette",
                type: {
                    name: "Composite",
                    className: "ThemeConfigPalette",
                },
            },
            typography: {
                serializedName: "typography",
                type: {
                    name: "Composite",
                    className: "ThemeConfigTypography",
                },
            },
            borderRadius: {
                serializedName: "borderRadius",
                type: {
                    name: "Number",
                },
            },
            fontUrl: {
                serializedName: "fontUrl",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ThemeConfigPalette = {
    type: {
        name: "Composite",
        className: "ThemeConfigPalette",
        modelProperties: {
            mode: {
                serializedName: "mode",
                type: {
                    name: "String",
                },
            },
            background: {
                serializedName: "background",
                type: {
                    name: "any",
                },
            },
            text: {
                serializedName: "text",
                type: {
                    name: "Composite",
                    className: "ThemeConfigPaletteText",
                },
            },
            divider: {
                serializedName: "divider",
                type: {
                    name: "String",
                },
            },
            primary: {
                serializedName: "primary",
                type: {
                    name: "Composite",
                    className: "PaletteColorOptions",
                },
            },
            secondary: {
                serializedName: "secondary",
                type: {
                    name: "Composite",
                    className: "PaletteColorOptions",
                },
            },
            success: {
                serializedName: "success",
                type: {
                    name: "Composite",
                    className: "PaletteColorOptions",
                },
            },
            annotation: {
                serializedName: "annotation",
                type: {
                    name: "Composite",
                    className: "PaletteColorOptions",
                },
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "PaletteColorOptions",
                },
            },
            info: {
                serializedName: "info",
                type: {
                    name: "Composite",
                    className: "PaletteColorOptions",
                },
            },
            warning: {
                serializedName: "warning",
                type: {
                    name: "Composite",
                    className: "PaletteColorOptions",
                },
            },
        },
    },
};
const ThemeConfigPaletteText = {
    type: {
        name: "Composite",
        className: "ThemeConfigPaletteText",
        modelProperties: {
            primary: {
                serializedName: "primary",
                type: {
                    name: "String",
                },
            },
            secondary: {
                serializedName: "secondary",
                type: {
                    name: "String",
                },
            },
            disabled: {
                serializedName: "disabled",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PaletteColorOptions = {
    type: {
        name: "Composite",
        className: "PaletteColorOptions",
        modelProperties: {
            main: {
                serializedName: "main",
                required: true,
                type: {
                    name: "String",
                },
            },
            light: {
                serializedName: "light",
                type: {
                    name: "String",
                },
            },
            dark: {
                serializedName: "dark",
                type: {
                    name: "String",
                },
            },
            contrastText: {
                serializedName: "contrastText",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ThemeConfigTypography = {
    type: {
        name: "Composite",
        className: "ThemeConfigTypography",
        modelProperties: {
            fontFamily: {
                serializedName: "fontFamily",
                type: {
                    name: "String",
                },
            },
            fontSize: {
                serializedName: "fontSize",
                type: {
                    name: "any",
                },
            },
            fontWeightRegular: {
                serializedName: "fontWeightRegular",
                type: {
                    name: "String",
                },
            },
            fontWeightMedium: {
                serializedName: "fontWeightMedium",
                type: {
                    name: "String",
                },
            },
            fontWeightBold: {
                serializedName: "fontWeightBold",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const WorkspaceCollectionsItem = {
    type: {
        name: "Composite",
        className: "WorkspaceCollectionsItem",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            extractor: {
                serializedName: "extractor",
                type: {
                    name: "Composite",
                    className: "WorkspaceCollectionsItemExtractor",
                },
            },
            unvalidatedDocsCount: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "unvalidatedDocsCount",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            confirmedDocsCount: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "confirmedDocsCount",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const WorkspaceCollectionsItemExtractor = {
    type: {
        name: "Composite",
        className: "WorkspaceCollectionsItemExtractor",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            namePlural: {
                serializedName: "namePlural",
                required: true,
                type: {
                    name: "String",
                },
            },
            baseExtractor: {
                serializedName: "baseExtractor",
                type: {
                    name: "Composite",
                    className: "BaseExtractor",
                },
            },
            category: {
                serializedName: "category",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            validatable: {
                serializedName: "validatable",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            isCustom: {
                serializedName: "isCustom",
                type: {
                    name: "Boolean",
                },
            },
            createdDt: {
                serializedName: "createdDt",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const BaseExtractor = {
    type: {
        name: "Composite",
        className: "BaseExtractor",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            namePlural: {
                serializedName: "namePlural",
                required: true,
                type: {
                    name: "String",
                },
            },
            validatable: {
                serializedName: "validatable",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            isCustom: {
                serializedName: "isCustom",
                type: {
                    name: "Boolean",
                },
            },
            createdDt: {
                serializedName: "createdDt",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const User = {
    type: {
        name: "Composite",
        className: "User",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                type: {
                    name: "Number",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String",
                },
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String",
                },
            },
            avatar: {
                serializedName: "avatar",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const WorkspaceDocumentSplitter = {
    type: {
        name: "Composite",
        className: "WorkspaceDocumentSplitter",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RequestError = {
    type: {
        name: "Composite",
        className: "RequestError",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            errors: {
                serializedName: "errors",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RequestErrorErrorsItem",
                        },
                    },
                },
            },
        },
    },
};
const RequestErrorErrorsItem = {
    type: {
        name: "Composite",
        className: "RequestErrorErrorsItem",
        modelProperties: {
            attr: {
                serializedName: "attr",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String",
                },
            },
            detail: {
                serializedName: "detail",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const WorkspaceCreate = {
    type: {
        name: "Composite",
        className: "WorkspaceCreate",
        modelProperties: {
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            visibility: {
                serializedName: "visibility",
                type: {
                    name: "String",
                },
            },
            rejectInvalidDocuments: {
                serializedName: "rejectInvalidDocuments",
                type: {
                    name: "Boolean",
                },
            },
            rejectDuplicates: {
                defaultValue: "false",
                serializedName: "rejectDuplicates",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            whitelistIngestAddresses: {
                serializedName: "whitelistIngestAddresses",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            documentSplitter: {
                serializedName: "documentSplitter",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const WorkspaceUpdate = {
    type: {
        name: "Composite",
        className: "WorkspaceUpdate",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            visibility: {
                serializedName: "visibility",
                type: {
                    name: "String",
                },
            },
            rejectInvalidDocuments: {
                serializedName: "rejectInvalidDocuments",
                type: {
                    name: "Boolean",
                },
            },
            rejectDuplicates: {
                defaultValue: "false",
                serializedName: "rejectDuplicates",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            whitelistIngestAddresses: {
                serializedName: "whitelistIngestAddresses",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            documentSplitter: {
                serializedName: "documentSplitter",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UsageByWorkspace = {
    type: {
        name: "Composite",
        className: "UsageByWorkspace",
        modelProperties: {
            month: {
                serializedName: "month",
                required: true,
                type: {
                    name: "String",
                },
            },
            count: {
                serializedName: "count",
                required: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const PaginatedResponse = {
    type: {
        name: "Composite",
        className: "PaginatedResponse",
        modelProperties: {
            count: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "count",
                required: true,
                type: {
                    name: "Number",
                },
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Paths2Ld2HiV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "Paths2Ld2HiV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WorkspaceMembership",
                        },
                    },
                },
            },
        },
    },
};
const WorkspaceMembership = {
    type: {
        name: "Composite",
        className: "WorkspaceMembership",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                type: {
                    name: "String",
                },
            },
            user: {
                serializedName: "user",
                type: {
                    name: "Composite",
                    className: "User",
                },
            },
        },
    },
};
const WorkspaceMembershipCreate = {
    type: {
        name: "Composite",
        className: "WorkspaceMembershipCreate",
        modelProperties: {
            workspace: {
                serializedName: "workspace",
                type: {
                    name: "String",
                },
            },
            user: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "user",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const Collection = {
    type: {
        name: "Composite",
        className: "Collection",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                type: {
                    name: "Composite",
                    className: "CollectionWorkspace",
                },
            },
            extractor: {
                serializedName: "extractor",
                type: {
                    name: "Composite",
                    className: "Extractor",
                },
            },
            autoValidationThreshold: {
                serializedName: "autoValidationThreshold",
                type: {
                    name: "Number",
                },
            },
            enableAutoValidationThreshold: {
                defaultValue: false,
                serializedName: "enableAutoValidationThreshold",
                type: {
                    name: "Boolean",
                },
            },
            autoValidateIfValidationRulesPass: {
                defaultValue: false,
                serializedName: "autoValidateIfValidationRulesPass",
                type: {
                    name: "Boolean",
                },
            },
            fields: {
                serializedName: "fields",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldGroup",
                        },
                    },
                },
            },
            fieldsLayout: {
                serializedName: "fieldsLayout",
                type: {
                    name: "Composite",
                    className: "FieldsLayout",
                },
            },
            fieldsConfigured: {
                serializedName: "fieldsConfigured",
                type: {
                    name: "Boolean",
                },
            },
            dateFormatPreference: {
                serializedName: "dateFormatPreference",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            dateFormatFromDocument: {
                serializedName: "dateFormatFromDocument",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            extractorConfig: {
                serializedName: "extractorConfig",
                type: {
                    name: "Composite",
                    className: "ExtractorConfig",
                },
            },
            unvalidatedDocsCount: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "unvalidatedDocsCount",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            confirmedDocsCount: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "confirmedDocsCount",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            ingestEmail: {
                serializedName: "ingestEmail",
                type: {
                    name: "String",
                },
            },
            tailoredExtractorRequested: {
                serializedName: "tailoredExtractorRequested",
                type: {
                    name: "Boolean",
                },
            },
            allowOpenai: {
                defaultValue: false,
                serializedName: "allowOpenai",
                type: {
                    name: "Boolean",
                },
            },
            trainsExtractor: {
                serializedName: "trainsExtractor",
                type: {
                    name: "Boolean",
                },
            },
            disableConfirmationIfValidationRulesFail: {
                defaultValue: false,
                serializedName: "disableConfirmationIfValidationRulesFail",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const CollectionWorkspace = {
    type: {
        name: "Composite",
        className: "CollectionWorkspace",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "Composite",
                    className: "Organization",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Extractor = {
    type: {
        name: "Composite",
        className: "Extractor",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            namePlural: {
                serializedName: "namePlural",
                required: true,
                type: {
                    name: "String",
                },
            },
            baseExtractor: {
                serializedName: "baseExtractor",
                type: {
                    name: "Composite",
                    className: "ExtractorBaseExtractor",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "Composite",
                    className: "Organization",
                },
            },
            category: {
                serializedName: "category",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            validatable: {
                serializedName: "validatable",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            isCustom: {
                serializedName: "isCustom",
                type: {
                    name: "Boolean",
                },
            },
            fieldGroups: {
                serializedName: "fieldGroups",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldGroup",
                        },
                    },
                },
            },
            createdDt: {
                serializedName: "createdDt",
                type: {
                    name: "DateTime",
                },
            },
            lastTrainedDt: {
                serializedName: "lastTrainedDt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const ExtractorBaseExtractor = {
    type: {
        name: "Composite",
        className: "ExtractorBaseExtractor",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            namePlural: {
                serializedName: "namePlural",
                required: true,
                type: {
                    name: "String",
                },
            },
            validatable: {
                serializedName: "validatable",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            isCustom: {
                serializedName: "isCustom",
                type: {
                    name: "Boolean",
                },
            },
            createdDt: {
                serializedName: "createdDt",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const FieldGroup = {
    type: {
        name: "Composite",
        className: "FieldGroup",
        modelProperties: {
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            fields: {
                serializedName: "fields",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldDeprecated",
                        },
                    },
                },
            },
        },
    },
};
const FieldDeprecated = {
    type: {
        name: "Composite",
        className: "FieldDeprecated",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            slug: {
                serializedName: "slug",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            fieldType: {
                serializedName: "fieldType",
                required: true,
                type: {
                    name: "String",
                },
            },
            dataSource: {
                serializedName: "dataSource",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            mapping: {
                serializedName: "mapping",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            dataPoint: {
                serializedName: "dataPoint",
                required: true,
                type: {
                    name: "String",
                },
            },
            mandatory: {
                serializedName: "mandatory",
                type: {
                    name: "Boolean",
                },
            },
            disabled: {
                serializedName: "disabled",
                type: {
                    name: "Boolean",
                },
            },
            autoValidationThreshold: {
                serializedName: "autoValidationThreshold",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            showDropdown: {
                serializedName: "showDropdown",
                type: {
                    name: "Boolean",
                },
            },
            displayRawText: {
                serializedName: "displayRawText",
                type: {
                    name: "Boolean",
                },
            },
            dropNull: {
                serializedName: "dropNull",
                type: {
                    name: "Boolean",
                },
            },
            displayEnumValue: {
                serializedName: "displayEnumValue",
                type: {
                    name: "Boolean",
                },
            },
            fields: {
                serializedName: "fields",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldDeprecated",
                        },
                    },
                },
            },
        },
    },
};
const FieldsLayout = {
    type: {
        name: "Composite",
        className: "FieldsLayout",
        modelProperties: {
            defaultCategory: {
                serializedName: "defaultCategory",
                type: {
                    name: "Composite",
                    className: "FieldCategory",
                },
            },
            categories: {
                serializedName: "categories",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldCategory",
                        },
                    },
                },
            },
        },
    },
};
const FieldCategory = {
    type: {
        name: "Composite",
        className: "FieldCategory",
        modelProperties: {
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            enabledFields: {
                serializedName: "enabledFields",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Field",
                        },
                    },
                },
            },
            disabledFields: {
                serializedName: "disabledFields",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Field",
                        },
                    },
                },
            },
        },
    },
};
const Field = {
    type: {
        name: "Composite",
        className: "Field",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            dataPoint: {
                serializedName: "dataPoint",
                required: true,
                type: {
                    name: "String",
                },
            },
            fieldType: {
                serializedName: "fieldType",
                required: true,
                type: {
                    name: "String",
                },
            },
            dataSource: {
                serializedName: "dataSource",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            mapping: {
                serializedName: "mapping",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            mandatory: {
                serializedName: "mandatory",
                type: {
                    name: "Boolean",
                },
            },
            autoValidationThreshold: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "autoValidationThreshold",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            enableAutoValidationThreshold: {
                serializedName: "enableAutoValidationThreshold",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            showDropdown: {
                serializedName: "showDropdown",
                type: {
                    name: "Boolean",
                },
            },
            displayEnumValue: {
                serializedName: "displayEnumValue",
                type: {
                    name: "Boolean",
                },
            },
            hideEnumDetail: {
                serializedName: "hideEnumDetail",
                type: {
                    name: "Boolean",
                },
            },
            dropNull: {
                serializedName: "dropNull",
                type: {
                    name: "Boolean",
                },
            },
            enabledChildFields: {
                serializedName: "enabledChildFields",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Field",
                        },
                    },
                },
            },
            disabledChildFields: {
                serializedName: "disabledChildFields",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Field",
                        },
                    },
                },
            },
            slug: {
                serializedName: "slug",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            displayRawText: {
                serializedName: "displayRawText",
                type: {
                    name: "Boolean",
                },
            },
            fields: {
                serializedName: "fields",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } },
                        },
                    },
                },
            },
        },
    },
};
const ExtractorConfig = {
    type: {
        name: "Composite",
        className: "ExtractorConfig",
        modelProperties: {
            resumeRedact: {
                serializedName: "resumeRedact",
                type: {
                    name: "Composite",
                    className: "RedactConfig",
                },
            },
        },
    },
};
const RedactConfig = {
    type: {
        name: "Composite",
        className: "RedactConfig",
        modelProperties: {
            redactHeadshot: {
                serializedName: "redactHeadshot",
                type: {
                    name: "Boolean",
                },
            },
            redactPersonalDetails: {
                serializedName: "redactPersonalDetails",
                type: {
                    name: "Boolean",
                },
            },
            redactWorkDetails: {
                serializedName: "redactWorkDetails",
                type: {
                    name: "Boolean",
                },
            },
            redactReferees: {
                serializedName: "redactReferees",
                type: {
                    name: "Boolean",
                },
            },
            redactEducationDetails: {
                serializedName: "redactEducationDetails",
                type: {
                    name: "Boolean",
                },
            },
            redactLocations: {
                serializedName: "redactLocations",
                type: {
                    name: "Boolean",
                },
            },
            redactDates: {
                serializedName: "redactDates",
                type: {
                    name: "Boolean",
                },
            },
            redactGender: {
                serializedName: "redactGender",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const CollectionCreate = {
    type: {
        name: "Composite",
        className: "CollectionCreate",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                required: true,
                type: {
                    name: "String",
                },
            },
            extractor: {
                serializedName: "extractor",
                type: {
                    name: "String",
                },
            },
            baseExtractor: {
                serializedName: "baseExtractor",
                type: {
                    name: "String",
                },
            },
            autoValidationThreshold: {
                serializedName: "autoValidationThreshold",
                type: {
                    name: "Number",
                },
            },
            enableAutoValidationThreshold: {
                defaultValue: false,
                serializedName: "enableAutoValidationThreshold",
                type: {
                    name: "Boolean",
                },
            },
            fields: {
                serializedName: "fields",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldGroup",
                        },
                    },
                },
            },
            fieldsLayout: {
                serializedName: "fieldsLayout",
                type: {
                    name: "Composite",
                    className: "FieldsLayout",
                },
            },
            dateFormatPreference: {
                serializedName: "dateFormatPreference",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            dateFormatFromDocument: {
                serializedName: "dateFormatFromDocument",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            extractorConfig: {
                serializedName: "extractorConfig",
                type: {
                    name: "Composite",
                    className: "ExtractorConfig",
                },
            },
            allowOpenai: {
                defaultValue: false,
                serializedName: "allowOpenai",
                type: {
                    name: "Boolean",
                },
            },
            trainsExtractor: {
                serializedName: "trainsExtractor",
                type: {
                    name: "Boolean",
                },
            },
            disableConfirmationIfValidationRulesFail: {
                defaultValue: false,
                serializedName: "disableConfirmationIfValidationRulesFail",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const CollectionUpdate = {
    type: {
        name: "Composite",
        className: "CollectionUpdate",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            autoValidationThreshold: {
                serializedName: "autoValidationThreshold",
                type: {
                    name: "Number",
                },
            },
            enableAutoValidationThreshold: {
                defaultValue: false,
                serializedName: "enableAutoValidationThreshold",
                type: {
                    name: "Boolean",
                },
            },
            fields: {
                serializedName: "fields",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldGroup",
                        },
                    },
                },
            },
            fieldsLayout: {
                serializedName: "fieldsLayout",
                type: {
                    name: "Composite",
                    className: "FieldsLayout",
                },
            },
            dateFormatPreference: {
                serializedName: "dateFormatPreference",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            dateFormatFromDocument: {
                serializedName: "dateFormatFromDocument",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            extractorConfig: {
                serializedName: "extractorConfig",
                type: {
                    name: "Composite",
                    className: "ExtractorConfig",
                },
            },
            allowOpenai: {
                defaultValue: false,
                serializedName: "allowOpenai",
                type: {
                    name: "Boolean",
                },
            },
            trainsExtractor: {
                serializedName: "trainsExtractor",
                type: {
                    name: "Boolean",
                },
            },
            disableConfirmationIfValidationRulesFail: {
                defaultValue: false,
                serializedName: "disableConfirmationIfValidationRulesFail",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const DataFieldCreate = {
    type: {
        name: "Composite",
        className: "DataFieldCreate",
        modelProperties: {
            categoryLabel: {
                serializedName: "categoryLabel",
                type: {
                    name: "String",
                },
            },
            field: {
                serializedName: "field",
                type: {
                    name: "Composite",
                    className: "DataFieldCreateField",
                },
            },
            dataPoint: {
                serializedName: "dataPoint",
                type: {
                    name: "Composite",
                    className: "DataFieldCreateDataPoint",
                },
            },
        },
    },
};
const DataFieldCreateField = {
    type: {
        name: "Composite",
        className: "DataFieldCreateField",
        modelProperties: {
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            fieldType: {
                serializedName: "fieldType",
                type: {
                    name: "String",
                },
            },
            mandatory: {
                serializedName: "mandatory",
                type: {
                    name: "Boolean",
                },
            },
            showDropdown: {
                serializedName: "showDropdown",
                type: {
                    name: "Boolean",
                },
            },
            displayEnumValue: {
                serializedName: "displayEnumValue",
                type: {
                    name: "Boolean",
                },
            },
            autoValidationThreshold: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "autoValidationThreshold",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            enableAutoValidationThreshold: {
                serializedName: "enableAutoValidationThreshold",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            dataSource: {
                serializedName: "dataSource",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            mapping: {
                serializedName: "mapping",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            displayRawText: {
                serializedName: "displayRawText",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const DataFieldCreateDataPoint = {
    type: {
        name: "Composite",
        className: "DataFieldCreateDataPoint",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            slug: {
                serializedName: "slug",
                required: true,
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            multiple: {
                serializedName: "multiple",
                type: {
                    name: "Boolean",
                },
            },
            noRect: {
                serializedName: "noRect",
                type: {
                    name: "Boolean",
                },
            },
            parent: {
                serializedName: "parent",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            manualEntry: {
                serializedName: "manualEntry",
                type: {
                    name: "Boolean",
                },
            },
            mappingDataSource: {
                serializedName: "mappingDataSource",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DataField = {
    type: {
        name: "Composite",
        className: "DataField",
        modelProperties: {
            categoryLabel: {
                serializedName: "categoryLabel",
                type: {
                    name: "String",
                },
            },
            field: {
                serializedName: "field",
                type: {
                    name: "Composite",
                    className: "DataFieldField",
                },
            },
            dataPoint: {
                serializedName: "dataPoint",
                type: {
                    name: "Composite",
                    className: "DataFieldDataPoint",
                },
            },
        },
    },
};
const DataFieldField = {
    type: {
        name: "Composite",
        className: "DataFieldField",
        modelProperties: {
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            fieldType: {
                serializedName: "fieldType",
                type: {
                    name: "String",
                },
            },
            mandatory: {
                serializedName: "mandatory",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            showDropdown: {
                serializedName: "showDropdown",
                type: {
                    name: "Boolean",
                },
            },
            displayEnumValue: {
                serializedName: "displayEnumValue",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            autoValidationThreshold: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "autoValidationThreshold",
                required: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            enableAutoValidationThreshold: {
                serializedName: "enableAutoValidationThreshold",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            enabledChildFields: {
                serializedName: "enabledChildFields",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Field",
                        },
                    },
                },
            },
            disabledChildFields: {
                serializedName: "disabledChildFields",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Field",
                        },
                    },
                },
            },
            dataSource: {
                serializedName: "dataSource",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            mapping: {
                serializedName: "mapping",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            displayRawText: {
                serializedName: "displayRawText",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const DataFieldDataPoint = {
    type: {
        name: "Composite",
        className: "DataFieldDataPoint",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            slug: {
                serializedName: "slug",
                required: true,
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            multiple: {
                serializedName: "multiple",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            noRect: {
                serializedName: "noRect",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            parent: {
                serializedName: "parent",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            children: {
                serializedName: "children",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataPoint",
                        },
                    },
                },
            },
            manualEntry: {
                serializedName: "manualEntry",
                type: {
                    name: "Boolean",
                },
            },
            availableDataSources: {
                serializedName: "availableDataSources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MappingDataSource",
                        },
                    },
                },
            },
        },
    },
};
const DataPoint = {
    type: {
        name: "Composite",
        className: "DataPoint",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            slug: {
                serializedName: "slug",
                required: true,
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            annotationContentType: {
                serializedName: "annotationContentType",
                required: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "Composite",
                    className: "Organization",
                },
            },
            extractor: {
                serializedName: "extractor",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            multiple: {
                serializedName: "multiple",
                type: {
                    name: "Boolean",
                },
            },
            noRect: {
                serializedName: "noRect",
                type: {
                    name: "Boolean",
                },
            },
            parent: {
                serializedName: "parent",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            children: {
                serializedName: "children",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataPoint",
                        },
                    },
                },
            },
            availableDataSources: {
                serializedName: "availableDataSources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MappingDataSource",
                        },
                    },
                },
            },
            mappingDataSource: {
                serializedName: "mappingDataSource",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            manualEntry: {
                serializedName: "manualEntry",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const MappingDataSource = {
    type: {
        name: "Composite",
        className: "MappingDataSource",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            keyProperty: {
                serializedName: "keyProperty",
                required: true,
                type: {
                    name: "String",
                },
            },
            displayProperty: {
                serializedName: "displayProperty",
                required: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            schema: {
                serializedName: "schema",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
const CollectionField = {
    type: {
        name: "Composite",
        className: "CollectionField",
        modelProperties: {
            label: {
                serializedName: "label",
                type: {
                    name: "String",
                },
            },
            fieldType: {
                serializedName: "fieldType",
                type: {
                    name: "String",
                },
            },
            mandatory: {
                serializedName: "mandatory",
                type: {
                    name: "Boolean",
                },
            },
            showDropdown: {
                serializedName: "showDropdown",
                type: {
                    name: "Boolean",
                },
            },
            displayEnumValue: {
                serializedName: "displayEnumValue",
                type: {
                    name: "Boolean",
                },
            },
            autoValidationThreshold: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "autoValidationThreshold",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            enableAutoValidationThreshold: {
                serializedName: "enableAutoValidationThreshold",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            dataSource: {
                serializedName: "dataSource",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            mapping: {
                serializedName: "mapping",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            displayRawText: {
                serializedName: "displayRawText",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UsageByCollection = {
    type: {
        name: "Composite",
        className: "UsageByCollection",
        modelProperties: {
            month: {
                serializedName: "month",
                required: true,
                type: {
                    name: "String",
                },
            },
            count: {
                serializedName: "count",
                required: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const PathsL3R02CV3DocumentsGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "PathsL3R02CV3DocumentsGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Document",
                        },
                    },
                },
            },
        },
    },
};
const Document = {
    type: {
        name: "Composite",
        className: "Document",
        uberParent: "Document",
        polymorphicDiscriminator: {
            serializedName: "extractor",
            clientName: "extractor",
        },
        modelProperties: {
            data: {
                serializedName: "data",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
            extractor: {
                serializedName: "extractor",
                required: true,
                type: {
                    name: "String",
                },
            },
            meta: {
                serializedName: "meta",
                type: {
                    name: "Composite",
                    className: "DocumentMeta",
                },
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "DocumentError",
                },
            },
            warnings: {
                serializedName: "warnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DocumentWarning",
                        },
                    },
                },
            },
        },
    },
};
const DocumentMeta = {
    type: {
        name: "Composite",
        className: "DocumentMeta",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            customIdentifier: {
                serializedName: "customIdentifier",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            fileName: {
                serializedName: "fileName",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            ready: {
                serializedName: "ready",
                type: {
                    name: "Boolean",
                },
            },
            readyDt: {
                serializedName: "readyDt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            failed: {
                serializedName: "failed",
                type: {
                    name: "Boolean",
                },
            },
            expiryTime: {
                serializedName: "expiryTime",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            language: {
                serializedName: "language",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            pdf: {
                serializedName: "pdf",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            parentDocument: {
                serializedName: "parentDocument",
                type: {
                    name: "Composite",
                    className: "DocumentMetaParentDocument",
                },
            },
            childDocuments: {
                serializedName: "childDocuments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DocumentMetaChildDocumentsItem",
                        },
                    },
                },
            },
            pages: {
                serializedName: "pages",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PageMeta",
                        },
                    },
                },
            },
            isOcrd: {
                serializedName: "isOcrd",
                type: {
                    name: "Boolean",
                },
            },
            ocrConfidence: {
                serializedName: "ocrConfidence",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            reviewUrl: {
                serializedName: "reviewUrl",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            collection: {
                serializedName: "collection",
                type: {
                    name: "Composite",
                    className: "DocumentMetaCollection",
                },
            },
            workspace: {
                serializedName: "workspace",
                type: {
                    name: "Composite",
                    className: "DocumentMetaWorkspace",
                },
            },
            archivedDt: {
                serializedName: "archivedDt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            isArchived: {
                serializedName: "isArchived",
                type: {
                    name: "Boolean",
                },
            },
            skipParse: {
                serializedName: "skipParse",
                type: {
                    name: "Boolean",
                },
            },
            confirmedDt: {
                serializedName: "confirmedDt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            confirmedBy: {
                serializedName: "confirmedBy",
                type: {
                    name: "Composite",
                    className: "UserNullable",
                },
            },
            isConfirmed: {
                serializedName: "isConfirmed",
                type: {
                    name: "Boolean",
                },
            },
            rejectedDt: {
                serializedName: "rejectedDt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            rejectedBy: {
                serializedName: "rejectedBy",
                type: {
                    name: "Composite",
                    className: "UserNullable",
                },
            },
            isRejected: {
                serializedName: "isRejected",
                type: {
                    name: "Boolean",
                },
            },
            createdDt: {
                serializedName: "createdDt",
                type: {
                    name: "DateTime",
                },
            },
            errorCode: {
                serializedName: "errorCode",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            errorDetail: {
                serializedName: "errorDetail",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            file: {
                serializedName: "file",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            html: {
                serializedName: "html",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Tag",
                        },
                    },
                },
            },
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "Composite",
                    className: "User",
                },
            },
            sourceEmail: {
                serializedName: "sourceEmail",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            sourceEmailAddress: {
                serializedName: "sourceEmailAddress",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            regionBias: {
                serializedName: "regionBias",
                type: {
                    name: "Composite",
                    className: "RegionBias",
                },
            },
        },
    },
};
const DocumentMetaParentDocument = {
    type: {
        name: "Composite",
        className: "DocumentMetaParentDocument",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
            customIdentifier: {
                serializedName: "customIdentifier",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DocumentMetaChildDocumentsItem = {
    type: {
        name: "Composite",
        className: "DocumentMetaChildDocumentsItem",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
            customIdentifier: {
                serializedName: "customIdentifier",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PageMeta = {
    type: {
        name: "Composite",
        className: "PageMeta",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            pageIndex: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "pageIndex",
                required: true,
                type: {
                    name: "Number",
                },
            },
            image: {
                serializedName: "image",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            imageTranslated: {
                serializedName: "imageTranslated",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            height: {
                serializedName: "height",
                required: true,
                type: {
                    name: "Number",
                },
            },
            width: {
                serializedName: "width",
                required: true,
                type: {
                    name: "Number",
                },
            },
            rotation: {
                constraints: {
                    InclusiveMaximum: 360,
                    InclusiveMinimum: -360,
                },
                serializedName: "rotation",
                required: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const DocumentMetaCollection = {
    type: {
        name: "Composite",
        className: "DocumentMetaCollection",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            extractor: {
                serializedName: "extractor",
                type: {
                    name: "Composite",
                    className: "DocumentMetaCollectionExtractor",
                },
            },
            validationRules: {
                serializedName: "validationRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationRule",
                        },
                    },
                },
            },
        },
    },
};
const DocumentMetaCollectionExtractor = {
    type: {
        name: "Composite",
        className: "DocumentMetaCollectionExtractor",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            baseExtractor: {
                serializedName: "baseExtractor",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            validatable: {
                serializedName: "validatable",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const ValidationRule = {
    type: {
        name: "Composite",
        className: "ValidationRule",
        modelProperties: {
            slug: {
                constraints: {
                    Pattern: new RegExp("^[a-z0-9_]+$"),
                },
                serializedName: "slug",
                required: true,
                type: {
                    name: "String",
                },
            },
            dataPoints: {
                serializedName: "dataPoints",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const DocumentMetaWorkspace = {
    type: {
        name: "Composite",
        className: "DocumentMetaWorkspace",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UserNullable = {
    type: {
        name: "Composite",
        className: "UserNullable",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                type: {
                    name: "Number",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String",
                },
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String",
                },
            },
            avatar: {
                serializedName: "avatar",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Tag = {
    type: {
        name: "Composite",
        className: "Tag",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                required: true,
                type: {
                    name: "String",
                },
            },
            documentCount: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "documentCount",
                required: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const RegionBias = {
    type: {
        name: "Composite",
        className: "RegionBias",
        modelProperties: {
            country: {
                serializedName: "country",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            countries: {
                serializedName: "countries",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            squareCoordinates: {
                serializedName: "squareCoordinates",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            strict: {
                serializedName: "strict",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const DocumentError = {
    type: {
        name: "Composite",
        className: "DocumentError",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            errorDetail: {
                serializedName: "errorDetail",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DocumentWarning = {
    type: {
        name: "Composite",
        className: "DocumentWarning",
        modelProperties: {
            warningCode: {
                serializedName: "warningCode",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            warningDetail: {
                serializedName: "warningDetail",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DocumentCreateData = {
    type: {
        name: "Composite",
        className: "DocumentCreateData",
    },
};
const ResumeData = {
    type: {
        name: "Composite",
        className: "ResumeData",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "ResumeDataName",
                },
            },
            phoneNumbers: {
                serializedName: "phoneNumbers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            phoneNumberDetails: {
                serializedName: "phoneNumberDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataPhoneNumberDetailsItem",
                        },
                    },
                },
            },
            websites: {
                serializedName: "websites",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            emails: {
                serializedName: "emails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            dateOfBirth: {
                serializedName: "dateOfBirth",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "Location",
                },
            },
            objective: {
                defaultValue: "",
                serializedName: "objective",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            languageCodes: {
                serializedName: "languageCodes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            summary: {
                defaultValue: "",
                serializedName: "summary",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            totalYearsExperience: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "totalYearsExperience",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            headShot: {
                serializedName: "headShot",
                readOnly: true,
                nullable: true,
                type: {
                    name: "ByteArray",
                },
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Education",
                        },
                    },
                },
            },
            profession: {
                serializedName: "profession",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            linkedin: {
                serializedName: "linkedin",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            workExperience: {
                serializedName: "workExperience",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataWorkExperienceItem",
                        },
                    },
                },
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataSkillsItem",
                        },
                    },
                },
            },
            certifications: {
                serializedName: "certifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            publications: {
                serializedName: "publications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            referees: {
                serializedName: "referees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataRefereesItem",
                        },
                    },
                },
            },
            sections: {
                serializedName: "sections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataSectionsItem",
                        },
                    },
                },
            },
            isResumeProbability: {
                serializedName: "isResumeProbability",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            rawText: {
                serializedName: "rawText",
                type: {
                    name: "String",
                },
            },
            redactedText: {
                serializedName: "redactedText",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResumeDataName = {
    type: {
        name: "Composite",
        className: "ResumeDataName",
        modelProperties: {
            raw: {
                serializedName: "raw",
                type: {
                    name: "String",
                },
            },
            first: {
                serializedName: "first",
                type: {
                    name: "String",
                },
            },
            last: {
                serializedName: "last",
                type: {
                    name: "String",
                },
            },
            middle: {
                serializedName: "middle",
                type: {
                    name: "String",
                },
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResumeDataPhoneNumberDetailsItem = {
    type: {
        name: "Composite",
        className: "ResumeDataPhoneNumberDetailsItem",
        modelProperties: {
            rawText: {
                serializedName: "rawText",
                type: {
                    name: "String",
                },
            },
            formattedNumber: {
                serializedName: "formattedNumber",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            countryCode: {
                serializedName: "countryCode",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            internationalCountryCode: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "internationalCountryCode",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            nationalNumber: {
                serializedName: "nationalNumber",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Location = {
    type: {
        name: "Composite",
        className: "Location",
        modelProperties: {
            formatted: {
                serializedName: "formatted",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            postalCode: {
                serializedName: "postalCode",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            state: {
                serializedName: "state",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            stateCode: {
                serializedName: "stateCode",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            country: {
                serializedName: "country",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            countryCode: {
                serializedName: "countryCode",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            rawInput: {
                serializedName: "rawInput",
                required: true,
                type: {
                    name: "String",
                },
            },
            streetNumber: {
                serializedName: "streetNumber",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            street: {
                serializedName: "street",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            apartmentNumber: {
                serializedName: "apartmentNumber",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            city: {
                serializedName: "city",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            latitude: {
                serializedName: "latitude",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            longitude: {
                serializedName: "longitude",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            poBox: {
                serializedName: "poBox",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Education = {
    type: {
        name: "Composite",
        className: "Education",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                type: {
                    name: "Number",
                },
            },
            organization: {
                serializedName: "organization",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            accreditation: {
                serializedName: "accreditation",
                type: {
                    name: "Composite",
                    className: "Accreditation",
                },
            },
            grade: {
                serializedName: "grade",
                type: {
                    name: "Composite",
                    className: "EducationGrade",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "Location",
                },
            },
            dates: {
                serializedName: "dates",
                type: {
                    name: "Composite",
                    className: "EducationDates",
                },
            },
        },
    },
};
const Accreditation = {
    type: {
        name: "Composite",
        className: "Accreditation",
        modelProperties: {
            education: {
                serializedName: "education",
                type: {
                    name: "String",
                },
            },
            inputStr: {
                serializedName: "inputStr",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            matchStr: {
                serializedName: "matchStr",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            educationLevel: {
                serializedName: "educationLevel",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const EducationGrade = {
    type: {
        name: "Composite",
        className: "EducationGrade",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            raw: {
                serializedName: "raw",
                type: {
                    name: "String",
                },
            },
            metric: {
                serializedName: "metric",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const EducationDates = {
    type: {
        name: "Composite",
        className: "EducationDates",
        modelProperties: {
            completionDate: {
                serializedName: "completionDate",
                type: {
                    name: "Date",
                },
            },
            isCurrent: {
                serializedName: "isCurrent",
                type: {
                    name: "Boolean",
                },
            },
            startDate: {
                serializedName: "startDate",
                nullable: true,
                type: {
                    name: "Date",
                },
            },
            rawText: {
                serializedName: "rawText",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResumeDataWorkExperienceItem = {
    type: {
        name: "Composite",
        className: "ResumeDataWorkExperienceItem",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                type: {
                    name: "Number",
                },
            },
            jobTitle: {
                serializedName: "jobTitle",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            socCode: {
                serializedName: "socCode",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            socName: {
                serializedName: "socName",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            industry: {
                serializedName: "industry",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "Location",
                },
            },
            jobDescription: {
                serializedName: "jobDescription",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            dates: {
                serializedName: "dates",
                type: {
                    name: "Composite",
                    className: "ResumeDataWorkExperienceItemDates",
                },
            },
            occupation: {
                serializedName: "occupation",
                type: {
                    name: "Composite",
                    className: "ResumeDataWorkExperienceItemOccupation",
                },
            },
        },
    },
};
const ResumeDataWorkExperienceItemDates = {
    type: {
        name: "Composite",
        className: "ResumeDataWorkExperienceItemDates",
        modelProperties: {
            startDate: {
                serializedName: "startDate",
                nullable: true,
                type: {
                    name: "Date",
                },
            },
            endDate: {
                serializedName: "endDate",
                nullable: true,
                type: {
                    name: "Date",
                },
            },
            monthsInPosition: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "monthsInPosition",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            isCurrent: {
                serializedName: "isCurrent",
                type: {
                    name: "Boolean",
                },
            },
            rawText: {
                serializedName: "rawText",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResumeDataWorkExperienceItemOccupation = {
    type: {
        name: "Composite",
        className: "ResumeDataWorkExperienceItemOccupation",
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            jobTitleNormalized: {
                serializedName: "jobTitleNormalized",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            emsiId: {
                serializedName: "emsiId",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            managementLevel: {
                serializedName: "managementLevel",
                nullable: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Low", "Mid", "Upper"],
                },
            },
            classification: {
                serializedName: "classification",
                type: {
                    name: "Composite",
                    className: "Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification",
                },
            },
        },
    },
};
const Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification = {
    type: {
        name: "Composite",
        className: "Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification",
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String",
                },
            },
            minorGroup: {
                serializedName: "minorGroup",
                type: {
                    name: "String",
                },
            },
            subMajorGroup: {
                serializedName: "subMajorGroup",
                type: {
                    name: "String",
                },
            },
            majorGroup: {
                serializedName: "majorGroup",
                type: {
                    name: "String",
                },
            },
            socCode: {
                constraints: {
                    InclusiveMaximum: 9999,
                    InclusiveMinimum: 1,
                },
                serializedName: "socCode",
                type: {
                    name: "Number",
                },
            },
            minorGroupCode: {
                constraints: {
                    InclusiveMaximum: 9999,
                    InclusiveMinimum: 1,
                },
                serializedName: "minorGroupCode",
                type: {
                    name: "Number",
                },
            },
            subMajorGroupCode: {
                constraints: {
                    InclusiveMaximum: 9999,
                    InclusiveMinimum: 1,
                },
                serializedName: "subMajorGroupCode",
                type: {
                    name: "Number",
                },
            },
            majorGroupCode: {
                constraints: {
                    InclusiveMaximum: 9999,
                    InclusiveMinimum: 1,
                },
                serializedName: "majorGroupCode",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ResumeDataSkillsItem = {
    type: {
        name: "Composite",
        className: "ResumeDataSkillsItem",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                type: {
                    name: "Number",
                },
            },
            emsiId: {
                serializedName: "emsiId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            lastUsed: {
                serializedName: "lastUsed",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            numberOfMonths: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "numberOfMonths",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            count: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "count",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            weighting: {
                serializedName: "weighting",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            sources: {
                serializedName: "sources",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeDataSkillsPropertiesItemsItem",
                        },
                    },
                },
            },
        },
    },
};
const ResumeDataSkillsPropertiesItemsItem = {
    type: {
        name: "Composite",
        className: "ResumeDataSkillsPropertiesItemsItem",
        modelProperties: {
            section: {
                serializedName: "section",
                type: {
                    name: "String",
                },
            },
            position: {
                serializedName: "position",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            workExperienceId: {
                serializedName: "workExperienceId",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ResumeDataRefereesItem = {
    type: {
        name: "Composite",
        className: "ResumeDataRefereesItem",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            text: {
                serializedName: "text",
                type: {
                    name: "String",
                },
            },
            email: {
                serializedName: "email",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            number: {
                serializedName: "number",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            position: {
                serializedName: "position",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResumeDataSectionsItem = {
    type: {
        name: "Composite",
        className: "ResumeDataSectionsItem",
        modelProperties: {
            sectionType: {
                serializedName: "sectionType",
                type: {
                    name: "String",
                },
            },
            bbox: {
                constraints: {
                    MinItems: 4,
                    MaxItems: 4,
                },
                serializedName: "bbox",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            pageIndex: {
                serializedName: "pageIndex",
                type: {
                    name: "Number",
                },
            },
            text: {
                serializedName: "text",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const JobDescriptionData = {
    type: {
        name: "Composite",
        className: "JobDescriptionData",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobTitleAnnotation",
                },
            },
            contactEmail: {
                serializedName: "contactEmail",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            contactName: {
                serializedName: "contactName",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            contactPhone: {
                serializedName: "contactPhone",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            startDate: {
                serializedName: "startDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotation",
                },
            },
            endDate: {
                serializedName: "endDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotation",
                },
            },
            jobType: {
                serializedName: "jobType",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LanguageAnnotation",
                        },
                    },
                },
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkillAnnotation",
                        },
                    },
                },
            },
            organizationName: {
                serializedName: "organizationName",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            organizationWebsite: {
                serializedName: "organizationWebsite",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            educationLevel: {
                serializedName: "educationLevel",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            educationAccreditation: {
                serializedName: "educationAccreditation",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            expectedRemuneration: {
                serializedName: "expectedRemuneration",
                type: {
                    name: "Composite",
                    className: "ExpectedRemunerationAnnotation",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "LocationAnnotation",
                },
            },
            certifications: {
                serializedName: "certifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TextAnnotation",
                        },
                    },
                },
            },
            yearsExperience: {
                serializedName: "yearsExperience",
                type: {
                    name: "Composite",
                    className: "YearsExperienceAnnotation",
                },
            },
            rawText: {
                serializedName: "rawText",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const JobTitleAnnotationParsed = {
    type: {
        name: "Composite",
        className: "JobTitleAnnotationParsed",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            managementLevel: {
                serializedName: "managementLevel",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            classification: {
                serializedName: "classification",
                type: {
                    name: "Composite",
                    className: "JobTitleAnnotationParsedClassification",
                },
            },
        },
    },
};
const JobTitleAnnotationParsedClassification = {
    type: {
        name: "Composite",
        className: "JobTitleAnnotationParsedClassification",
        modelProperties: {
            socCode: {
                serializedName: "socCode",
                type: {
                    name: "Number",
                },
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String",
                },
            },
            minorGroup: {
                serializedName: "minorGroup",
                type: {
                    name: "String",
                },
            },
            subMajorGroup: {
                serializedName: "subMajorGroup",
                type: {
                    name: "String",
                },
            },
            majorGroup: {
                serializedName: "majorGroup",
                type: {
                    name: "String",
                },
            },
            minorGroupCode: {
                constraints: {
                    InclusiveMaximum: 9999,
                    InclusiveMinimum: 1,
                },
                serializedName: "minorGroupCode",
                type: {
                    name: "Number",
                },
            },
            subMajorGroupCode: {
                constraints: {
                    InclusiveMaximum: 9999,
                    InclusiveMinimum: 1,
                },
                serializedName: "subMajorGroupCode",
                type: {
                    name: "Number",
                },
            },
            majorGroupCode: {
                constraints: {
                    InclusiveMaximum: 9999,
                    InclusiveMinimum: 1,
                },
                serializedName: "majorGroupCode",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const Annotation = {
    type: {
        name: "Composite",
        className: "Annotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            rectangle: {
                serializedName: "rectangle",
                type: {
                    name: "Composite",
                    className: "Rectangle",
                },
            },
            rectangles: {
                serializedName: "rectangles",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Rectangle",
                        },
                    },
                },
            },
            document: {
                serializedName: "document",
                required: true,
                type: {
                    name: "String",
                },
            },
            pageIndex: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "pageIndex",
                required: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            raw: {
                serializedName: "raw",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            confidence: {
                serializedName: "confidence",
                required: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            classificationConfidence: {
                serializedName: "classificationConfidence",
                required: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            textExtractionConfidence: {
                serializedName: "textExtractionConfidence",
                required: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            isVerified: {
                serializedName: "isVerified",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            isClientVerified: {
                serializedName: "isClientVerified",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            isAutoVerified: {
                serializedName: "isAutoVerified",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            dataPoint: {
                serializedName: "dataPoint",
                required: true,
                type: {
                    name: "String",
                },
            },
            contentType: {
                serializedName: "contentType",
                required: true,
                type: {
                    name: "String",
                },
            },
            parent: {
                serializedName: "parent",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const Rectangle = {
    type: {
        name: "Composite",
        className: "Rectangle",
        modelProperties: {
            pageIndex: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "pageIndex",
                type: {
                    name: "Number",
                },
            },
            x0: {
                serializedName: "x0",
                required: true,
                type: {
                    name: "Number",
                },
            },
            y0: {
                serializedName: "y0",
                required: true,
                type: {
                    name: "Number",
                },
            },
            x1: {
                serializedName: "x1",
                required: true,
                type: {
                    name: "Number",
                },
            },
            y1: {
                serializedName: "y1",
                required: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ExpectedRemunerationAnnotationParsed = {
    type: {
        name: "Composite",
        className: "ExpectedRemunerationAnnotationParsed",
        modelProperties: {
            minimum: {
                serializedName: "minimum",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            maximum: {
                serializedName: "maximum",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            currency: {
                serializedName: "currency",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            unit: {
                serializedName: "unit",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const YearsExperienceAnnotationParsed = {
    type: {
        name: "Composite",
        className: "YearsExperienceAnnotationParsed",
        modelProperties: {
            minimum: {
                serializedName: "minimum",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            maximum: {
                serializedName: "maximum",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const DocumentUpdate = {
    type: {
        name: "Composite",
        className: "DocumentUpdate",
        modelProperties: {
            collection: {
                serializedName: "collection",
                type: {
                    name: "String",
                },
            },
            fileName: {
                serializedName: "fileName",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            expiryTime: {
                serializedName: "expiryTime",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            isConfirmed: {
                serializedName: "isConfirmed",
                type: {
                    name: "Boolean",
                },
            },
            isRejected: {
                serializedName: "isRejected",
                type: {
                    name: "Boolean",
                },
            },
            isArchived: {
                serializedName: "isArchived",
                type: {
                    name: "Boolean",
                },
            },
            skipParse: {
                serializedName: "skipParse",
                type: {
                    name: "Boolean",
                },
            },
            language: {
                serializedName: "language",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
            customIdentifier: {
                serializedName: "customIdentifier",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PathsO1OmciV3DocumentsIdentifierUpdateDataPostRequestbodyContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsO1OmciV3DocumentsIdentifierUpdateDataPostRequestbodyContentApplicationJsonSchema",
    },
};
const JobDescriptionDataUpdate = {
    type: {
        name: "Composite",
        className: "JobDescriptionDataUpdate",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobTitleAnnotationUpdate",
                },
            },
            contactEmail: {
                serializedName: "contactEmail",
                type: {
                    name: "Composite",
                    className: "TextAnnotationUpdate",
                },
            },
            contactName: {
                serializedName: "contactName",
                type: {
                    name: "Composite",
                    className: "TextAnnotationUpdate",
                },
            },
            contactPhone: {
                serializedName: "contactPhone",
                type: {
                    name: "Composite",
                    className: "TextAnnotationUpdate",
                },
            },
            startDate: {
                serializedName: "startDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotationUpdate",
                },
            },
            endDate: {
                serializedName: "endDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotationUpdate",
                },
            },
            jobType: {
                serializedName: "jobType",
                type: {
                    name: "Composite",
                    className: "TextAnnotationUpdate",
                },
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LanguageAnnotationUpdate",
                        },
                    },
                },
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkillAnnotationUpdate",
                        },
                    },
                },
            },
            organizationName: {
                serializedName: "organizationName",
                type: {
                    name: "Composite",
                    className: "TextAnnotationUpdate",
                },
            },
            organizationWebsite: {
                serializedName: "organizationWebsite",
                type: {
                    name: "Composite",
                    className: "TextAnnotationUpdate",
                },
            },
            educationLevel: {
                serializedName: "educationLevel",
                type: {
                    name: "Composite",
                    className: "TextAnnotationUpdate",
                },
            },
            educationAccreditation: {
                serializedName: "educationAccreditation",
                type: {
                    name: "Composite",
                    className: "TextAnnotationUpdate",
                },
            },
            expectedRemuneration: {
                serializedName: "expectedRemuneration",
                type: {
                    name: "Composite",
                    className: "ExpectedRemunerationAnnotationUpdate",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "LocationAnnotationUpdate",
                },
            },
            certifications: {
                serializedName: "certifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TextAnnotationUpdate",
                        },
                    },
                },
            },
            yearsExperience: {
                serializedName: "yearsExperience",
                type: {
                    name: "Composite",
                    className: "YearsExperienceAnnotationUpdate",
                },
            },
        },
    },
};
const AnnotationBase = {
    type: {
        name: "Composite",
        className: "AnnotationBase",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "Number",
                },
            },
            rectangle: {
                serializedName: "rectangle",
                type: {
                    name: "Composite",
                    className: "Rectangle",
                },
            },
            rectangles: {
                serializedName: "rectangles",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Rectangle",
                        },
                    },
                },
            },
            pageIndex: {
                serializedName: "pageIndex",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            confidence: {
                serializedName: "confidence",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            classificationConfidence: {
                serializedName: "classificationConfidence",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            textExtractionConfidence: {
                serializedName: "textExtractionConfidence",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            isVerified: {
                serializedName: "isVerified",
                type: {
                    name: "Boolean",
                },
            },
            isClientVerified: {
                serializedName: "isClientVerified",
                type: {
                    name: "Boolean",
                },
            },
            isAutoVerified: {
                serializedName: "isAutoVerified",
                type: {
                    name: "Boolean",
                },
            },
            dataPoint: {
                serializedName: "dataPoint",
                type: {
                    name: "String",
                },
            },
            contentType: {
                serializedName: "contentType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const JobTitleParsed = {
    type: {
        name: "Composite",
        className: "JobTitleParsed",
        modelProperties: {
            parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "JobTitleParsedParsed",
                },
            },
        },
    },
};
const JobTitleParsedParsed = {
    type: {
        name: "Composite",
        className: "JobTitleParsedParsed",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            managementLevel: {
                serializedName: "managementLevel",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            classification: {
                serializedName: "classification",
                type: {
                    name: "Composite",
                    className: "JobTitleParsedClassification",
                },
            },
        },
    },
};
const JobTitleParsedClassification = {
    type: {
        name: "Composite",
        className: "JobTitleParsedClassification",
        modelProperties: {
            socCode: {
                serializedName: "socCode",
                type: {
                    name: "Number",
                },
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String",
                },
            },
            minorGroup: {
                serializedName: "minorGroup",
                type: {
                    name: "String",
                },
            },
            subMajorGroup: {
                serializedName: "subMajorGroup",
                type: {
                    name: "String",
                },
            },
            majorGroup: {
                serializedName: "majorGroup",
                type: {
                    name: "String",
                },
            },
            minorGroupCode: {
                serializedName: "minorGroupCode",
                type: {
                    name: "Number",
                },
            },
            subMajorGroupCode: {
                serializedName: "subMajorGroupCode",
                type: {
                    name: "Number",
                },
            },
            majorGroupCode: {
                serializedName: "majorGroupCode",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ExpectedRemunerationAnnotationUpdateParsed = {
    type: {
        name: "Composite",
        className: "ExpectedRemunerationAnnotationUpdateParsed",
        modelProperties: {
            minimum: {
                serializedName: "minimum",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            maximum: {
                serializedName: "maximum",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            currency: {
                serializedName: "currency",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            unit: {
                serializedName: "unit",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const YearsExperienceAnnotationUpdateParsed = {
    type: {
        name: "Composite",
        className: "YearsExperienceAnnotationUpdateParsed",
        modelProperties: {
            minimum: {
                serializedName: "minimum",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            maximum: {
                serializedName: "maximum",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const BatchAddTagRequest = {
    type: {
        name: "Composite",
        className: "BatchAddTagRequest",
        modelProperties: {
            identifiers: {
                serializedName: "identifiers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            tag: {
                serializedName: "tag",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const BatchRemoveTagRequest = {
    type: {
        name: "Composite",
        className: "BatchRemoveTagRequest",
        modelProperties: {
            identifiers: {
                serializedName: "identifiers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            tag: {
                serializedName: "tag",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ValidationResult = {
    type: {
        name: "Composite",
        className: "ValidationResult",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            annotations: {
                serializedName: "annotations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            passed: {
                serializedName: "passed",
                required: true,
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            ruleSlug: {
                constraints: {
                    Pattern: new RegExp("^[a-z0-9][a-z0-9-]*[a-z0-9]$"),
                },
                serializedName: "ruleSlug",
                required: true,
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String",
                },
            },
            document: {
                serializedName: "document",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ValidationResultCreate = {
    type: {
        name: "Composite",
        className: "ValidationResultCreate",
        modelProperties: {
            annotations: {
                serializedName: "annotations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            passed: {
                serializedName: "passed",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            ruleSlug: {
                constraints: {
                    Pattern: new RegExp("^[a-z0-9][a-z0-9-]*[a-z0-9]$"),
                },
                serializedName: "ruleSlug",
                required: true,
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String",
                },
            },
            document: {
                serializedName: "document",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ValidationResultUpdate = {
    type: {
        name: "Composite",
        className: "ValidationResultUpdate",
        modelProperties: {
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            passed: {
                serializedName: "passed",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            ruleSlug: {
                constraints: {
                    Pattern: new RegExp("^[a-z0-9][a-z0-9-]*[a-z0-9]$"),
                },
                serializedName: "ruleSlug",
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String",
                },
            },
            document: {
                serializedName: "document",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const BatchDeleteValidationResultsRequest = {
    type: {
        name: "Composite",
        className: "BatchDeleteValidationResultsRequest",
        modelProperties: {
            ids: {
                serializedName: "ids",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
        },
    },
};
const DocumentSplitter = {
    type: {
        name: "Composite",
        className: "DocumentSplitter",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            extractor: {
                serializedName: "extractor",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            llmModel: {
                serializedName: "llmModel",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            llmHint: {
                serializedName: "llmHint",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DocumentEditRequest = {
    type: {
        name: "Composite",
        className: "DocumentEditRequest",
        modelProperties: {
            splits: {
                serializedName: "splits",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DocumentSplit",
                        },
                    },
                },
            },
        },
    },
};
const DocumentSplit = {
    type: {
        name: "Composite",
        className: "DocumentSplit",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "any",
                },
            },
            pages: {
                serializedName: "pages",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DocumentSplitPage",
                        },
                    },
                },
            },
        },
    },
};
const DocumentSplitPage = {
    type: {
        name: "Composite",
        className: "DocumentSplitPage",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            rotation: {
                constraints: {
                    InclusiveMaximum: 360,
                    InclusiveMinimum: -360,
                },
                serializedName: "rotation",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const Meta = {
    type: {
        name: "Composite",
        className: "Meta",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
            customIdentifier: {
                serializedName: "customIdentifier",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            fileName: {
                serializedName: "fileName",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            ready: {
                serializedName: "ready",
                type: {
                    name: "Boolean",
                },
            },
            readyDt: {
                serializedName: "readyDt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            failed: {
                serializedName: "failed",
                type: {
                    name: "Boolean",
                },
            },
            expiryTime: {
                serializedName: "expiryTime",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            language: {
                serializedName: "language",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            pdf: {
                serializedName: "pdf",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            parentDocument: {
                serializedName: "parentDocument",
                type: {
                    name: "Composite",
                    className: "MetaParentDocument",
                },
            },
            childDocuments: {
                serializedName: "childDocuments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetaChildDocumentsItem",
                        },
                    },
                },
            },
            pages: {
                serializedName: "pages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PageMeta",
                        },
                    },
                },
            },
            isVerified: {
                serializedName: "isVerified",
                type: {
                    name: "Boolean",
                },
            },
            reviewUrl: {
                serializedName: "reviewUrl",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            ocrConfidence: {
                serializedName: "ocrConfidence",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            createdDt: {
                serializedName: "createdDt",
                type: {
                    name: "DateTime",
                },
            },
            documentType: {
                serializedName: "documentType",
                type: {
                    name: "String",
                },
            },
            regionBias: {
                serializedName: "regionBias",
                type: {
                    name: "Composite",
                    className: "RegionBias",
                },
            },
            isOcrd: {
                serializedName: "isOcrd",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const MetaParentDocument = {
    type: {
        name: "Composite",
        className: "MetaParentDocument",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const MetaChildDocumentsItem = {
    type: {
        name: "Composite",
        className: "MetaChildDocumentsItem",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ExtractorCreate = {
    type: {
        name: "Composite",
        className: "ExtractorCreate",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            namePlural: {
                serializedName: "namePlural",
                type: {
                    name: "String",
                },
            },
            baseExtractor: {
                serializedName: "baseExtractor",
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String",
                },
            },
            category: {
                serializedName: "category",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            validatable: {
                serializedName: "validatable",
                type: {
                    name: "Boolean",
                },
            },
            fieldGroups: {
                serializedName: "fieldGroups",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldGroup",
                        },
                    },
                },
            },
        },
    },
};
const ExtractorUpdate = {
    type: {
        name: "Composite",
        className: "ExtractorUpdate",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            namePlural: {
                serializedName: "namePlural",
                type: {
                    name: "String",
                },
            },
            baseExtractor: {
                serializedName: "baseExtractor",
                type: {
                    name: "String",
                },
            },
            category: {
                serializedName: "category",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            validatable: {
                serializedName: "validatable",
                type: {
                    name: "Boolean",
                },
            },
            fieldGroups: {
                serializedName: "fieldGroups",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FieldGroup",
                        },
                    },
                },
            },
        },
    },
};
const DataPointCreate = {
    type: {
        name: "Composite",
        className: "DataPointCreate",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            slug: {
                serializedName: "slug",
                required: true,
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            annotationContentType: {
                serializedName: "annotationContentType",
                required: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String",
                },
            },
            extractor: {
                serializedName: "extractor",
                required: true,
                type: {
                    name: "String",
                },
            },
            multiple: {
                serializedName: "multiple",
                type: {
                    name: "Boolean",
                },
            },
            noRect: {
                serializedName: "noRect",
                type: {
                    name: "Boolean",
                },
            },
            parent: {
                serializedName: "parent",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            manualEntry: {
                serializedName: "manualEntry",
                type: {
                    name: "Boolean",
                },
            },
            mappingDataSource: {
                serializedName: "mappingDataSource",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DataPointUpdate = {
    type: {
        name: "Composite",
        className: "DataPointUpdate",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            slug: {
                serializedName: "slug",
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            parent: {
                serializedName: "parent",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            mappingDataSource: {
                serializedName: "mappingDataSource",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Paths4K6IzqV3DataPointChoicesGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "Paths4K6IzqV3DataPointChoicesGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataPointChoice",
                        },
                    },
                },
            },
        },
    },
};
const DataPointChoice = {
    type: {
        name: "Composite",
        className: "DataPointChoice",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String",
                },
            },
            synonyms: {
                serializedName: "synonyms",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DataPointChoiceCreate = {
    type: {
        name: "Composite",
        className: "DataPointChoiceCreate",
        modelProperties: {
            dataPoint: {
                serializedName: "dataPoint",
                required: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "String",
                },
            },
            collection: {
                serializedName: "collection",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String",
                },
            },
            synonyms: {
                serializedName: "synonyms",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DataPointChoiceUpdate = {
    type: {
        name: "Composite",
        className: "DataPointChoiceUpdate",
        modelProperties: {
            dataPoint: {
                serializedName: "dataPoint",
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "String",
                },
            },
            collection: {
                serializedName: "collection",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            synonyms: {
                serializedName: "synonyms",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DataPointChoiceReplaceRequest = {
    type: {
        name: "Composite",
        className: "DataPointChoiceReplaceRequest",
        modelProperties: {
            dataPoint: {
                serializedName: "dataPoint",
                required: true,
                type: {
                    name: "String",
                },
            },
            collection: {
                serializedName: "collection",
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "String",
                },
            },
            choices: {
                serializedName: "choices",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataPointChoiceForReplace",
                        },
                    },
                },
            },
        },
    },
};
const DataPointChoiceForReplace = {
    type: {
        name: "Composite",
        className: "DataPointChoiceForReplace",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String",
                },
            },
            synonyms: {
                serializedName: "synonyms",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DataPointChoiceReplaceResponse = {
    type: {
        name: "Composite",
        className: "DataPointChoiceReplaceResponse",
        modelProperties: {
            dataPoint: {
                serializedName: "dataPoint",
                required: true,
                type: {
                    name: "String",
                },
            },
            collection: {
                serializedName: "collection",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            choices: {
                serializedName: "choices",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataPointChoiceReplaceResponseChoicesItem",
                        },
                    },
                },
            },
        },
    },
};
const DataPointChoiceReplaceResponseChoicesItem = {
    type: {
        name: "Composite",
        className: "DataPointChoiceReplaceResponseChoicesItem",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            synonyms: {
                serializedName: "synonyms",
                required: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            description: {
                serializedName: "description",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Paths1Dgz0V9V3AnnotationsGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "Paths1Dgz0V9V3AnnotationsGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Annotation",
                        },
                    },
                },
            },
        },
    },
};
const AnnotationCreate = {
    type: {
        name: "Composite",
        className: "AnnotationCreate",
        modelProperties: {
            rectangles: {
                serializedName: "rectangles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Rectangle",
                        },
                    },
                },
            },
            document: {
                serializedName: "document",
                required: true,
                type: {
                    name: "String",
                },
            },
            pageIndex: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "pageIndex",
                required: true,
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            dataPoint: {
                serializedName: "dataPoint",
                required: true,
                type: {
                    name: "String",
                },
            },
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            parsed: {
                serializedName: "parsed",
                type: {
                    name: "any",
                },
            },
            isClientVerified: {
                serializedName: "isClientVerified",
                type: {
                    name: "Boolean",
                },
            },
            parent: {
                serializedName: "parent",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            validationResults: {
                serializedName: "validationResults",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChangedValidationResults",
                        },
                    },
                },
            },
        },
    },
};
const ChangedValidationResults = {
    type: {
        name: "Composite",
        className: "ChangedValidationResults",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            created: {
                serializedName: "created",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationResult",
                        },
                    },
                },
            },
            updated: {
                serializedName: "updated",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationResult",
                        },
                    },
                },
            },
            deleted: {
                serializedName: "deleted",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationResult",
                        },
                    },
                },
            },
        },
    },
};
const AnnotationUpdate = {
    type: {
        name: "Composite",
        className: "AnnotationUpdate",
        modelProperties: {
            rectangles: {
                serializedName: "rectangles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Rectangle",
                        },
                    },
                },
            },
            document: {
                serializedName: "document",
                type: {
                    name: "String",
                },
            },
            pageIndex: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "pageIndex",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            parsed: {
                serializedName: "parsed",
                type: {
                    name: "any",
                },
            },
            isClientVerified: {
                serializedName: "isClientVerified",
                type: {
                    name: "Boolean",
                },
            },
            dataPoint: {
                serializedName: "dataPoint",
                type: {
                    name: "String",
                },
            },
            parent: {
                serializedName: "parent",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            validationResults: {
                serializedName: "validationResults",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChangedValidationResults",
                        },
                    },
                },
            },
        },
    },
};
const AnotationDelete = {
    type: {
        name: "Composite",
        className: "AnotationDelete",
        modelProperties: {
            validationResults: {
                serializedName: "validationResults",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
const AnnotationBatchUpdate = {
    type: {
        name: "Composite",
        className: "AnnotationBatchUpdate",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            rectangles: {
                serializedName: "rectangles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Rectangle",
                        },
                    },
                },
            },
            document: {
                serializedName: "document",
                type: {
                    name: "String",
                },
            },
            pageIndex: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "pageIndex",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            raw: {
                serializedName: "raw",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            parsed: {
                serializedName: "parsed",
                type: {
                    name: "any",
                },
            },
            isClientVerified: {
                serializedName: "isClientVerified",
                type: {
                    name: "Boolean",
                },
            },
            dataPoint: {
                serializedName: "dataPoint",
                type: {
                    name: "String",
                },
            },
            parent: {
                serializedName: "parent",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            validationResults: {
                serializedName: "validationResults",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChangedValidationResults",
                        },
                    },
                },
            },
        },
    },
};
const BatchDeleteAnnotationsResponse = {
    type: {
        name: "Composite",
        className: "BatchDeleteAnnotationsResponse",
        modelProperties: {
            validationResults: {
                serializedName: "validationResults",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
const MappingDataSourceCreate = {
    type: {
        name: "Composite",
        className: "MappingDataSourceCreate",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            keyProperty: {
                serializedName: "keyProperty",
                type: {
                    name: "String",
                },
            },
            displayProperty: {
                serializedName: "displayProperty",
                type: {
                    name: "String",
                },
            },
            values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } },
                        },
                    },
                },
            },
            schema: {
                serializedName: "schema",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
const Paths1UmoszuV3MappingDataSourcesGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "Paths1UmoszuV3MappingDataSourcesGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MappingDataSource",
                        },
                    },
                },
            },
        },
    },
};
const Paths1O6IvdaV3MappingDataSourcesIdentifierValuesGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "Paths1O6IvdaV3MappingDataSourcesIdentifierValuesGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } },
                        },
                    },
                },
            },
        },
    },
};
const MappingCreate = {
    type: {
        name: "Composite",
        className: "MappingCreate",
        modelProperties: {
            dataSource: {
                serializedName: "dataSource",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            scoreCutoff: {
                serializedName: "scoreCutoff",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            organization: {
                serializedName: "organization",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            orderBy: {
                serializedName: "orderBy",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Mapping = {
    type: {
        name: "Composite",
        className: "Mapping",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            dataSource: {
                serializedName: "dataSource",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            scoreCutoff: {
                serializedName: "scoreCutoff",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            orderBy: {
                serializedName: "orderBy",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PathsWvcyp9V3MappingsGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "PathsWvcyp9V3MappingsGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Mapping",
                        },
                    },
                },
            },
        },
    },
};
const MappingUpdate = {
    type: {
        name: "Composite",
        className: "MappingUpdate",
        modelProperties: {
            scoreCutoff: {
                serializedName: "scoreCutoff",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            orderBy: {
                serializedName: "orderBy",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const TagCreate = {
    type: {
        name: "Composite",
        className: "TagCreate",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const TagUpdate = {
    type: {
        name: "Composite",
        className: "TagUpdate",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ValidationToolConfig = {
    type: {
        name: "Composite",
        className: "ValidationToolConfig",
        modelProperties: {
            theme: {
                serializedName: "theme",
                type: {
                    name: "Composite",
                    className: "ThemeConfig",
                },
            },
            hideActions: {
                serializedName: "hideActions",
                type: {
                    name: "Boolean",
                },
            },
            hideCollection: {
                serializedName: "hideCollection",
                type: {
                    name: "Boolean",
                },
            },
            hideEditPages: {
                serializedName: "hideEditPages",
                type: {
                    name: "Boolean",
                },
            },
            hideExport: {
                serializedName: "hideExport",
                type: {
                    name: "Boolean",
                },
            },
            hideFilename: {
                serializedName: "hideFilename",
                type: {
                    name: "Boolean",
                },
            },
            hideReject: {
                serializedName: "hideReject",
                type: {
                    name: "Boolean",
                },
            },
            hideReparse: {
                serializedName: "hideReparse",
                type: {
                    name: "Boolean",
                },
            },
            hideRunOcr: {
                serializedName: "hideRunOcr",
                type: {
                    name: "Boolean",
                },
            },
            hideTags: {
                serializedName: "hideTags",
                type: {
                    name: "Boolean",
                },
            },
            hideWarnings: {
                serializedName: "hideWarnings",
                type: {
                    name: "Boolean",
                },
            },
            restrictDocumentSplitting: {
                serializedName: "restrictDocumentSplitting",
                type: {
                    name: "Boolean",
                },
            },
            disableCurrencyFormatting: {
                serializedName: "disableCurrencyFormatting",
                type: {
                    name: "Boolean",
                },
            },
            disableEditDocumentMetadata: {
                serializedName: "disableEditDocumentMetadata",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const Paths93Fa0ZV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "Paths93Fa0ZV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OrganizationMembership",
                        },
                    },
                },
            },
        },
    },
};
const OrganizationMembership = {
    type: {
        name: "Composite",
        className: "OrganizationMembership",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String",
                },
            },
            user: {
                serializedName: "user",
                type: {
                    name: "Composite",
                    className: "User",
                },
            },
            role: {
                serializedName: "role",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const OrganizationMembershipUpdate = {
    type: {
        name: "Composite",
        className: "OrganizationMembershipUpdate",
        modelProperties: {
            role: {
                serializedName: "role",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PathsKhpbbuV3InvitationsGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "PathsKhpbbuV3InvitationsGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Invitation",
                        },
                    },
                },
            },
        },
    },
};
const Invitation = {
    type: {
        name: "Composite",
        className: "Invitation",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "Composite",
                    className: "Organization",
                },
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String",
                },
            },
            role: {
                serializedName: "role",
                type: {
                    name: "String",
                },
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
            expiryDate: {
                serializedName: "expiryDate",
                type: {
                    name: "Date",
                },
            },
            invitedBy: {
                serializedName: "invitedBy",
                type: {
                    name: "Composite",
                    className: "User",
                },
            },
            respondedBy: {
                serializedName: "respondedBy",
                type: {
                    name: "Composite",
                    className: "InvitationRespondedBy",
                },
            },
            createdDt: {
                serializedName: "createdDt",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const InvitationCreate = {
    type: {
        name: "Composite",
        className: "InvitationCreate",
        modelProperties: {
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String",
                },
            },
            email: {
                serializedName: "email",
                required: true,
                type: {
                    name: "String",
                },
            },
            role: {
                serializedName: "role",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InvitationUpdate = {
    type: {
        name: "Composite",
        className: "InvitationUpdate",
        modelProperties: {
            role: {
                serializedName: "role",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InvitationResponse = {
    type: {
        name: "Composite",
        className: "InvitationResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Paths11PzrpaV3ApiUsersGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "Paths11PzrpaV3ApiUsersGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApiUserWithoutKey",
                        },
                    },
                },
            },
        },
    },
};
const ApiUserWithoutKey = {
    type: {
        name: "Composite",
        className: "ApiUserWithoutKey",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            username: {
                serializedName: "username",
                required: true,
                type: {
                    name: "String",
                },
            },
            email: {
                serializedName: "email",
                required: true,
                type: {
                    name: "String",
                },
            },
            avatar: {
                serializedName: "avatar",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            organizations: {
                serializedName: "organizations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApiUserWithoutKeyOrganizationsItem",
                        },
                    },
                },
            },
            apiKeyLastChars: {
                serializedName: "apiKeyLastChars",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ApiUserWithoutKeyOrganizationsItem = {
    type: {
        name: "Composite",
        className: "ApiUserWithoutKeyOrganizationsItem",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ApiUserCreate = {
    type: {
        name: "Composite",
        className: "ApiUserCreate",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String",
                },
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String",
                },
            },
            avatar: {
                serializedName: "avatar",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ApiUserWithKey = {
    type: {
        name: "Composite",
        className: "ApiUserWithKey",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            username: {
                serializedName: "username",
                required: true,
                type: {
                    name: "String",
                },
            },
            email: {
                serializedName: "email",
                required: true,
                type: {
                    name: "String",
                },
            },
            avatar: {
                serializedName: "avatar",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            organizations: {
                serializedName: "organizations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApiUserWithKeyOrganizationsItem",
                        },
                    },
                },
            },
            apiKey: {
                serializedName: "apiKey",
                required: true,
                type: {
                    name: "String",
                },
            },
            apiKeyLastChars: {
                serializedName: "apiKeyLastChars",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ApiUserWithKeyOrganizationsItem = {
    type: {
        name: "Composite",
        className: "ApiUserWithKeyOrganizationsItem",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ApiUserUpdate = {
    type: {
        name: "Composite",
        className: "ApiUserUpdate",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String",
                },
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String",
                },
            },
            avatar: {
                serializedName: "avatar",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Paths1Qojy9V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "Paths1Qojy9V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResthookSubscription",
                        },
                    },
                },
            },
        },
    },
};
const ResthookSubscription = {
    type: {
        name: "Composite",
        className: "ResthookSubscription",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            event: {
                serializedName: "event",
                required: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "Composite",
                    className: "Organization",
                },
            },
            workspace: {
                serializedName: "workspace",
                type: {
                    name: "Composite",
                    className: "ResthookSubscriptionWorkspace",
                },
            },
            targetUrl: {
                serializedName: "targetUrl",
                required: true,
                type: {
                    name: "String",
                },
            },
            active: {
                serializedName: "active",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            autoDeactivated: {
                serializedName: "autoDeactivated",
                required: true,
                type: {
                    name: "Boolean",
                },
            },
            autoDeactivateReason: {
                serializedName: "autoDeactivateReason",
                required: true,
                type: {
                    name: "String",
                },
            },
            version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResthookSubscriptionWorkspace = {
    type: {
        name: "Composite",
        className: "ResthookSubscriptionWorkspace",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "Composite",
                    className: "Organization",
                },
            },
        },
    },
};
const ResthookSubscriptionCreate = {
    type: {
        name: "Composite",
        className: "ResthookSubscriptionCreate",
        modelProperties: {
            targetUrl: {
                serializedName: "targetUrl",
                required: true,
                type: {
                    name: "String",
                },
            },
            event: {
                serializedName: "event",
                required: true,
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                type: {
                    name: "String",
                },
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResthookSubscriptionUpdate = {
    type: {
        name: "Composite",
        className: "ResthookSubscriptionUpdate",
        modelProperties: {
            event: {
                serializedName: "event",
                type: {
                    name: "String",
                },
            },
            organization: {
                serializedName: "organization",
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                type: {
                    name: "String",
                },
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const OccupationGroup = {
    type: {
        name: "Composite",
        className: "OccupationGroup",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "Number",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            children: {
                serializedName: "children",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OccupationGroup",
                        },
                    },
                },
            },
        },
    },
};
const ResumeSearchParameters = {
    type: {
        name: "Composite",
        className: "ResumeSearchParameters",
        modelProperties: {
            indices: {
                serializedName: "indices",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            jobDescription: {
                serializedName: "jobDescription",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            resume: {
                serializedName: "resume",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            jobTitles: {
                serializedName: "jobTitles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            jobTitlesCurrentOnly: {
                serializedName: "jobTitlesCurrentOnly",
                type: {
                    name: "Boolean",
                },
            },
            jobTitlesRequired: {
                serializedName: "jobTitlesRequired",
                type: {
                    name: "Boolean",
                },
            },
            jobTitlesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "jobTitlesWeight",
                type: {
                    name: "Number",
                },
            },
            yearsExperienceMin: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "yearsExperienceMin",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            yearsExperienceMax: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "yearsExperienceMax",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            yearsExperienceRequired: {
                serializedName: "yearsExperienceRequired",
                type: {
                    name: "Boolean",
                },
            },
            yearsExperienceWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "yearsExperienceWeight",
                type: {
                    name: "Number",
                },
            },
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersLocation",
                        },
                    },
                },
            },
            locationsWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "locationsWeight",
                type: {
                    name: "Number",
                },
            },
            locationsRequired: {
                serializedName: "locationsRequired",
                type: {
                    name: "Boolean",
                },
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill",
                        },
                    },
                },
            },
            skillsWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "skillsWeight",
                type: {
                    name: "Number",
                },
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill",
                        },
                    },
                },
            },
            languagesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "languagesWeight",
                type: {
                    name: "Number",
                },
            },
            institutions: {
                serializedName: "institutions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            institutionsRequired: {
                serializedName: "institutionsRequired",
                type: {
                    name: "Boolean",
                },
            },
            degrees: {
                serializedName: "degrees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            degreesRequired: {
                serializedName: "degreesRequired",
                type: {
                    name: "Boolean",
                },
            },
            highestDegreeTypes: {
                constraints: {
                    UniqueItems: true,
                },
                serializedName: "highestDegreeTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "school",
                                "certificate",
                                "bachelors",
                                "masters",
                                "doctoral",
                            ],
                        },
                    },
                },
            },
            highestDegreeTypesRequired: {
                serializedName: "highestDegreeTypesRequired",
                type: {
                    name: "Boolean",
                },
            },
            isCurrentStudent: {
                serializedName: "isCurrentStudent",
                type: {
                    name: "Boolean",
                },
            },
            isCurrentStudentRequired: {
                serializedName: "isCurrentStudentRequired",
                type: {
                    name: "Boolean",
                },
            },
            isRecentGraduate: {
                serializedName: "isRecentGraduate",
                type: {
                    name: "Boolean",
                },
            },
            isRecentGraduateRequired: {
                serializedName: "isRecentGraduateRequired",
                type: {
                    name: "Boolean",
                },
            },
            educationWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "educationWeight",
                type: {
                    name: "Number",
                },
            },
            searchExpression: {
                serializedName: "searchExpression",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            searchExpressionRequired: {
                serializedName: "searchExpressionRequired",
                type: {
                    name: "Boolean",
                },
            },
            searchExpressionWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "searchExpressionWeight",
                type: {
                    name: "Number",
                },
            },
            socCodes: {
                serializedName: "socCodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            socCodesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "socCodesWeight",
                type: {
                    name: "Number",
                },
            },
            socCodesRequired: {
                serializedName: "socCodesRequired",
                type: {
                    name: "Boolean",
                },
            },
            managementLevel: {
                serializedName: "managementLevel",
                nullable: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Low", "Mid", "Upper"],
                },
            },
            managementLevelRequired: {
                serializedName: "managementLevelRequired",
                type: {
                    name: "Boolean",
                },
            },
            managementLevelWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "managementLevelWeight",
                type: {
                    name: "Number",
                },
            },
            customData: {
                serializedName: "customData",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersCustomData",
                        },
                    },
                },
            },
        },
    },
};
const ResumeSearchParametersLocation = {
    type: {
        name: "Composite",
        className: "ResumeSearchParametersLocation",
        modelProperties: {
            name: {
                defaultValue: "",
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            coordinates: {
                serializedName: "coordinates",
                type: {
                    name: "Composite",
                    className: "ResumeSearchParametersLocationCoordinates",
                },
            },
            distance: {
                defaultValue: 100,
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "distance",
                type: {
                    name: "Number",
                },
            },
            unit: {
                defaultValue: "km",
                serializedName: "unit",
                type: {
                    name: "Enum",
                    allowedValues: ["km", "mi"],
                },
            },
        },
    },
};
const ResumeSearchParametersLocationCoordinates = {
    type: {
        name: "Composite",
        className: "ResumeSearchParametersLocationCoordinates",
        modelProperties: {
            latitude: {
                serializedName: "latitude",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            longitude: {
                serializedName: "longitude",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ResumeSearchParametersSkill = {
    type: {
        name: "Composite",
        className: "ResumeSearchParametersSkill",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            required: {
                serializedName: "required",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const SearchParametersCustomData = {
    type: {
        name: "Composite",
        className: "SearchParametersCustomData",
        modelProperties: {
            filterType: {
                serializedName: "filterType",
                required: true,
                type: {
                    name: "String",
                },
            },
            dataPoint: {
                serializedName: "dataPoint",
                required: true,
                type: {
                    name: "String",
                },
            },
            query: {
                serializedName: "query",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
            required: {
                serializedName: "required",
                type: {
                    name: "Boolean",
                },
            },
            weight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "weight",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ResumeSearch = {
    type: {
        name: "Composite",
        className: "ResumeSearch",
        modelProperties: {
            count: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "count",
                type: {
                    name: "Number",
                },
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "ResumeSearchParameters",
                },
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchResult",
                        },
                    },
                },
            },
        },
    },
};
const ResumeSearchResult = {
    type: {
        name: "Composite",
        className: "ResumeSearchResult",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                required: true,
                type: {
                    name: "Number",
                },
            },
            pdf: {
                serializedName: "pdf",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobTitleSearchScoreComponent",
                },
            },
            managementLevel: {
                serializedName: "managementLevel",
                type: {
                    name: "Composite",
                    className: "ManagementLevelSearchScoreComponent",
                },
            },
            experience: {
                serializedName: "experience",
                type: {
                    name: "Composite",
                    className: "ExperienceSearchScoreComponent",
                },
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Composite",
                    className: "SkillsSearchScoreComponent",
                },
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Composite",
                    className: "LanguagesSearchScoreComponent",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "LocationSearchScoreComponent",
                },
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Composite",
                    className: "EducationSearchScoreComponent",
                },
            },
            occupationGroup: {
                serializedName: "occupationGroup",
                type: {
                    name: "Composite",
                    className: "OccupationGroupSearchScoreComponent",
                },
            },
            searchExpression: {
                serializedName: "searchExpression",
                type: {
                    name: "Composite",
                    className: "SearchExpressionSearchScoreComponent",
                },
            },
            customData: {
                serializedName: "customData",
                required: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties",
                        },
                    },
                },
            },
        },
    },
};
const JobTitleSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "JobTitleSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ManagementLevelSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "ManagementLevelSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ExperienceSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "ExperienceSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const SkillsSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "SkillsSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const LanguagesSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "LanguagesSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const LocationSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "LocationSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const EducationSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "EducationSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const OccupationGroupSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "OccupationGroupSearchScoreComponent",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const SearchExpressionSearchScoreComponent = {
    type: {
        name: "Composite",
        className: "SearchExpressionSearchScoreComponent",
        modelProperties: {
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties = {
    type: {
        name: "Composite",
        className: "ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ResumeSearchDetail = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetail",
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailJobTitle",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailLocation",
                },
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailEducation",
                },
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailSkills",
                },
            },
            experience: {
                serializedName: "experience",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailExperience",
                },
            },
            occupationGroup: {
                serializedName: "occupationGroup",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailOccupationGroup",
                },
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailLanguages",
                },
            },
            managementLevel: {
                serializedName: "managementLevel",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailManagementLevel",
                },
            },
            searchExpression: {
                serializedName: "searchExpression",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailSearchExpression",
                },
            },
        },
    },
};
const ResumeSearchDetailJobTitle = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailJobTitle",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchDetailJobTitleValueItem",
                        },
                    },
                },
            },
        },
    },
};
const ResumeSearchDetailJobTitleValueItem = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailJobTitleValueItem",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            startDate: {
                serializedName: "startDate",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            endDate: {
                serializedName: "endDate",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            companyName: {
                serializedName: "companyName",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const ResumeSearchDetailLocation = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailLocation",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersLocation",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailLocationValue",
                },
            },
        },
    },
};
const ComponentsN9ShogSchemasResumesearchdetailPropertiesLocationPropertiesValueAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsN9ShogSchemasResumesearchdetailPropertiesLocationPropertiesValueAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const ResumeSearchDetailEducation = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailEducation",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Composite",
                    className: "ResumeSearchDetailEducationMissing",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchDetailEducationValueItem",
                        },
                    },
                },
            },
        },
    },
};
const ResumeSearchDetailEducationMissing = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailEducationMissing",
        modelProperties: {
            degrees: {
                serializedName: "degrees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            highestDegreeTypes: {
                serializedName: "highestDegreeTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            institutions: {
                serializedName: "institutions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            currentStudent: {
                serializedName: "currentStudent",
                type: {
                    name: "Boolean",
                },
            },
            recentGraduate: {
                serializedName: "recentGraduate",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const ResumeSearchDetailSkills = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailSkills",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchDetailSkillsValueItem",
                        },
                    },
                },
            },
        },
    },
};
const ResumeSkill = {
    type: {
        name: "Composite",
        className: "ResumeSkill",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            lastUsed: {
                serializedName: "lastUsed",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            numberOfMonths: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "numberOfMonths",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            type: {
                serializedName: "type",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            sources: {
                serializedName: "sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSkillSourcesItem",
                        },
                    },
                },
            },
        },
    },
};
const ResumeSkillSourcesItem = {
    type: {
        name: "Composite",
        className: "ResumeSkillSourcesItem",
        modelProperties: {
            section: {
                serializedName: "section",
                type: {
                    name: "String",
                },
            },
            position: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "position",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1 = {
    type: {
        name: "Composite",
        className: "ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const ResumeSearchDetailExperience = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailExperience",
        modelProperties: {
            years: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "years",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const ResumeSearchDetailOccupationGroup = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailOccupationGroup",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OccupationGroupSearchResult",
                        },
                    },
                },
            },
        },
    },
};
const OccupationGroupSearchResult = {
    type: {
        name: "Composite",
        className: "OccupationGroupSearchResult",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "Number",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            children: {
                serializedName: "children",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OccupationGroup",
                        },
                    },
                },
            },
            parents: {
                serializedName: "parents",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OccupationGroup",
                        },
                    },
                },
            },
        },
    },
};
const ResumeSearchDetailLanguages = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailLanguages",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchDetailLanguagesValueItem",
                        },
                    },
                },
            },
        },
    },
};
const Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1 = {
    type: {
        name: "Composite",
        className: "Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const ResumeSearchDetailManagementLevel = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailManagementLevel",
        modelProperties: {
            level: {
                serializedName: "level",
                nullable: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Low", "Mid", "Upper"],
                },
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const ResumeSearchDetailSearchExpression = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailSearchExpression",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const ResumeSearchConfig = {
    type: {
        name: "Composite",
        className: "ResumeSearchConfig",
        modelProperties: {
            allowPdfDownload: {
                serializedName: "allowPdfDownload",
                type: {
                    name: "Boolean",
                },
            },
            maxResults: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "maxResults",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            displayJobTitle: {
                serializedName: "displayJobTitle",
                type: {
                    name: "Boolean",
                },
            },
            displayLocation: {
                serializedName: "displayLocation",
                type: {
                    name: "Boolean",
                },
            },
            displayYearsExperience: {
                serializedName: "displayYearsExperience",
                type: {
                    name: "Boolean",
                },
            },
            displayOccupationGroup: {
                serializedName: "displayOccupationGroup",
                type: {
                    name: "Boolean",
                },
            },
            displayEducation: {
                serializedName: "displayEducation",
                type: {
                    name: "Boolean",
                },
            },
            displaySkills: {
                serializedName: "displaySkills",
                type: {
                    name: "Boolean",
                },
            },
            displayLanguages: {
                serializedName: "displayLanguages",
                type: {
                    name: "Boolean",
                },
            },
            displayManagementLevel: {
                serializedName: "displayManagementLevel",
                type: {
                    name: "Boolean",
                },
            },
            displayKeywords: {
                serializedName: "displayKeywords",
                type: {
                    name: "Boolean",
                },
            },
            weightJobTitle: {
                serializedName: "weightJobTitle",
                type: {
                    name: "Number",
                },
            },
            weightLocation: {
                serializedName: "weightLocation",
                type: {
                    name: "Number",
                },
            },
            weightYearsExperience: {
                serializedName: "weightYearsExperience",
                type: {
                    name: "Number",
                },
            },
            weightOccupationGroup: {
                serializedName: "weightOccupationGroup",
                type: {
                    name: "Number",
                },
            },
            weightEducation: {
                serializedName: "weightEducation",
                type: {
                    name: "Number",
                },
            },
            weightSkills: {
                serializedName: "weightSkills",
                type: {
                    name: "Number",
                },
            },
            weightLanguages: {
                serializedName: "weightLanguages",
                type: {
                    name: "Number",
                },
            },
            weightManagementLevel: {
                serializedName: "weightManagementLevel",
                type: {
                    name: "Number",
                },
            },
            weightKeywords: {
                serializedName: "weightKeywords",
                type: {
                    name: "Number",
                },
            },
            indices: {
                serializedName: "indices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            showIndexDropdown: {
                serializedName: "showIndexDropdown",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            searchToolTheme: {
                serializedName: "searchToolTheme",
                type: {
                    name: "Composite",
                    className: "ResumeSearchConfigSearchToolTheme",
                },
            },
            userId: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "userId",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            username: {
                serializedName: "username",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            actions: {
                serializedName: "actions",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SearchConfigAction",
                        },
                    },
                },
            },
            hideToolbar: {
                serializedName: "hideToolbar",
                type: {
                    name: "Boolean",
                },
            },
            hideSidePanel: {
                serializedName: "hideSidePanel",
                type: {
                    name: "Boolean",
                },
            },
            customFieldsConfig: {
                serializedName: "customFieldsConfig",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomFieldConfig",
                        },
                    },
                },
            },
            distanceUnit: {
                serializedName: "distanceUnit",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const SearchConfigAction = {
    type: {
        name: "Composite",
        className: "SearchConfigAction",
        modelProperties: {
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String",
                },
            },
            eventName: {
                serializedName: "eventName",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const CustomFieldConfig = {
    type: {
        name: "Composite",
        className: "CustomFieldConfig",
        modelProperties: {
            dataPoint: {
                serializedName: "dataPoint",
                required: true,
                type: {
                    name: "String",
                },
            },
            weight: {
                defaultValue: 0.5,
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "weight",
                required: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema",
        modelProperties: {
            configOverride: {
                serializedName: "configOverride",
                type: {
                    name: "Composite",
                    className: "ResumeSearchConfig",
                },
            },
        },
    },
};
const ResumeSearchEmbed = {
    type: {
        name: "Composite",
        className: "ResumeSearchEmbed",
        modelProperties: {
            url: {
                serializedName: "url",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResumeSearchMatch = {
    type: {
        name: "Composite",
        className: "ResumeSearchMatch",
        modelProperties: {
            score: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "score",
                type: {
                    name: "Number",
                },
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Composite",
                    className: "ResumeSearchMatchDetails",
                },
            },
        },
    },
};
const ResumeSearchMatchDetails = {
    type: {
        name: "Composite",
        className: "ResumeSearchMatchDetails",
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobTitleSearchScoreComponent",
                },
            },
            managementLevel: {
                serializedName: "managementLevel",
                type: {
                    name: "Composite",
                    className: "ManagementLevelSearchScoreComponent",
                },
            },
            experience: {
                serializedName: "experience",
                type: {
                    name: "Composite",
                    className: "ExperienceSearchScoreComponent",
                },
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Composite",
                    className: "SkillsSearchScoreComponent",
                },
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Composite",
                    className: "LanguagesSearchScoreComponent",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "LocationSearchScoreComponent",
                },
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Composite",
                    className: "EducationSearchScoreComponent",
                },
            },
            occupationGroup: {
                serializedName: "occupationGroup",
                type: {
                    name: "Composite",
                    className: "OccupationGroupSearchScoreComponent",
                },
            },
            searchExpression: {
                serializedName: "searchExpression",
                type: {
                    name: "Composite",
                    className: "SearchExpressionSearchScoreComponent",
                },
            },
        },
    },
};
const JobDescriptionSearchParameters = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchParameters",
        modelProperties: {
            indices: {
                serializedName: "indices",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            resume: {
                serializedName: "resume",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            jobTitles: {
                serializedName: "jobTitles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            jobTitlesRequired: {
                serializedName: "jobTitlesRequired",
                type: {
                    name: "Boolean",
                },
            },
            jobTitlesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "jobTitlesWeight",
                type: {
                    name: "Number",
                },
            },
            totalYearsExperience: {
                serializedName: "totalYearsExperience",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            yearsExperienceRequired: {
                serializedName: "yearsExperienceRequired",
                type: {
                    name: "Boolean",
                },
            },
            yearsExperienceWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "yearsExperienceWeight",
                type: {
                    name: "Number",
                },
            },
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersLocation",
                        },
                    },
                },
            },
            locationsWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "locationsWeight",
                type: {
                    name: "Number",
                },
            },
            locationsRequired: {
                serializedName: "locationsRequired",
                type: {
                    name: "Boolean",
                },
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill",
                        },
                    },
                },
            },
            skillsWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "skillsWeight",
                type: {
                    name: "Number",
                },
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill",
                        },
                    },
                },
            },
            languagesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "languagesWeight",
                type: {
                    name: "Number",
                },
            },
            degrees: {
                serializedName: "degrees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            degreesRequired: {
                serializedName: "degreesRequired",
                type: {
                    name: "Boolean",
                },
            },
            degreeTypes: {
                constraints: {
                    UniqueItems: true,
                },
                serializedName: "degreeTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "school",
                                "certificate",
                                "bachelors",
                                "masters",
                                "doctoral",
                            ],
                        },
                    },
                },
            },
            degreeTypesRequired: {
                serializedName: "degreeTypesRequired",
                type: {
                    name: "Boolean",
                },
            },
            educationWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "educationWeight",
                type: {
                    name: "Number",
                },
            },
            searchExpression: {
                serializedName: "searchExpression",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            searchExpressionRequired: {
                serializedName: "searchExpressionRequired",
                type: {
                    name: "Boolean",
                },
            },
            searchExpressionWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "searchExpressionWeight",
                type: {
                    name: "Number",
                },
            },
            socCodes: {
                serializedName: "socCodes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            socCodesWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "socCodesWeight",
                type: {
                    name: "Number",
                },
            },
            socCodesRequired: {
                serializedName: "socCodesRequired",
                type: {
                    name: "Boolean",
                },
            },
            managementLevel: {
                serializedName: "managementLevel",
                nullable: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Low", "Mid", "Upper"],
                },
            },
            managementLevelRequired: {
                serializedName: "managementLevelRequired",
                type: {
                    name: "Boolean",
                },
            },
            managementLevelWeight: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 0,
                },
                serializedName: "managementLevelWeight",
                type: {
                    name: "Number",
                },
            },
            customData: {
                serializedName: "customData",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SearchParametersCustomData",
                        },
                    },
                },
            },
        },
    },
};
const JobDescriptionSearch = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearch",
        modelProperties: {
            count: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "count",
                type: {
                    name: "Number",
                },
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchParameters",
                },
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobDescriptionSearchResult",
                        },
                    },
                },
            },
        },
    },
};
const JobDescriptionSearchResult = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchResult",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String",
                },
            },
            score: {
                serializedName: "score",
                required: true,
                type: {
                    name: "Number",
                },
            },
            pdf: {
                serializedName: "pdf",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobTitleSearchScoreComponent",
                },
            },
            managementLevel: {
                serializedName: "managementLevel",
                type: {
                    name: "Composite",
                    className: "ManagementLevelSearchScoreComponent",
                },
            },
            experience: {
                serializedName: "experience",
                type: {
                    name: "Composite",
                    className: "ExperienceSearchScoreComponent",
                },
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Composite",
                    className: "SkillsSearchScoreComponent",
                },
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Composite",
                    className: "LanguagesSearchScoreComponent",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "LocationSearchScoreComponent",
                },
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Composite",
                    className: "EducationSearchScoreComponent",
                },
            },
            occupationGroup: {
                serializedName: "occupationGroup",
                type: {
                    name: "Composite",
                    className: "OccupationGroupSearchScoreComponent",
                },
            },
            searchExpression: {
                serializedName: "searchExpression",
                type: {
                    name: "Composite",
                    className: "SearchExpressionSearchScoreComponent",
                },
            },
            organizationName: {
                serializedName: "organizationName",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
            customData: {
                serializedName: "customData",
                required: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties",
                        },
                    },
                },
            },
        },
    },
};
const JobDescriptionSearchDetail = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetail",
        modelProperties: {
            jobTitle: {
                serializedName: "jobTitle",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailJobTitle",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailLocation",
                },
            },
            education: {
                serializedName: "education",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailEducation",
                },
            },
            skills: {
                serializedName: "skills",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailSkills",
                },
            },
            experience: {
                serializedName: "experience",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailExperience",
                },
            },
            occupationGroup: {
                serializedName: "occupationGroup",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailOccupationGroup",
                },
            },
            languages: {
                serializedName: "languages",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailLanguages",
                },
            },
            managementLevel: {
                serializedName: "managementLevel",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailManagementLevel",
                },
            },
            searchExpression: {
                serializedName: "searchExpression",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailSearchExpression",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailJobTitle = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailJobTitle",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailJobTitleValue",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailJobTitleValue = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailJobTitleValue",
        modelProperties: {
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            companyName: {
                serializedName: "companyName",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailLocation = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailLocation",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersLocation",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailLocationValue",
                },
            },
        },
    },
};
const Components1TlnsonSchemasJobdescriptionsearchdetailPropertiesLocationPropertiesValueAllof1 = {
    type: {
        name: "Composite",
        className: "Components1TlnsonSchemasJobdescriptionsearchdetailPropertiesLocationPropertiesValueAllof1",
        modelProperties: {
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailEducation = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailEducation",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailEducationMissing",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailEducationValue",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailEducationMissing = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailEducationMissing",
        modelProperties: {
            degrees: {
                serializedName: "degrees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            degreeTypes: {
                serializedName: "degreeTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const JobDescriptionSearchDetailEducationValue = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailEducationValue",
        modelProperties: {
            degrees: {
                serializedName: "degrees",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            degreeTypes: {
                serializedName: "degreeTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailSkills = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailSkills",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobDescriptionSearchDetailSkillsValueItem",
                        },
                    },
                },
            },
        },
    },
};
const JobDescriptionSearchDetailSkillsValueItem = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailSkillsValueItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailExperience = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailExperience",
        modelProperties: {
            minimumExperience: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "minimumExperience",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            maximumExperience: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "maximumExperience",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailOccupationGroup = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailOccupationGroup",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchDetailOccupationGroupValue",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailLanguages = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailLanguages",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResumeSearchParametersSkill",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobDescriptionSearchDetailLanguagesValueItem",
                        },
                    },
                },
            },
        },
    },
};
const JobDescriptionSearchDetailLanguagesValueItem = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailLanguagesValueItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailManagementLevel = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailManagementLevel",
        modelProperties: {
            level: {
                serializedName: "level",
                nullable: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "Low", "Mid", "Upper"],
                },
            },
            match: {
                serializedName: "match",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
const JobDescriptionSearchDetailSearchExpression = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailSearchExpression",
        modelProperties: {
            missing: {
                serializedName: "missing",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const JobDescriptionSearchConfig = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchConfig",
        modelProperties: {
            allowPdfDownload: {
                serializedName: "allowPdfDownload",
                type: {
                    name: "Boolean",
                },
            },
            maxResults: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "maxResults",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            displayJobTitle: {
                serializedName: "displayJobTitle",
                type: {
                    name: "Boolean",
                },
            },
            displayLocation: {
                serializedName: "displayLocation",
                type: {
                    name: "Boolean",
                },
            },
            displayYearsExperience: {
                serializedName: "displayYearsExperience",
                type: {
                    name: "Boolean",
                },
            },
            displayOccupationGroup: {
                serializedName: "displayOccupationGroup",
                type: {
                    name: "Boolean",
                },
            },
            displayEducation: {
                serializedName: "displayEducation",
                type: {
                    name: "Boolean",
                },
            },
            displaySkills: {
                serializedName: "displaySkills",
                type: {
                    name: "Boolean",
                },
            },
            displayLanguages: {
                serializedName: "displayLanguages",
                type: {
                    name: "Boolean",
                },
            },
            displayManagementLevel: {
                serializedName: "displayManagementLevel",
                type: {
                    name: "Boolean",
                },
            },
            displayKeywords: {
                serializedName: "displayKeywords",
                type: {
                    name: "Boolean",
                },
            },
            weightJobTitle: {
                serializedName: "weightJobTitle",
                type: {
                    name: "Number",
                },
            },
            weightLocation: {
                serializedName: "weightLocation",
                type: {
                    name: "Number",
                },
            },
            weightYearsExperience: {
                serializedName: "weightYearsExperience",
                type: {
                    name: "Number",
                },
            },
            weightOccupationGroup: {
                serializedName: "weightOccupationGroup",
                type: {
                    name: "Number",
                },
            },
            weightEducation: {
                serializedName: "weightEducation",
                type: {
                    name: "Number",
                },
            },
            weightSkills: {
                serializedName: "weightSkills",
                type: {
                    name: "Number",
                },
            },
            weightLanguages: {
                serializedName: "weightLanguages",
                type: {
                    name: "Number",
                },
            },
            weightManagementLevel: {
                serializedName: "weightManagementLevel",
                type: {
                    name: "Number",
                },
            },
            weightKeywords: {
                serializedName: "weightKeywords",
                type: {
                    name: "Number",
                },
            },
            indices: {
                serializedName: "indices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            showIndexDropdown: {
                serializedName: "showIndexDropdown",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            searchToolTheme: {
                serializedName: "searchToolTheme",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchConfigSearchToolTheme",
                },
            },
            userId: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "userId",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            username: {
                serializedName: "username",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            actions: {
                serializedName: "actions",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SearchConfigAction",
                        },
                    },
                },
            },
            hideToolbar: {
                serializedName: "hideToolbar",
                type: {
                    name: "Boolean",
                },
            },
            hideSidePanel: {
                serializedName: "hideSidePanel",
                type: {
                    name: "Boolean",
                },
            },
            customFieldsConfig: {
                serializedName: "customFieldsConfig",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomFieldConfig",
                        },
                    },
                },
            },
            distanceUnit: {
                serializedName: "distanceUnit",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema",
        modelProperties: {
            configOverride: {
                serializedName: "configOverride",
                type: {
                    name: "Composite",
                    className: "JobDescriptionSearchConfig",
                },
            },
        },
    },
};
const JobDescriptionSearchEmbed = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchEmbed",
        modelProperties: {
            url: {
                serializedName: "url",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Paths4T5Cm5V3IndexGetResponses200ContentApplicationJsonSchemaAllof1 = {
    type: {
        name: "Composite",
        className: "Paths4T5Cm5V3IndexGetResponses200ContentApplicationJsonSchemaAllof1",
        modelProperties: {
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Index",
                        },
                    },
                },
            },
        },
    },
};
const Index = {
    type: {
        name: "Composite",
        className: "Index",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            documentType: {
                serializedName: "documentType",
                required: true,
                type: {
                    name: "String",
                },
            },
            user: {
                serializedName: "user",
                type: {
                    name: "Composite",
                    className: "IndexUser",
                },
            },
        },
    },
};
const IndexUser = {
    type: {
        name: "Composite",
        className: "IndexUser",
        modelProperties: {
            id: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            email: {
                serializedName: "email",
                required: true,
                type: {
                    name: "String",
                },
            },
            avatar: {
                serializedName: "avatar",
                required: true,
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const IndexCreate = {
    type: {
        name: "Composite",
        className: "IndexCreate",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            documentType: {
                serializedName: "documentType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const IndexUpdate = {
    type: {
        name: "Composite",
        className: "IndexUpdate",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema",
        modelProperties: {
            count: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "count",
                type: {
                    name: "Number",
                },
            },
            next: {
                serializedName: "next",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            previous: {
                serializedName: "previous",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            results: {
                serializedName: "results",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Get200ApplicationJsonPropertiesItemsItem",
                        },
                    },
                },
            },
        },
    },
};
const Get200ApplicationJsonPropertiesItemsItem = {
    type: {
        name: "Composite",
        className: "Get200ApplicationJsonPropertiesItemsItem",
        modelProperties: {
            document: {
                serializedName: "document",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema",
        modelProperties: {
            document: {
                serializedName: "document",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema",
        modelProperties: {
            document: {
                serializedName: "document",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InvoiceData = {
    type: {
        name: "Composite",
        className: "InvoiceData",
        modelProperties: {
            tables: {
                serializedName: "tables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TableAnnotation",
                        },
                    },
                },
            },
            tablesBeta: {
                serializedName: "tablesBeta",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TableBetaAnnotation",
                        },
                    },
                },
            },
            invoiceDate: {
                serializedName: "invoiceDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotation",
                },
            },
            invoiceOrderDate: {
                serializedName: "invoiceOrderDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotation",
                },
            },
            paymentDateDue: {
                serializedName: "paymentDateDue",
                type: {
                    name: "Composite",
                    className: "DateAnnotation",
                },
            },
            paymentAmountBase: {
                serializedName: "paymentAmountBase",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            paymentAmountTax: {
                serializedName: "paymentAmountTax",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            paymentAmountTotal: {
                serializedName: "paymentAmountTotal",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            paymentAmountPaid: {
                serializedName: "paymentAmountPaid",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            paymentAmountDue: {
                serializedName: "paymentAmountDue",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            invoiceNumber: {
                serializedName: "invoiceNumber",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            invoicePurchaseOrderNumber: {
                serializedName: "invoicePurchaseOrderNumber",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            supplierBusinessNumber: {
                serializedName: "supplierBusinessNumber",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            customerNumber: {
                serializedName: "customerNumber",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            customerBusinessNumber: {
                serializedName: "customerBusinessNumber",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            paymentReference: {
                serializedName: "paymentReference",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            bankAccountNumber: {
                serializedName: "bankAccountNumber",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            supplierVat: {
                serializedName: "supplierVat",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            customerVat: {
                serializedName: "customerVat",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            bpayBillerCode: {
                serializedName: "bpayBillerCode",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            bpayReference: {
                serializedName: "bpayReference",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            bankSortCode: {
                serializedName: "bankSortCode",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            bankIban: {
                serializedName: "bankIban",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            bankSwift: {
                serializedName: "bankSwift",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            bankBsb: {
                serializedName: "bankBsb",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            customerContactName: {
                serializedName: "customerContactName",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            customerCompanyName: {
                serializedName: "customerCompanyName",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            supplierCompanyName: {
                serializedName: "supplierCompanyName",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            customerBillingAddress: {
                serializedName: "customerBillingAddress",
                type: {
                    name: "Composite",
                    className: "LocationAnnotation",
                },
            },
            customerDeliveryAddress: {
                serializedName: "customerDeliveryAddress",
                type: {
                    name: "Composite",
                    className: "LocationAnnotation",
                },
            },
            supplierAddress: {
                serializedName: "supplierAddress",
                type: {
                    name: "Composite",
                    className: "LocationAnnotation",
                },
            },
            customerPhoneNumber: {
                serializedName: "customerPhoneNumber",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            supplierPhoneNumber: {
                serializedName: "supplierPhoneNumber",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            supplierFax: {
                serializedName: "supplierFax",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            customerEmail: {
                serializedName: "customerEmail",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            supplierEmail: {
                serializedName: "supplierEmail",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            supplierWebsite: {
                serializedName: "supplierWebsite",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            currencyCode: {
                serializedName: "currencyCode",
                type: {
                    name: "Composite",
                    className: "CurrencyCodeAnnotation",
                },
            },
            customFields: {
                serializedName: "customFields",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
            rawText: {
                serializedName: "rawText",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const TableAnnotationParsed = {
    type: {
        name: "Composite",
        className: "TableAnnotationParsed",
        modelProperties: {
            rows: {
                serializedName: "rows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RowAnnotation",
                        },
                    },
                },
            },
        },
    },
};
const RowAnnotationParsed = {
    type: {
        name: "Composite",
        className: "RowAnnotationParsed",
        modelProperties: {
            itemCode: {
                serializedName: "itemCode",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            itemDate: {
                serializedName: "itemDate",
                type: {
                    name: "Composite",
                    className: "DateAnnotation",
                },
            },
            itemDescription: {
                serializedName: "itemDescription",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            itemUnit: {
                serializedName: "itemUnit",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            itemUnitPrice: {
                serializedName: "itemUnitPrice",
                type: {
                    name: "Composite",
                    className: "FloatAnnotation",
                },
            },
            itemQuantity: {
                serializedName: "itemQuantity",
                type: {
                    name: "Composite",
                    className: "FloatAnnotation",
                },
            },
            itemDiscount: {
                serializedName: "itemDiscount",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            itemBaseTotal: {
                serializedName: "itemBaseTotal",
                type: {
                    name: "Composite",
                    className: "FloatAnnotation",
                },
            },
            itemTaxRate: {
                serializedName: "itemTaxRate",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            itemTaxTotal: {
                serializedName: "itemTaxTotal",
                type: {
                    name: "Composite",
                    className: "FloatAnnotation",
                },
            },
            itemTotal: {
                serializedName: "itemTotal",
                type: {
                    name: "Composite",
                    className: "FloatAnnotation",
                },
            },
            itemOther: {
                serializedName: "itemOther",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
        },
    },
};
const TableBetaAnnotationParsed = {
    type: {
        name: "Composite",
        className: "TableBetaAnnotationParsed",
        modelProperties: {
            rows: {
                serializedName: "rows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RowBetaAnnotation",
                        },
                    },
                },
            },
        },
    },
};
const RowBetaAnnotationParsed = {
    type: {
        name: "Composite",
        className: "RowBetaAnnotationParsed",
        modelProperties: {
            itemCodeBeta: {
                serializedName: "itemCodeBeta",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            itemDateBeta: {
                serializedName: "itemDateBeta",
                type: {
                    name: "Composite",
                    className: "DateAnnotation",
                },
            },
            itemDescriptionBeta: {
                serializedName: "itemDescriptionBeta",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            itemUnitBeta: {
                serializedName: "itemUnitBeta",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            itemUnitPriceBeta: {
                serializedName: "itemUnitPriceBeta",
                type: {
                    name: "Composite",
                    className: "FloatAnnotation",
                },
            },
            itemQuantityBeta: {
                serializedName: "itemQuantityBeta",
                type: {
                    name: "Composite",
                    className: "FloatAnnotation",
                },
            },
            itemDiscountBeta: {
                serializedName: "itemDiscountBeta",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            itemBaseTotalBeta: {
                serializedName: "itemBaseTotalBeta",
                type: {
                    name: "Composite",
                    className: "FloatAnnotation",
                },
            },
            itemTaxRateBeta: {
                serializedName: "itemTaxRateBeta",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
            itemTaxTotalBeta: {
                serializedName: "itemTaxTotalBeta",
                type: {
                    name: "Composite",
                    className: "FloatAnnotation",
                },
            },
            itemTotalBeta: {
                serializedName: "itemTotalBeta",
                type: {
                    name: "Composite",
                    className: "FloatAnnotation",
                },
            },
            itemOtherBeta: {
                serializedName: "itemOtherBeta",
                type: {
                    name: "Composite",
                    className: "TextAnnotation",
                },
            },
        },
    },
};
const ResumeRedactData = {
    type: {
        name: "Composite",
        className: "ResumeRedactData",
        modelProperties: {
            redactedPdf: {
                serializedName: "redactedPdf",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DateRangeAnnotationParsed = {
    type: {
        name: "Composite",
        className: "DateRangeAnnotationParsed",
        modelProperties: {
            start: {
                serializedName: "start",
                type: {
                    name: "Composite",
                    className: "DateRangeValue",
                },
            },
            end: {
                serializedName: "end",
                type: {
                    name: "Composite",
                    className: "DateRangeValue",
                },
            },
        },
    },
};
const DateRangeValue = {
    type: {
        name: "Composite",
        className: "DateRangeValue",
        modelProperties: {
            date: {
                serializedName: "date",
                type: {
                    name: "Date",
                },
            },
            isCurrent: {
                serializedName: "isCurrent",
                type: {
                    name: "Boolean",
                },
            },
            day: {
                serializedName: "day",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            month: {
                serializedName: "month",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            year: {
                serializedName: "year",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const PhoneNumberAnnotationParsed = {
    type: {
        name: "Composite",
        className: "PhoneNumberAnnotationParsed",
        modelProperties: {
            rawText: {
                serializedName: "rawText",
                type: {
                    name: "String",
                },
            },
            formattedNumber: {
                serializedName: "formattedNumber",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            countryCode: {
                serializedName: "countryCode",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            internationalCountryCode: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "internationalCountryCode",
                nullable: true,
                type: {
                    name: "Number",
                },
            },
            nationalNumber: {
                serializedName: "nationalNumber",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UrlAnnotationParsed = {
    type: {
        name: "Composite",
        className: "UrlAnnotationParsed",
        modelProperties: {
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            domain: {
                serializedName: "domain",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Components1Kwk9B6SchemasThemeconfigPropertiesPalettePropertiesBackgroundOneof1 = {
    type: {
        name: "Composite",
        className: "Components1Kwk9B6SchemasThemeconfigPropertiesPalettePropertiesBackgroundOneof1",
        modelProperties: {
            default: {
                serializedName: "default",
                type: {
                    name: "String",
                },
            },
            paper: {
                serializedName: "paper",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DocumentCreate = {
    type: {
        name: "Composite",
        className: "DocumentCreate",
        modelProperties: {
            file: {
                serializedName: "file",
                type: {
                    name: "Stream",
                },
            },
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "DocumentCreateData",
                },
            },
            collection: {
                serializedName: "collection",
                type: {
                    name: "String",
                },
            },
            workspace: {
                serializedName: "workspace",
                type: {
                    name: "String",
                },
            },
            wait: {
                defaultValue: "true",
                serializedName: "wait",
                type: {
                    name: "String",
                },
            },
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String",
                },
            },
            customIdentifier: {
                serializedName: "customIdentifier",
                type: {
                    name: "String",
                },
            },
            fileName: {
                serializedName: "fileName",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            expiryTime: {
                serializedName: "expiryTime",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            language: {
                serializedName: "language",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            rejectDuplicates: {
                serializedName: "rejectDuplicates",
                nullable: true,
                type: {
                    name: "Boolean",
                },
            },
            regionBias: {
                serializedName: "regionBias",
                type: {
                    name: "String",
                },
            },
            lowPriority: {
                serializedName: "lowPriority",
                type: {
                    name: "String",
                },
            },
            compact: {
                serializedName: "compact",
                type: {
                    name: "String",
                },
            },
            deleteAfterParse: {
                serializedName: "deleteAfterParse",
                type: {
                    name: "String",
                },
            },
            enableValidationTool: {
                serializedName: "enableValidationTool",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const OrganizationCreate = {
    type: {
        name: "Composite",
        className: "OrganizationCreate",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            avatar: {
                serializedName: "avatar",
                type: {
                    name: "Stream",
                },
            },
            resthookSignatureKey: {
                serializedName: "resthookSignatureKey",
                nullable: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const OrganizationUpdate = {
    type: {
        name: "Composite",
        className: "OrganizationUpdate",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            avatar: {
                serializedName: "avatar",
                type: {
                    name: "Stream",
                },
            },
            resthookSignatureKey: {
                serializedName: "resthookSignatureKey",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            validationToolConfig: {
                serializedName: "validationToolConfig",
                type: {
                    name: "Composite",
                    className: "ValidationToolConfig",
                },
            },
        },
    },
};
const ResumeSearchConfigSearchToolTheme = {
    type: {
        name: "Composite",
        className: "ResumeSearchConfigSearchToolTheme",
        modelProperties: Object.assign({}, ThemeConfig.type.modelProperties),
    },
};
const JobDescriptionSearchConfigSearchToolTheme = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchConfigSearchToolTheme",
        modelProperties: Object.assign({}, ThemeConfig.type.modelProperties),
    },
};
const InvitationRespondedBy = {
    type: {
        name: "Composite",
        className: "InvitationRespondedBy",
        modelProperties: Object.assign({}, User.type.modelProperties),
    },
};
const PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), Paths2Ld2HiV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), PathsL3R02CV3DocumentsGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), Paths4K6IzqV3DataPointChoicesGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), Paths1Dgz0V9V3AnnotationsGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const Paths11QdcofV3MappingDataSourcesGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "Paths11QdcofV3MappingDataSourcesGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), Paths1UmoszuV3MappingDataSourcesGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const Paths1Qr7BnyV3MappingDataSourcesIdentifierValuesGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "Paths1Qr7BnyV3MappingDataSourcesIdentifierValuesGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), Paths1O6IvdaV3MappingDataSourcesIdentifierValuesGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const Paths1Dpvb2PV3MappingsGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "Paths1Dpvb2PV3MappingsGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), PathsWvcyp9V3MappingsGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), Paths93Fa0ZV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), PathsKhpbbuV3InvitationsGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), Paths11PzrpaV3ApiUsersGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), Paths1Qojy9V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema = {
    type: {
        name: "Composite",
        className: "PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema",
        modelProperties: Object.assign(Object.assign({}, PaginatedResponse.type.modelProperties), Paths4T5Cm5V3IndexGetResponses200ContentApplicationJsonSchemaAllof1
            .type.modelProperties),
    },
};
const Resume = {
    serializedName: "resume",
    type: {
        name: "Composite",
        className: "Resume",
        uberParent: "Document",
        polymorphicDiscriminator: Document.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Document.type.modelProperties), { data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "ResumeData",
                },
            } }),
    },
};
const Invoice = {
    serializedName: "invoice",
    type: {
        name: "Composite",
        className: "Invoice",
        uberParent: "Document",
        polymorphicDiscriminator: Document.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Document.type.modelProperties), { data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "InvoiceData",
                },
            } }),
    },
};
const JobDescription = {
    serializedName: "job-description",
    type: {
        name: "Composite",
        className: "JobDescription",
        uberParent: "Document",
        polymorphicDiscriminator: Document.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Document.type.modelProperties), { data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "JobDescriptionData",
                },
            } }),
    },
};
const ResumeRedact = {
    serializedName: "resume-redact",
    type: {
        name: "Composite",
        className: "ResumeRedact",
        uberParent: "Document",
        polymorphicDiscriminator: Document.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Document.type.modelProperties), { data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "ResumeRedactData",
                },
            } }),
    },
};
const LocationAnnotationUpdateParsed = {
    type: {
        name: "Composite",
        className: "LocationAnnotationUpdateParsed",
        modelProperties: Object.assign({}, Location.type.modelProperties),
    },
};
const ResumeSearchDetailLocationValue = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailLocationValue",
        modelProperties: Object.assign(Object.assign({}, Location.type.modelProperties), ComponentsN9ShogSchemasResumesearchdetailPropertiesLocationPropertiesValueAllof1
            .type.modelProperties),
    },
};
const JobDescriptionSearchDetailLocationValue = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailLocationValue",
        modelProperties: Object.assign(Object.assign({}, Location.type.modelProperties), Components1TlnsonSchemasJobdescriptionsearchdetailPropertiesLocationPropertiesValueAllof1
            .type.modelProperties),
    },
};
const ResumeSearchDetailEducationValueItem = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailEducationValueItem",
        modelProperties: Object.assign(Object.assign({}, Education.type.modelProperties), ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1
            .type.modelProperties),
    },
};
const JobTitleAnnotation = {
    type: {
        name: "Composite",
        className: "JobTitleAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "JobTitleAnnotationParsed",
                },
            } }),
    },
};
const TextAnnotation = {
    type: {
        name: "Composite",
        className: "TextAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const DateAnnotation = {
    type: {
        name: "Composite",
        className: "DateAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "Date",
                },
            } }),
    },
};
const LanguageAnnotation = {
    type: {
        name: "Composite",
        className: "LanguageAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const SkillAnnotation = {
    type: {
        name: "Composite",
        className: "SkillAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const ExpectedRemunerationAnnotation = {
    type: {
        name: "Composite",
        className: "ExpectedRemunerationAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "ExpectedRemunerationAnnotationParsed",
                },
            } }),
    },
};
const LocationAnnotation = {
    type: {
        name: "Composite",
        className: "LocationAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "Location",
                },
            } }),
    },
};
const YearsExperienceAnnotation = {
    type: {
        name: "Composite",
        className: "YearsExperienceAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "YearsExperienceAnnotationParsed",
                },
            } }),
    },
};
const AnnotationWithValidationResults = {
    type: {
        name: "Composite",
        className: "AnnotationWithValidationResults",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { validationResults: {
                serializedName: "validationResults",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationResult",
                        },
                    },
                },
            } }),
    },
};
const FloatAnnotation = {
    type: {
        name: "Composite",
        className: "FloatAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "Number",
                },
            } }),
    },
};
const RowAnnotation = {
    type: {
        name: "Composite",
        className: "RowAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "RowAnnotationParsed",
                },
            } }),
    },
};
const TableAnnotation = {
    type: {
        name: "Composite",
        className: "TableAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "TableAnnotationParsed",
                },
            } }),
    },
};
const RowBetaAnnotation = {
    type: {
        name: "Composite",
        className: "RowBetaAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "RowBetaAnnotationParsed",
                },
            } }),
    },
};
const TableBetaAnnotation = {
    type: {
        name: "Composite",
        className: "TableBetaAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "TableBetaAnnotationParsed",
                },
            } }),
    },
};
const CurrencyCodeAnnotation = {
    type: {
        name: "Composite",
        className: "CurrencyCodeAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "DataPointChoice",
                },
            } }),
    },
};
const DateRangeAnnotation = {
    type: {
        name: "Composite",
        className: "DateRangeAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "DateRangeAnnotationParsed",
                },
            } }),
    },
};
const PhoneNumberAnnotation = {
    type: {
        name: "Composite",
        className: "PhoneNumberAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "PhoneNumberAnnotationParsed",
                },
            } }),
    },
};
const UrlAnnotation = {
    type: {
        name: "Composite",
        className: "UrlAnnotation",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, Annotation.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "UrlAnnotationParsed",
                },
            } }),
    },
};
const JobTitleAnnotationUpdate = {
    type: {
        name: "Composite",
        className: "JobTitleAnnotationUpdate",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, AnnotationBase.type.modelProperties), JobTitleParsed.type.modelProperties),
    },
};
const TextAnnotationUpdate = {
    type: {
        name: "Composite",
        className: "TextAnnotationUpdate",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, AnnotationBase.type.modelProperties), { parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const DateAnnotationUpdate = {
    type: {
        name: "Composite",
        className: "DateAnnotationUpdate",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, AnnotationBase.type.modelProperties), { parsed: {
                serializedName: "parsed",
                nullable: true,
                type: {
                    name: "Date",
                },
            } }),
    },
};
const LanguageAnnotationUpdate = {
    type: {
        name: "Composite",
        className: "LanguageAnnotationUpdate",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, AnnotationBase.type.modelProperties), { parsed: {
                serializedName: "parsed",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const SkillAnnotationUpdate = {
    type: {
        name: "Composite",
        className: "SkillAnnotationUpdate",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, AnnotationBase.type.modelProperties), { parsed: {
                serializedName: "parsed",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const ExpectedRemunerationAnnotationUpdate = {
    type: {
        name: "Composite",
        className: "ExpectedRemunerationAnnotationUpdate",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, AnnotationBase.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "ExpectedRemunerationAnnotationUpdateParsed",
                },
            } }),
    },
};
const LocationAnnotationUpdate = {
    type: {
        name: "Composite",
        className: "LocationAnnotationUpdate",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, AnnotationBase.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "LocationAnnotationUpdateParsed",
                },
            } }),
    },
};
const YearsExperienceAnnotationUpdate = {
    type: {
        name: "Composite",
        className: "YearsExperienceAnnotationUpdate",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, AnnotationBase.type.modelProperties), { parsed: {
                serializedName: "parsed",
                type: {
                    name: "Composite",
                    className: "YearsExperienceAnnotationUpdateParsed",
                },
            } }),
    },
};
const ResumeSearchParametersCustomData = {
    type: {
        name: "Composite",
        className: "ResumeSearchParametersCustomData",
        modelProperties: Object.assign({}, SearchParametersCustomData.type.modelProperties),
    },
};
const ResumeSearchDetailSkillsValueItem = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailSkillsValueItem",
        modelProperties: Object.assign(Object.assign({}, ResumeSkill.type.modelProperties), ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1
            .type.modelProperties),
    },
};
const ResumeSearchDetailLanguagesValueItem = {
    type: {
        name: "Composite",
        className: "ResumeSearchDetailLanguagesValueItem",
        modelProperties: Object.assign(Object.assign({}, ResumeSkill.type.modelProperties), Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1
            .type.modelProperties),
    },
};
const JobDescriptionSearchDetailOccupationGroupValue = {
    type: {
        name: "Composite",
        className: "JobDescriptionSearchDetailOccupationGroupValue",
        modelProperties: Object.assign({}, OccupationGroupSearchResult.type.modelProperties),
    },
};
let discriminators = {
    Document: Document,
    "Document.resume": Resume,
    "Document.invoice": Invoice,
    "Document.job-description": JobDescription,
    "Document.resume-redact": ResumeRedact,
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Workspace: Workspace,
    Organization: Organization,
    OrganizationValidationToolConfig: OrganizationValidationToolConfig,
    ThemeConfig: ThemeConfig,
    ThemeConfigPalette: ThemeConfigPalette,
    ThemeConfigPaletteText: ThemeConfigPaletteText,
    PaletteColorOptions: PaletteColorOptions,
    ThemeConfigTypography: ThemeConfigTypography,
    WorkspaceCollectionsItem: WorkspaceCollectionsItem,
    WorkspaceCollectionsItemExtractor: WorkspaceCollectionsItemExtractor,
    BaseExtractor: BaseExtractor,
    User: User,
    WorkspaceDocumentSplitter: WorkspaceDocumentSplitter,
    RequestError: RequestError,
    RequestErrorErrorsItem: RequestErrorErrorsItem,
    WorkspaceCreate: WorkspaceCreate,
    WorkspaceUpdate: WorkspaceUpdate,
    UsageByWorkspace: UsageByWorkspace,
    PaginatedResponse: PaginatedResponse,
    Paths2Ld2HiV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchemaAllof1: Paths2Ld2HiV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchemaAllof1,
    WorkspaceMembership: WorkspaceMembership,
    WorkspaceMembershipCreate: WorkspaceMembershipCreate,
    Collection: Collection,
    CollectionWorkspace: CollectionWorkspace,
    Extractor: Extractor,
    ExtractorBaseExtractor: ExtractorBaseExtractor,
    FieldGroup: FieldGroup,
    FieldDeprecated: FieldDeprecated,
    FieldsLayout: FieldsLayout,
    FieldCategory: FieldCategory,
    Field: Field,
    ExtractorConfig: ExtractorConfig,
    RedactConfig: RedactConfig,
    CollectionCreate: CollectionCreate,
    CollectionUpdate: CollectionUpdate,
    DataFieldCreate: DataFieldCreate,
    DataFieldCreateField: DataFieldCreateField,
    DataFieldCreateDataPoint: DataFieldCreateDataPoint,
    DataField: DataField,
    DataFieldField: DataFieldField,
    DataFieldDataPoint: DataFieldDataPoint,
    DataPoint: DataPoint,
    MappingDataSource: MappingDataSource,
    CollectionField: CollectionField,
    UsageByCollection: UsageByCollection,
    PathsL3R02CV3DocumentsGetResponses200ContentApplicationJsonSchemaAllof1: PathsL3R02CV3DocumentsGetResponses200ContentApplicationJsonSchemaAllof1,
    Document: Document,
    DocumentMeta: DocumentMeta,
    DocumentMetaParentDocument: DocumentMetaParentDocument,
    DocumentMetaChildDocumentsItem: DocumentMetaChildDocumentsItem,
    PageMeta: PageMeta,
    DocumentMetaCollection: DocumentMetaCollection,
    DocumentMetaCollectionExtractor: DocumentMetaCollectionExtractor,
    ValidationRule: ValidationRule,
    DocumentMetaWorkspace: DocumentMetaWorkspace,
    UserNullable: UserNullable,
    Tag: Tag,
    RegionBias: RegionBias,
    DocumentError: DocumentError,
    DocumentWarning: DocumentWarning,
    DocumentCreateData: DocumentCreateData,
    ResumeData: ResumeData,
    ResumeDataName: ResumeDataName,
    ResumeDataPhoneNumberDetailsItem: ResumeDataPhoneNumberDetailsItem,
    Location: Location,
    Education: Education,
    Accreditation: Accreditation,
    EducationGrade: EducationGrade,
    EducationDates: EducationDates,
    ResumeDataWorkExperienceItem: ResumeDataWorkExperienceItem,
    ResumeDataWorkExperienceItemDates: ResumeDataWorkExperienceItemDates,
    ResumeDataWorkExperienceItemOccupation: ResumeDataWorkExperienceItemOccupation,
    Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification: Components1TryetgSchemasResumedataPropertiesWorkexperienceItemsPropertiesOccupationPropertiesClassification,
    ResumeDataSkillsItem: ResumeDataSkillsItem,
    ResumeDataSkillsPropertiesItemsItem: ResumeDataSkillsPropertiesItemsItem,
    ResumeDataRefereesItem: ResumeDataRefereesItem,
    ResumeDataSectionsItem: ResumeDataSectionsItem,
    JobDescriptionData: JobDescriptionData,
    JobTitleAnnotationParsed: JobTitleAnnotationParsed,
    JobTitleAnnotationParsedClassification: JobTitleAnnotationParsedClassification,
    Annotation: Annotation,
    Rectangle: Rectangle,
    ExpectedRemunerationAnnotationParsed: ExpectedRemunerationAnnotationParsed,
    YearsExperienceAnnotationParsed: YearsExperienceAnnotationParsed,
    DocumentUpdate: DocumentUpdate,
    PathsO1OmciV3DocumentsIdentifierUpdateDataPostRequestbodyContentApplicationJsonSchema: PathsO1OmciV3DocumentsIdentifierUpdateDataPostRequestbodyContentApplicationJsonSchema,
    JobDescriptionDataUpdate: JobDescriptionDataUpdate,
    AnnotationBase: AnnotationBase,
    JobTitleParsed: JobTitleParsed,
    JobTitleParsedParsed: JobTitleParsedParsed,
    JobTitleParsedClassification: JobTitleParsedClassification,
    ExpectedRemunerationAnnotationUpdateParsed: ExpectedRemunerationAnnotationUpdateParsed,
    YearsExperienceAnnotationUpdateParsed: YearsExperienceAnnotationUpdateParsed,
    BatchAddTagRequest: BatchAddTagRequest,
    BatchRemoveTagRequest: BatchRemoveTagRequest,
    ValidationResult: ValidationResult,
    ValidationResultCreate: ValidationResultCreate,
    ValidationResultUpdate: ValidationResultUpdate,
    BatchDeleteValidationResultsRequest: BatchDeleteValidationResultsRequest,
    DocumentSplitter: DocumentSplitter,
    DocumentEditRequest: DocumentEditRequest,
    DocumentSplit: DocumentSplit,
    DocumentSplitPage: DocumentSplitPage,
    Meta: Meta,
    MetaParentDocument: MetaParentDocument,
    MetaChildDocumentsItem: MetaChildDocumentsItem,
    ExtractorCreate: ExtractorCreate,
    ExtractorUpdate: ExtractorUpdate,
    DataPointCreate: DataPointCreate,
    DataPointUpdate: DataPointUpdate,
    Paths4K6IzqV3DataPointChoicesGetResponses200ContentApplicationJsonSchemaAllof1: Paths4K6IzqV3DataPointChoicesGetResponses200ContentApplicationJsonSchemaAllof1,
    DataPointChoice: DataPointChoice,
    DataPointChoiceCreate: DataPointChoiceCreate,
    DataPointChoiceUpdate: DataPointChoiceUpdate,
    DataPointChoiceReplaceRequest: DataPointChoiceReplaceRequest,
    DataPointChoiceForReplace: DataPointChoiceForReplace,
    DataPointChoiceReplaceResponse: DataPointChoiceReplaceResponse,
    DataPointChoiceReplaceResponseChoicesItem: DataPointChoiceReplaceResponseChoicesItem,
    Paths1Dgz0V9V3AnnotationsGetResponses200ContentApplicationJsonSchemaAllof1: Paths1Dgz0V9V3AnnotationsGetResponses200ContentApplicationJsonSchemaAllof1,
    AnnotationCreate: AnnotationCreate,
    ChangedValidationResults: ChangedValidationResults,
    AnnotationUpdate: AnnotationUpdate,
    AnotationDelete: AnotationDelete,
    AnnotationBatchUpdate: AnnotationBatchUpdate,
    BatchDeleteAnnotationsResponse: BatchDeleteAnnotationsResponse,
    MappingDataSourceCreate: MappingDataSourceCreate,
    Paths1UmoszuV3MappingDataSourcesGetResponses200ContentApplicationJsonSchemaAllof1: Paths1UmoszuV3MappingDataSourcesGetResponses200ContentApplicationJsonSchemaAllof1,
    Paths1O6IvdaV3MappingDataSourcesIdentifierValuesGetResponses200ContentApplicationJsonSchemaAllof1: Paths1O6IvdaV3MappingDataSourcesIdentifierValuesGetResponses200ContentApplicationJsonSchemaAllof1,
    MappingCreate: MappingCreate,
    Mapping: Mapping,
    PathsWvcyp9V3MappingsGetResponses200ContentApplicationJsonSchemaAllof1: PathsWvcyp9V3MappingsGetResponses200ContentApplicationJsonSchemaAllof1,
    MappingUpdate: MappingUpdate,
    TagCreate: TagCreate,
    TagUpdate: TagUpdate,
    ValidationToolConfig: ValidationToolConfig,
    Paths93Fa0ZV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchemaAllof1: Paths93Fa0ZV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchemaAllof1,
    OrganizationMembership: OrganizationMembership,
    OrganizationMembershipUpdate: OrganizationMembershipUpdate,
    PathsKhpbbuV3InvitationsGetResponses200ContentApplicationJsonSchemaAllof1: PathsKhpbbuV3InvitationsGetResponses200ContentApplicationJsonSchemaAllof1,
    Invitation: Invitation,
    InvitationCreate: InvitationCreate,
    InvitationUpdate: InvitationUpdate,
    InvitationResponse: InvitationResponse,
    Paths11PzrpaV3ApiUsersGetResponses200ContentApplicationJsonSchemaAllof1: Paths11PzrpaV3ApiUsersGetResponses200ContentApplicationJsonSchemaAllof1,
    ApiUserWithoutKey: ApiUserWithoutKey,
    ApiUserWithoutKeyOrganizationsItem: ApiUserWithoutKeyOrganizationsItem,
    ApiUserCreate: ApiUserCreate,
    ApiUserWithKey: ApiUserWithKey,
    ApiUserWithKeyOrganizationsItem: ApiUserWithKeyOrganizationsItem,
    ApiUserUpdate: ApiUserUpdate,
    Paths1Qojy9V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchemaAllof1: Paths1Qojy9V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchemaAllof1,
    ResthookSubscription: ResthookSubscription,
    ResthookSubscriptionWorkspace: ResthookSubscriptionWorkspace,
    ResthookSubscriptionCreate: ResthookSubscriptionCreate,
    ResthookSubscriptionUpdate: ResthookSubscriptionUpdate,
    OccupationGroup: OccupationGroup,
    ResumeSearchParameters: ResumeSearchParameters,
    ResumeSearchParametersLocation: ResumeSearchParametersLocation,
    ResumeSearchParametersLocationCoordinates: ResumeSearchParametersLocationCoordinates,
    ResumeSearchParametersSkill: ResumeSearchParametersSkill,
    SearchParametersCustomData: SearchParametersCustomData,
    ResumeSearch: ResumeSearch,
    ResumeSearchResult: ResumeSearchResult,
    JobTitleSearchScoreComponent: JobTitleSearchScoreComponent,
    ManagementLevelSearchScoreComponent: ManagementLevelSearchScoreComponent,
    ExperienceSearchScoreComponent: ExperienceSearchScoreComponent,
    SkillsSearchScoreComponent: SkillsSearchScoreComponent,
    LanguagesSearchScoreComponent: LanguagesSearchScoreComponent,
    LocationSearchScoreComponent: LocationSearchScoreComponent,
    EducationSearchScoreComponent: EducationSearchScoreComponent,
    OccupationGroupSearchScoreComponent: OccupationGroupSearchScoreComponent,
    SearchExpressionSearchScoreComponent: SearchExpressionSearchScoreComponent,
    ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties: ComponentsNqbw24SchemasCustomdatasearchscorecomponentAdditionalproperties,
    ResumeSearchDetail: ResumeSearchDetail,
    ResumeSearchDetailJobTitle: ResumeSearchDetailJobTitle,
    ResumeSearchDetailJobTitleValueItem: ResumeSearchDetailJobTitleValueItem,
    ResumeSearchDetailLocation: ResumeSearchDetailLocation,
    ComponentsN9ShogSchemasResumesearchdetailPropertiesLocationPropertiesValueAllof1: ComponentsN9ShogSchemasResumesearchdetailPropertiesLocationPropertiesValueAllof1,
    ResumeSearchDetailEducation: ResumeSearchDetailEducation,
    ResumeSearchDetailEducationMissing: ResumeSearchDetailEducationMissing,
    ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1: ComponentsSxu0N3SchemasResumesearchdetailPropertiesEducationPropertiesValueItemsAllof1,
    ResumeSearchDetailSkills: ResumeSearchDetailSkills,
    ResumeSkill: ResumeSkill,
    ResumeSkillSourcesItem: ResumeSkillSourcesItem,
    ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1: ComponentsH65QjbSchemasResumesearchdetailPropertiesSkillsPropertiesValueItemsAllof1,
    ResumeSearchDetailExperience: ResumeSearchDetailExperience,
    ResumeSearchDetailOccupationGroup: ResumeSearchDetailOccupationGroup,
    OccupationGroupSearchResult: OccupationGroupSearchResult,
    ResumeSearchDetailLanguages: ResumeSearchDetailLanguages,
    Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1: Components159Ji55SchemasResumesearchdetailPropertiesLanguagesPropertiesValueItemsAllof1,
    ResumeSearchDetailManagementLevel: ResumeSearchDetailManagementLevel,
    ResumeSearchDetailSearchExpression: ResumeSearchDetailSearchExpression,
    ResumeSearchConfig: ResumeSearchConfig,
    SearchConfigAction: SearchConfigAction,
    CustomFieldConfig: CustomFieldConfig,
    Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema: Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema,
    ResumeSearchEmbed: ResumeSearchEmbed,
    ResumeSearchMatch: ResumeSearchMatch,
    ResumeSearchMatchDetails: ResumeSearchMatchDetails,
    JobDescriptionSearchParameters: JobDescriptionSearchParameters,
    JobDescriptionSearch: JobDescriptionSearch,
    JobDescriptionSearchResult: JobDescriptionSearchResult,
    JobDescriptionSearchDetail: JobDescriptionSearchDetail,
    JobDescriptionSearchDetailJobTitle: JobDescriptionSearchDetailJobTitle,
    JobDescriptionSearchDetailJobTitleValue: JobDescriptionSearchDetailJobTitleValue,
    JobDescriptionSearchDetailLocation: JobDescriptionSearchDetailLocation,
    Components1TlnsonSchemasJobdescriptionsearchdetailPropertiesLocationPropertiesValueAllof1: Components1TlnsonSchemasJobdescriptionsearchdetailPropertiesLocationPropertiesValueAllof1,
    JobDescriptionSearchDetailEducation: JobDescriptionSearchDetailEducation,
    JobDescriptionSearchDetailEducationMissing: JobDescriptionSearchDetailEducationMissing,
    JobDescriptionSearchDetailEducationValue: JobDescriptionSearchDetailEducationValue,
    JobDescriptionSearchDetailSkills: JobDescriptionSearchDetailSkills,
    JobDescriptionSearchDetailSkillsValueItem: JobDescriptionSearchDetailSkillsValueItem,
    JobDescriptionSearchDetailExperience: JobDescriptionSearchDetailExperience,
    JobDescriptionSearchDetailOccupationGroup: JobDescriptionSearchDetailOccupationGroup,
    JobDescriptionSearchDetailLanguages: JobDescriptionSearchDetailLanguages,
    JobDescriptionSearchDetailLanguagesValueItem: JobDescriptionSearchDetailLanguagesValueItem,
    JobDescriptionSearchDetailManagementLevel: JobDescriptionSearchDetailManagementLevel,
    JobDescriptionSearchDetailSearchExpression: JobDescriptionSearchDetailSearchExpression,
    JobDescriptionSearchConfig: JobDescriptionSearchConfig,
    PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema: PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema,
    JobDescriptionSearchEmbed: JobDescriptionSearchEmbed,
    Paths4T5Cm5V3IndexGetResponses200ContentApplicationJsonSchemaAllof1: Paths4T5Cm5V3IndexGetResponses200ContentApplicationJsonSchemaAllof1,
    Index: Index,
    IndexUser: IndexUser,
    IndexCreate: IndexCreate,
    IndexUpdate: IndexUpdate,
    PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema: PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema,
    Get200ApplicationJsonPropertiesItemsItem: Get200ApplicationJsonPropertiesItemsItem,
    PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema: PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema,
    PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema: PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema,
    InvoiceData: InvoiceData,
    TableAnnotationParsed: TableAnnotationParsed,
    RowAnnotationParsed: RowAnnotationParsed,
    TableBetaAnnotationParsed: TableBetaAnnotationParsed,
    RowBetaAnnotationParsed: RowBetaAnnotationParsed,
    ResumeRedactData: ResumeRedactData,
    DateRangeAnnotationParsed: DateRangeAnnotationParsed,
    DateRangeValue: DateRangeValue,
    PhoneNumberAnnotationParsed: PhoneNumberAnnotationParsed,
    UrlAnnotationParsed: UrlAnnotationParsed,
    Components1Kwk9B6SchemasThemeconfigPropertiesPalettePropertiesBackgroundOneof1: Components1Kwk9B6SchemasThemeconfigPropertiesPalettePropertiesBackgroundOneof1,
    DocumentCreate: DocumentCreate,
    OrganizationCreate: OrganizationCreate,
    OrganizationUpdate: OrganizationUpdate,
    ResumeSearchConfigSearchToolTheme: ResumeSearchConfigSearchToolTheme,
    JobDescriptionSearchConfigSearchToolTheme: JobDescriptionSearchConfigSearchToolTheme,
    InvitationRespondedBy: InvitationRespondedBy,
    PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema: PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema,
    PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema: PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema,
    PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema: PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema,
    Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema: Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema,
    Paths11QdcofV3MappingDataSourcesGetResponses200ContentApplicationJsonSchema: Paths11QdcofV3MappingDataSourcesGetResponses200ContentApplicationJsonSchema,
    Paths1Qr7BnyV3MappingDataSourcesIdentifierValuesGetResponses200ContentApplicationJsonSchema: Paths1Qr7BnyV3MappingDataSourcesIdentifierValuesGetResponses200ContentApplicationJsonSchema,
    Paths1Dpvb2PV3MappingsGetResponses200ContentApplicationJsonSchema: Paths1Dpvb2PV3MappingsGetResponses200ContentApplicationJsonSchema,
    PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema: PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema,
    Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema: Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema,
    Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema: Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema,
    PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema: PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema,
    PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema: PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema,
    Resume: Resume,
    Invoice: Invoice,
    JobDescription: JobDescription,
    ResumeRedact: ResumeRedact,
    LocationAnnotationUpdateParsed: LocationAnnotationUpdateParsed,
    ResumeSearchDetailLocationValue: ResumeSearchDetailLocationValue,
    JobDescriptionSearchDetailLocationValue: JobDescriptionSearchDetailLocationValue,
    ResumeSearchDetailEducationValueItem: ResumeSearchDetailEducationValueItem,
    JobTitleAnnotation: JobTitleAnnotation,
    TextAnnotation: TextAnnotation,
    DateAnnotation: DateAnnotation,
    LanguageAnnotation: LanguageAnnotation,
    SkillAnnotation: SkillAnnotation,
    ExpectedRemunerationAnnotation: ExpectedRemunerationAnnotation,
    LocationAnnotation: LocationAnnotation,
    YearsExperienceAnnotation: YearsExperienceAnnotation,
    AnnotationWithValidationResults: AnnotationWithValidationResults,
    FloatAnnotation: FloatAnnotation,
    RowAnnotation: RowAnnotation,
    TableAnnotation: TableAnnotation,
    RowBetaAnnotation: RowBetaAnnotation,
    TableBetaAnnotation: TableBetaAnnotation,
    CurrencyCodeAnnotation: CurrencyCodeAnnotation,
    DateRangeAnnotation: DateRangeAnnotation,
    PhoneNumberAnnotation: PhoneNumberAnnotation,
    UrlAnnotation: UrlAnnotation,
    JobTitleAnnotationUpdate: JobTitleAnnotationUpdate,
    TextAnnotationUpdate: TextAnnotationUpdate,
    DateAnnotationUpdate: DateAnnotationUpdate,
    LanguageAnnotationUpdate: LanguageAnnotationUpdate,
    SkillAnnotationUpdate: SkillAnnotationUpdate,
    ExpectedRemunerationAnnotationUpdate: ExpectedRemunerationAnnotationUpdate,
    LocationAnnotationUpdate: LocationAnnotationUpdate,
    YearsExperienceAnnotationUpdate: YearsExperienceAnnotationUpdate,
    ResumeSearchParametersCustomData: ResumeSearchParametersCustomData,
    ResumeSearchDetailSkillsValueItem: ResumeSearchDetailSkillsValueItem,
    ResumeSearchDetailLanguagesValueItem: ResumeSearchDetailLanguagesValueItem,
    JobDescriptionSearchDetailOccupationGroupValue: JobDescriptionSearchDetailOccupationGroupValue,
    discriminators: discriminators
});

const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
const region = {
    parameterPath: "region",
    mapper: {
        serializedName: "region",
        required: true,
        type: {
            name: "String",
        },
    },
};
const organization = {
    parameterPath: "organization",
    mapper: {
        serializedName: "organization",
        required: true,
        type: {
            name: "String",
        },
    },
};
const name = {
    parameterPath: ["options", "name"],
    mapper: {
        serializedName: "name",
        type: {
            name: "String",
        },
    },
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
const body = {
    parameterPath: "body",
    mapper: WorkspaceCreate,
};
const identifier = {
    parameterPath: "identifier",
    mapper: {
        serializedName: "identifier",
        required: true,
        type: {
            name: "String",
        },
    },
};
const body1 = {
    parameterPath: "body",
    mapper: WorkspaceUpdate,
};
const start = {
    parameterPath: ["options", "start"],
    mapper: {
        serializedName: "start",
        type: {
            name: "String",
        },
    },
};
const end = {
    parameterPath: ["options", "end"],
    mapper: {
        serializedName: "end",
        type: {
            name: "String",
        },
    },
};
const offset = {
    parameterPath: ["options", "offset"],
    mapper: {
        constraints: {
            InclusiveMinimum: 0,
        },
        serializedName: "offset",
        type: {
            name: "Number",
        },
    },
};
const limit = {
    parameterPath: ["options", "limit"],
    mapper: {
        constraints: {
            InclusiveMaximum: 100,
            InclusiveMinimum: 1,
        },
        serializedName: "limit",
        type: {
            name: "Number",
        },
    },
};
const workspace = {
    parameterPath: ["options", "workspace"],
    mapper: {
        serializedName: "workspace",
        type: {
            name: "String",
        },
    },
};
const user = {
    parameterPath: ["options", "user"],
    mapper: {
        serializedName: "user",
        type: {
            name: "String",
        },
    },
};
const body2 = {
    parameterPath: "body",
    mapper: WorkspaceMembershipCreate,
};
const workspace1 = {
    parameterPath: "workspace",
    mapper: {
        serializedName: "workspace",
        required: true,
        type: {
            name: "String",
        },
    },
};
const body3 = {
    parameterPath: "body",
    mapper: CollectionCreate,
};
const body4 = {
    parameterPath: "body",
    mapper: CollectionUpdate,
};
const body5 = {
    parameterPath: "body",
    mapper: DataFieldCreate,
};
const datapointIdentifier = {
    parameterPath: "datapointIdentifier",
    mapper: {
        serializedName: "datapoint_identifier",
        required: true,
        type: {
            name: "String",
        },
    },
};
const body6 = {
    parameterPath: "body",
    mapper: CollectionField,
};
const collection = {
    parameterPath: ["options", "collection"],
    mapper: {
        serializedName: "collection",
        type: {
            name: "String",
        },
    },
};
const state = {
    parameterPath: ["options", "state"],
    mapper: {
        serializedName: "state",
        type: {
            name: "String",
        },
    },
};
const tags = {
    parameterPath: ["options", "tags"],
    mapper: {
        serializedName: "tags",
        type: {
            name: "Sequence",
            element: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const createdDt = {
    parameterPath: ["options", "createdDt"],
    mapper: {
        serializedName: "created_dt",
        type: {
            name: "String",
        },
    },
};
const search = {
    parameterPath: ["options", "search"],
    mapper: {
        serializedName: "search",
        type: {
            name: "String",
        },
    },
};
const ordering = {
    parameterPath: ["options", "ordering"],
    mapper: {
        serializedName: "ordering",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
};
const includeData = {
    parameterPath: ["options", "includeData"],
    mapper: {
        serializedName: "include_data",
        type: {
            name: "Boolean",
        },
    },
};
const exclude = {
    parameterPath: ["options", "exclude"],
    mapper: {
        serializedName: "exclude",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
};
const inReview = {
    parameterPath: ["options", "inReview"],
    mapper: {
        serializedName: "in_review",
        type: {
            name: "Boolean",
        },
    },
};
const failed = {
    parameterPath: ["options", "failed"],
    mapper: {
        serializedName: "failed",
        type: {
            name: "Boolean",
        },
    },
};
const ready = {
    parameterPath: ["options", "ready"],
    mapper: {
        serializedName: "ready",
        type: {
            name: "Boolean",
        },
    },
};
const validatable = {
    parameterPath: ["options", "validatable"],
    mapper: {
        serializedName: "validatable",
        type: {
            name: "Boolean",
        },
    },
};
const hasChallenges = {
    parameterPath: ["options", "hasChallenges"],
    mapper: {
        serializedName: "has_challenges",
        type: {
            name: "Boolean",
        },
    },
};
const customIdentifier = {
    parameterPath: ["options", "customIdentifier"],
    mapper: {
        serializedName: "custom_identifier",
        type: {
            name: "String",
        },
    },
};
const compact = {
    parameterPath: ["options", "compact"],
    mapper: {
        serializedName: "compact",
        type: {
            name: "Boolean",
        },
    },
};
const count = {
    parameterPath: ["options", "count"],
    mapper: {
        serializedName: "count",
        type: {
            name: "Boolean",
        },
    },
};
const contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "multipart/form-data",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
const file = {
    parameterPath: ["options", "file"],
    mapper: {
        serializedName: "file",
        type: {
            name: "Stream",
        },
    },
};
const url = {
    parameterPath: ["options", "url"],
    mapper: {
        serializedName: "url",
        type: {
            name: "String",
        },
    },
};
const data = {
    parameterPath: ["options", "data"],
    mapper: DocumentCreateData,
};
const collection1 = {
    parameterPath: ["options", "collection"],
    mapper: {
        serializedName: "collection",
        type: {
            name: "String",
        },
    },
};
const workspace2 = {
    parameterPath: ["options", "workspace"],
    mapper: {
        serializedName: "workspace",
        type: {
            name: "String",
        },
    },
};
const wait = {
    parameterPath: ["options", "wait"],
    mapper: {
        defaultValue: "true",
        serializedName: "wait",
        type: {
            name: "String",
        },
    },
};
const identifier1 = {
    parameterPath: ["options", "identifier"],
    mapper: {
        serializedName: "identifier",
        type: {
            name: "String",
        },
    },
};
const customIdentifier1 = {
    parameterPath: ["options", "customIdentifier"],
    mapper: {
        serializedName: "customIdentifier",
        type: {
            name: "String",
        },
    },
};
const fileName = {
    parameterPath: ["options", "fileName"],
    mapper: {
        serializedName: "fileName",
        type: {
            name: "String",
        },
    },
};
const expiryTime = {
    parameterPath: ["options", "expiryTime"],
    mapper: {
        serializedName: "expiryTime",
        type: {
            name: "String",
        },
    },
};
const language = {
    parameterPath: ["options", "language"],
    mapper: {
        serializedName: "language",
        type: {
            name: "String",
        },
    },
};
const rejectDuplicates = {
    parameterPath: ["options", "rejectDuplicates"],
    mapper: {
        serializedName: "rejectDuplicates",
        type: {
            name: "Boolean",
        },
    },
};
const regionBias = {
    parameterPath: ["options", "regionBias"],
    mapper: {
        serializedName: "regionBias",
        type: {
            name: "String",
        },
    },
};
const lowPriority = {
    parameterPath: ["options", "lowPriority"],
    mapper: {
        serializedName: "lowPriority",
        type: {
            name: "String",
        },
    },
};
const compact1 = {
    parameterPath: ["options", "compact"],
    mapper: {
        serializedName: "compact",
        type: {
            name: "String",
        },
    },
};
const deleteAfterParse = {
    parameterPath: ["options", "deleteAfterParse"],
    mapper: {
        serializedName: "deleteAfterParse",
        type: {
            name: "String",
        },
    },
};
const enableValidationTool = {
    parameterPath: ["options", "enableValidationTool"],
    mapper: {
        serializedName: "enableValidationTool",
        type: {
            name: "String",
        },
    },
};
const accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
const format = {
    parameterPath: ["options", "format"],
    mapper: {
        serializedName: "format",
        type: {
            name: "String",
        },
    },
};
const body7 = {
    parameterPath: "body",
    mapper: DocumentUpdate,
};
const body8 = {
    parameterPath: "body",
    mapper: PathsO1OmciV3DocumentsIdentifierUpdateDataPostRequestbodyContentApplicationJsonSchema,
};
const body9 = {
    parameterPath: "body",
    mapper: BatchAddTagRequest,
};
const body10 = {
    parameterPath: "body",
    mapper: BatchRemoveTagRequest,
};
const document = {
    parameterPath: "document",
    mapper: {
        serializedName: "document",
        required: true,
        type: {
            name: "String",
        },
    },
};
const body11 = {
    parameterPath: "body",
    mapper: ValidationResultCreate,
};
const id = {
    parameterPath: "id",
    mapper: {
        constraints: {
            InclusiveMinimum: 1,
        },
        serializedName: "id",
        required: true,
        type: {
            name: "Number",
        },
    },
};
const body12 = {
    parameterPath: "body",
    mapper: ValidationResultUpdate,
};
const body13 = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Composite",
                    className: "ValidationResultCreate",
                },
            },
        },
    },
};
const body14 = {
    parameterPath: "body",
    mapper: BatchDeleteValidationResultsRequest,
};
const organization1 = {
    parameterPath: ["options", "organization"],
    mapper: {
        serializedName: "organization",
        type: {
            name: "String",
        },
    },
};
const includePublic = {
    parameterPath: ["options", "includePublic"],
    mapper: {
        serializedName: "include_public",
        type: {
            name: "Boolean",
        },
    },
};
const body15 = {
    parameterPath: "body",
    mapper: DocumentEditRequest,
};
const includePublicExtractors = {
    parameterPath: ["options", "includePublicExtractors"],
    mapper: {
        serializedName: "include_public_extractors",
        type: {
            name: "Boolean",
        },
    },
};
const body16 = {
    parameterPath: ["options", "body"],
    mapper: ExtractorCreate,
};
const body17 = {
    parameterPath: "body",
    mapper: ExtractorUpdate,
};
const extractor = {
    parameterPath: ["options", "extractor"],
    mapper: {
        serializedName: "extractor",
        type: {
            name: "String",
        },
    },
};
const slug = {
    parameterPath: ["options", "slug"],
    mapper: {
        serializedName: "slug",
        type: {
            name: "String",
        },
    },
};
const description = {
    parameterPath: ["options", "description"],
    mapper: {
        serializedName: "description",
        type: {
            name: "String",
        },
    },
};
const annotationContentType = {
    parameterPath: ["options", "annotationContentType"],
    mapper: {
        serializedName: "annotation_content_type",
        type: {
            name: "String",
        },
    },
};
const identifier2 = {
    parameterPath: ["options", "identifier"],
    mapper: {
        serializedName: "identifier",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
};
const body18 = {
    parameterPath: ["options", "body"],
    mapper: DataPointCreate,
};
const body19 = {
    parameterPath: "body",
    mapper: DataPointUpdate,
};
const dataPoint = {
    parameterPath: "dataPoint",
    mapper: {
        serializedName: "data_point",
        required: true,
        type: {
            name: "String",
        },
    },
};
const collection2 = {
    parameterPath: "collection",
    mapper: {
        serializedName: "collection",
        required: true,
        type: {
            name: "String",
        },
    },
};
const body20 = {
    parameterPath: ["options", "body"],
    mapper: DataPointChoiceCreate,
};
const body21 = {
    parameterPath: "body",
    mapper: DataPointChoiceUpdate,
};
const body22 = {
    parameterPath: ["options", "body"],
    mapper: DataPointChoiceReplaceRequest,
};
const body23 = {
    parameterPath: "body",
    mapper: AnnotationCreate,
};
const body24 = {
    parameterPath: "body",
    mapper: AnnotationUpdate,
};
const body25 = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Composite",
                    className: "AnnotationCreate",
                },
            },
        },
    },
};
const body26 = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Composite",
                    className: "AnnotationBatchUpdate",
                },
            },
        },
    },
};
const body27 = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        type: {
            name: "Sequence",
            element: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const body28 = {
    parameterPath: "body",
    mapper: MappingDataSourceCreate,
};
const identifier3 = {
    parameterPath: ["options", "identifier"],
    mapper: {
        serializedName: "identifier",
        type: {
            name: "String",
        },
    },
};
const annotation = {
    parameterPath: ["options", "annotation"],
    mapper: {
        serializedName: "annotation",
        type: {
            name: "Number",
        },
    },
};
const body29 = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
const body30 = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
        },
    },
};
const value = {
    parameterPath: "value",
    mapper: {
        serializedName: "value",
        required: true,
        type: {
            name: "String",
        },
    },
};
const body31 = {
    parameterPath: "body",
    mapper: MappingCreate,
};
const mappingDataSource = {
    parameterPath: "mappingDataSource",
    mapper: {
        serializedName: "mapping_data_source",
        required: true,
        type: {
            name: "String",
        },
    },
};
const body32 = {
    parameterPath: "body",
    mapper: MappingUpdate,
};
const body33 = {
    parameterPath: "body",
    mapper: TagCreate,
};
const body34 = {
    parameterPath: "body",
    mapper: TagUpdate,
};
const name1 = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String",
        },
    },
};
const avatar = {
    parameterPath: ["options", "avatar"],
    mapper: {
        serializedName: "avatar",
        type: {
            name: "Stream",
        },
    },
};
const resthookSignatureKey = {
    parameterPath: ["options", "resthookSignatureKey"],
    mapper: {
        serializedName: "resthookSignatureKey",
        type: {
            name: "String",
        },
    },
};
const name2 = {
    parameterPath: ["options", "name"],
    mapper: {
        serializedName: "name",
        type: {
            name: "String",
        },
    },
};
const validationToolConfig = {
    parameterPath: ["options", "validationToolConfig"],
    mapper: ValidationToolConfig,
};
const role = {
    parameterPath: ["options", "role"],
    mapper: {
        serializedName: "role",
        type: {
            name: "String",
        },
    },
};
const body35 = {
    parameterPath: "body",
    mapper: OrganizationMembershipUpdate,
};
const status = {
    parameterPath: ["options", "status"],
    mapper: {
        serializedName: "status",
        type: {
            name: "String",
        },
    },
};
const body36 = {
    parameterPath: "body",
    mapper: InvitationCreate,
};
const body37 = {
    parameterPath: "body",
    mapper: InvitationUpdate,
};
const token = {
    parameterPath: "token",
    mapper: {
        serializedName: "token",
        required: true,
        type: {
            name: "String",
        },
    },
};
const body38 = {
    parameterPath: "body",
    mapper: InvitationResponse,
};
const body39 = {
    parameterPath: "body",
    mapper: ApiUserCreate,
};
const body40 = {
    parameterPath: "body",
    mapper: ApiUserUpdate,
};
const body41 = {
    parameterPath: "body",
    mapper: ResthookSubscriptionCreate,
};
const id1 = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "Number",
        },
    },
};
const body42 = {
    parameterPath: "body",
    mapper: ResthookSubscriptionUpdate,
};
const xHookSecret = {
    parameterPath: "xHookSecret",
    mapper: {
        serializedName: "X-Hook-Secret",
        required: true,
        type: {
            name: "String",
        },
    },
};
const body43 = {
    parameterPath: "body",
    mapper: ResumeSearchParameters,
};
const limit1 = {
    parameterPath: ["options", "limit"],
    mapper: {
        constraints: {
            InclusiveMaximum: 50,
            InclusiveMinimum: 1,
        },
        serializedName: "limit",
        type: {
            name: "Number",
        },
    },
};
const body44 = {
    parameterPath: "body",
    mapper: ResumeSearchConfig,
};
const body45 = {
    parameterPath: ["options", "body"],
    mapper: Paths1Czpnk1V3ResumeSearchEmbedPostRequestbodyContentApplicationJsonSchema,
};
const resume = {
    parameterPath: "resume",
    mapper: {
        serializedName: "resume",
        required: true,
        type: {
            name: "String",
        },
    },
};
const jobDescription = {
    parameterPath: "jobDescription",
    mapper: {
        serializedName: "job_description",
        required: true,
        type: {
            name: "String",
        },
    },
};
const index = {
    parameterPath: ["options", "index"],
    mapper: {
        serializedName: "index",
        type: {
            name: "String",
        },
    },
};
const searchExpression = {
    parameterPath: ["options", "searchExpression"],
    mapper: {
        serializedName: "search_expression",
        type: {
            name: "String",
        },
    },
};
const jobTitlesWeight = {
    parameterPath: ["options", "jobTitlesWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0,
        },
        serializedName: "job_titles_weight",
        type: {
            name: "Number",
        },
    },
};
const yearsExperienceWeight = {
    parameterPath: ["options", "yearsExperienceWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0,
        },
        serializedName: "years_experience_weight",
        type: {
            name: "Number",
        },
    },
};
const locationsWeight = {
    parameterPath: ["options", "locationsWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0,
        },
        serializedName: "locations_weight",
        type: {
            name: "Number",
        },
    },
};
const languagesWeight = {
    parameterPath: ["options", "languagesWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0,
        },
        serializedName: "languages_weight",
        type: {
            name: "Number",
        },
    },
};
const skillsWeight = {
    parameterPath: ["options", "skillsWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0,
        },
        serializedName: "skills_weight",
        type: {
            name: "Number",
        },
    },
};
const educationWeight = {
    parameterPath: ["options", "educationWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0,
        },
        serializedName: "education_weight",
        type: {
            name: "Number",
        },
    },
};
const searchExpressionWeight = {
    parameterPath: ["options", "searchExpressionWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0,
        },
        serializedName: "search_expression_weight",
        type: {
            name: "Number",
        },
    },
};
const socCodesWeight = {
    parameterPath: ["options", "socCodesWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0,
        },
        serializedName: "soc_codes_weight",
        type: {
            name: "Number",
        },
    },
};
const managementLevelWeight = {
    parameterPath: ["options", "managementLevelWeight"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1,
            InclusiveMinimum: 0,
        },
        serializedName: "management_level_weight",
        type: {
            name: "Number",
        },
    },
};
const jobTitles = {
    parameterPath: "jobTitles",
    mapper: {
        serializedName: "job_titles",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
    collectionFormat: "Multi",
};
const skills = {
    parameterPath: "skills",
    mapper: {
        serializedName: "skills",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
    collectionFormat: "Multi",
};
const body46 = {
    parameterPath: "body",
    mapper: JobDescriptionSearchParameters,
};
const body47 = {
    parameterPath: "body",
    mapper: JobDescriptionSearchConfig,
};
const body48 = {
    parameterPath: ["options", "body"],
    mapper: PathsM3DzbgV3JobDescriptionSearchEmbedPostRequestbodyContentApplicationJsonSchema,
};
const documentType = {
    parameterPath: ["options", "documentType"],
    mapper: {
        serializedName: "document_type",
        type: {
            name: "String",
        },
    },
};
const body49 = {
    parameterPath: "body",
    mapper: IndexCreate,
};
const body50 = {
    parameterPath: "body",
    mapper: IndexUpdate,
};
const name3 = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String",
        },
    },
};
const body51 = {
    parameterPath: "body",
    mapper: PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema,
};

class AffindaAPI extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AffindaAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials,
        };
        const packageDetails = `azsdk-js-affinda/7.4.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix,
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://{region}.affinda.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName,
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge,
                },
            }));
        }
        // Assigning values to Constant parameters
        this.region = options.region || "api";
    }
    /**
     * Returns your workspaces.
     * @param organization Filter by organization.
     * @param options The options parameters.
     */
    getAllWorkspaces(organization, options) {
        return this.sendOperationRequest({ organization, options }, getAllWorkspacesOperationSpec);
    }
    /**
     * Create a workspace
     * @param body Workspace to create
     * @param options The options parameters.
     */
    createWorkspace(body, options) {
        return this.sendOperationRequest({ body, options }, createWorkspaceOperationSpec);
    }
    /**
     * Return a specific workspace.
     * @param identifier Workspace's identifier
     * @param options The options parameters.
     */
    getWorkspace(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getWorkspaceOperationSpec);
    }
    /**
     * Update a workspace.
     * @param identifier Workspace's identifier
     * @param body Workspace data to update
     * @param options The options parameters.
     */
    updateWorkspace(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, updateWorkspaceOperationSpec);
    }
    /**
     * Deletes the specified workspace from the database.
     * @param identifier Workspace's identifier
     * @param options The options parameters.
     */
    deleteWorkspace(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteWorkspaceOperationSpec);
    }
    /**
     * Return monthly credits consumption of a workspace.
     * @param identifier Workspace's identifier
     * @param options The options parameters.
     */
    getUsageByWorkspace(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getUsageByWorkspaceOperationSpec);
    }
    /**
     * Returns the memberships of your workspaces.
     * @param options The options parameters.
     */
    getAllWorkspaceMemberships(options) {
        return this.sendOperationRequest({ options }, getAllWorkspaceMembershipsOperationSpec);
    }
    /**
     * Create a workspace membership.
     * @param body
     * @param options The options parameters.
     */
    createWorkspaceMembership(body, options) {
        return this.sendOperationRequest({ body, options }, createWorkspaceMembershipOperationSpec);
    }
    /**
     * Return a specific workspace membership.
     * @param identifier Workspace membership's identifier.
     * @param options The options parameters.
     */
    getWorkspaceMembership(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getWorkspaceMembershipOperationSpec);
    }
    /**
     * Remove an user from a workspace.
     * @param identifier Workspace membership's identifier.
     * @param options The options parameters.
     */
    deleteWorkspaceMembership(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteWorkspaceMembershipOperationSpec);
    }
    /**
     * Returns your collections.
     * @param workspace Filter by workspace.
     * @param options The options parameters.
     */
    getAllCollections(workspace, options) {
        return this.sendOperationRequest({ workspace, options }, getAllCollectionsOperationSpec);
    }
    /**
     * Create a collection
     * @param body
     * @param options The options parameters.
     */
    createCollection(body, options) {
        return this.sendOperationRequest({ body, options }, createCollectionOperationSpec);
    }
    /**
     * Return a specific collection.
     * @param identifier Collection's identifier
     * @param options The options parameters.
     */
    getCollection(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getCollectionOperationSpec);
    }
    /**
     * Update data of a collection.
     * @param identifier Collection's identifier
     * @param body Collection data to update
     * @param options The options parameters.
     */
    updateCollection(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, updateCollectionOperationSpec);
    }
    /**
     * Deletes the specified collection from the database.
     * @param identifier Collection's identifier
     * @param options The options parameters.
     */
    deleteCollection(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteCollectionOperationSpec);
    }
    /**
     * Create data field for a collection along with a new data point.
     * @param identifier Collection's identifier
     * @param body The data field and data point to be created.
     * @param options The options parameters.
     */
    createDataFieldForCollection(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, createDataFieldForCollectionOperationSpec);
    }
    /**
     * Get a data field for a collection assosciated with a data point
     * @param identifier Collection's identifier
     * @param datapointIdentifier Datapoint's identifier
     * @param options The options parameters.
     */
    getDataFieldForCollection(identifier, datapointIdentifier, options) {
        return this.sendOperationRequest({ identifier, datapointIdentifier, options }, getDataFieldForCollectionOperationSpec);
    }
    /**
     * Update data field for a collection assosciated with a data point
     * @param identifier Collection's identifier
     * @param datapointIdentifier Datapoint's identifier
     * @param body Data field properties to update
     * @param options The options parameters.
     */
    updateDataFieldForCollection(identifier, datapointIdentifier, body, options) {
        return this.sendOperationRequest({ identifier, datapointIdentifier, body, options }, updateDataFieldForCollectionOperationSpec);
    }
    /**
     * Return monthly credits consumption of a collection.
     * @param identifier Collection's identifier
     * @param options The options parameters.
     */
    getUsageByCollection(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getUsageByCollectionOperationSpec);
    }
    /**
     * Returns all the document summaries for that user, limited to 300 per page.
     * @param options The options parameters.
     */
    getAllDocuments(options) {
        return this.sendOperationRequest({ options }, getAllDocumentsOperationSpec);
    }
    /**
     * Uploads a document for parsing. When successful, returns an `identifier` in the response for
     * subsequent use with the [/documents/{identifier}](#get-/v3/documents/-identifier-) endpoint to check
     * processing status and retrieve results.<br/>
     * @param options The options parameters.
     */
    createDocument(options) {
        return this.sendOperationRequest({ options }, createDocumentOperationSpec);
    }
    /**
     * Return a specific document.
     * @param identifier Document's identifier
     * @param options The options parameters.
     */
    getDocument(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getDocumentOperationSpec);
    }
    /**
     * Update file name, expiry time, or move to another collection, etc.
     * @param identifier Document's identifier
     * @param body Document data to update
     * @param options The options parameters.
     */
    updateDocument(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, updateDocumentOperationSpec);
    }
    /**
     * Deletes the specified document from the database.
     * @param identifier Document's identifier
     * @param options The options parameters.
     */
    deleteDocument(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteDocumentOperationSpec);
    }
    /**
     * Update data of a document.
     * Only applicable for resumes and job descriptions. For other document types, please use the `PATCH
     * /annotations/{id}` endpoint or the `POST /annotations/batch_update` endpoint.
     * @param identifier Resume or Job Description identifier
     * @param body Resume data to update
     * @param options The options parameters.
     */
    updateDocumentData(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, updateDocumentDataOperationSpec);
    }
    /**
     * Add a tag to documents.
     * Tags are used to group documents together.
     * Tags can be used to filter documents.
     *
     * @param body Specify the tag and the documents to tag
     * @param options The options parameters.
     */
    batchAddTag(body, options) {
        return this.sendOperationRequest({ body, options }, batchAddTagOperationSpec);
    }
    /**
     * Remove a tag from documents.
     * @param body Specify the tag and the documents to remove the tag from
     * @param options The options parameters.
     */
    batchRemoveTag(body, options) {
        return this.sendOperationRequest({ body, options }, batchRemoveTagOperationSpec);
    }
    /**
     * Returns the validation results of a document.
     * @param document Filter by document.
     * @param options The options parameters.
     */
    getAllValidationResults(document, options) {
        return this.sendOperationRequest({ document, options }, getAllValidationResultsOperationSpec);
    }
    /**
     * Create a validation result.
     * @param body
     * @param options The options parameters.
     */
    createValidationResult(body, options) {
        return this.sendOperationRequest({ body, options }, createValidationResultOperationSpec);
    }
    /**
     * Return a specific validation result.
     * @param id Validation result's ID.
     * @param options The options parameters.
     */
    getValidationResult(id, options) {
        return this.sendOperationRequest({ id, options }, getValidationResultOperationSpec);
    }
    /**
     * Update a validation result.
     * @param id Validation result's ID.
     * @param body Validation result data to update
     * @param options The options parameters.
     */
    updateValidationResult(id, body, options) {
        return this.sendOperationRequest({ id, body, options }, updateValidationResultOperationSpec);
    }
    /**
     * Remove validation result.
     * @param id Validation result's ID.
     * @param options The options parameters.
     */
    deleteValidationResult(id, options) {
        return this.sendOperationRequest({ id, options }, deleteValidationResultOperationSpec);
    }
    /**
     * Batch create validation results.
     * @param body Array of ValidationResultCreate
     * @param options The options parameters.
     */
    batchCreateValidationResults(body, options) {
        return this.sendOperationRequest({ body, options }, batchCreateValidationResultsOperationSpec);
    }
    /**
     * Batch delete validation results
     * @param body
     * @param options The options parameters.
     */
    batchDeleteValidationResults(body, options) {
        return this.sendOperationRequest({ body, options }, batchDeleteValidationResultsOperationSpec);
    }
    /**
     * Returns all the document splitters visible to the user.
     * @param options The options parameters.
     */
    getAllDocumentSplitters(options) {
        return this.sendOperationRequest({ options }, getAllDocumentSplittersOperationSpec);
    }
    /**
     * Return a specific document splitter.
     * @param identifier Document splitter's identifier
     * @param options The options parameters.
     */
    getDocumentSplitter(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getDocumentSplitterOperationSpec);
    }
    /**
     * Split / merge / rotate / delete pages of a document.
     * Documents with multiple pages can be splitted into multiple documents, or merged into one document.
     * Each page can also be rotated. Edit operations will trigger re-parsing of the documents involved.
     *
     * @param identifier Document's identifier
     * @param body Describe how the pages should be edited
     * @param options The options parameters.
     */
    editDocumentPages(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, editDocumentPagesOperationSpec);
    }
    /**
     * Returns your custom extractors as well as Affinda's off-the-shelf extractors.
     * @param organization Filter by organization.
     * @param options The options parameters.
     */
    getAllExtractors(organization, options) {
        return this.sendOperationRequest({ organization, options }, getAllExtractorsOperationSpec);
    }
    /**
     * Create a custom extractor.
     * @param options The options parameters.
     */
    createExtractor(options) {
        return this.sendOperationRequest({ options }, createExtractorOperationSpec);
    }
    /**
     * Return a specific extractor.
     * @param identifier Extractor's identifier
     * @param options The options parameters.
     */
    getExtractor(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getExtractorOperationSpec);
    }
    /**
     * Update data of an extractor.
     * @param identifier Extractor's identifier
     * @param body Extractor data to update
     * @param options The options parameters.
     */
    updateExtractor(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, updateExtractorOperationSpec);
    }
    /**
     * Deletes the specified extractor from the database.
     * @param identifier Extractor's identifier
     * @param options The options parameters.
     */
    deleteExtractor(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteExtractorOperationSpec);
    }
    /**
     * Returns your custom data points as well as Affinda's off-the-shelf data points.
     * @param options The options parameters.
     */
    getAllDataPoints(options) {
        return this.sendOperationRequest({ options }, getAllDataPointsOperationSpec);
    }
    /**
     * Create a custom data point.
     * @param options The options parameters.
     */
    createDataPoint(options) {
        return this.sendOperationRequest({ options }, createDataPointOperationSpec);
    }
    /**
     * Return a specific data point.
     * @param identifier Data point's identifier
     * @param options The options parameters.
     */
    getDataPoint(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getDataPointOperationSpec);
    }
    /**
     * Update data of a data point.
     * @param identifier DataPoint's identifier
     * @param body Data point to update
     * @param options The options parameters.
     */
    updateDataPoint(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, updateDataPointOperationSpec);
    }
    /**
     * Deletes the specified data point from the database.
     * @param identifier DataPoint's identifier
     * @param options The options parameters.
     */
    deleteDataPoint(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteDataPointOperationSpec);
    }
    /**
     * Returns available choices for a specific enum data point.
     * @param dataPoint The data point to get choices for.
     * @param collection The collection to get choices for.
     * @param options The options parameters.
     */
    getDataPointChoices(dataPoint, collection, options) {
        return this.sendOperationRequest({ dataPoint, collection, options }, getDataPointChoicesOperationSpec);
    }
    /**
     * Create a custom data point choice.
     * @param options The options parameters.
     */
    createDataPointChoice(options) {
        return this.sendOperationRequest({ options }, createDataPointChoiceOperationSpec);
    }
    /**
     * Return a specific data point choice.
     * @param id Data point choice's ID
     * @param options The options parameters.
     */
    getDataPointChoice(id, options) {
        return this.sendOperationRequest({ id, options }, getDataPointChoiceOperationSpec);
    }
    /**
     * Update data of a data point choice.
     * @param id Data point choice's ID
     * @param body Data point choice to update
     * @param options The options parameters.
     */
    updateDataPointChoice(id, body, options) {
        return this.sendOperationRequest({ id, body, options }, updateDataPointChoiceOperationSpec);
    }
    /**
     * Deletes the specified data point choice from the database.
     * @param id Data point choice's ID
     * @param options The options parameters.
     */
    deleteDataPointChoice(id, options) {
        return this.sendOperationRequest({ id, options }, deleteDataPointChoiceOperationSpec);
    }
    /**
     * Replace choices of a data point. Existing choices and incoming choices are matched base on their
     * `value`. New `value` will be created, existing `value` will be updated, and `value` not in incoming
     * choices will be deleted.
     * @param options The options parameters.
     */
    replaceDataPointChoices(options) {
        return this.sendOperationRequest({ options }, replaceDataPointChoicesOperationSpec);
    }
    /**
     * Returns your annotations.
     * @param document Filter by document.
     * @param options The options parameters.
     */
    getAllAnnotations(document, options) {
        return this.sendOperationRequest({ document, options }, getAllAnnotationsOperationSpec);
    }
    /**
     * Create a annotation
     * @param body
     * @param options The options parameters.
     */
    createAnnotation(body, options) {
        return this.sendOperationRequest({ body, options }, createAnnotationOperationSpec);
    }
    /**
     * Return a specific annotation.
     * @param id Annotation's ID
     * @param options The options parameters.
     */
    getAnnotation(id, options) {
        return this.sendOperationRequest({ id, options }, getAnnotationOperationSpec);
    }
    /**
     * Update data of an annotation.
     * @param id Annotation's ID
     * @param body Annotation data to update
     * @param options The options parameters.
     */
    updateAnnotation(id, body, options) {
        return this.sendOperationRequest({ id, body, options }, updateAnnotationOperationSpec);
    }
    /**
     * Deletes the specified annotation from the database.
     * @param id Annotation's ID
     * @param options The options parameters.
     */
    deleteAnnotation(id, options) {
        return this.sendOperationRequest({ id, options }, deleteAnnotationOperationSpec);
    }
    /**
     * Batch create annotations
     * @param body Array of AnnotationCreate
     * @param options The options parameters.
     */
    batchCreateAnnotations(body, options) {
        return this.sendOperationRequest({ body, options }, batchCreateAnnotationsOperationSpec);
    }
    /**
     * Batch update annotations
     * @param body Array of AnnotationBatchUpdate
     * @param options The options parameters.
     */
    batchUpdateAnnotations(body, options) {
        return this.sendOperationRequest({ body, options }, batchUpdateAnnotationsOperationSpec);
    }
    /**
     * Batch delete annotations
     * @param body Array of annotation IDs to be deleted
     * @param options The options parameters.
     */
    batchDeleteAnnotations(body, options) {
        return this.sendOperationRequest({ body, options }, batchDeleteAnnotationsOperationSpec);
    }
    /**
     * Create a custom mapping data source.
     * @param body A mapping data source is used to map from raw data found by our AI models to records in
     *             your database.
     * @param options The options parameters.
     */
    createMappingDataSource(body, options) {
        return this.sendOperationRequest({ body, options }, createMappingDataSourceOperationSpec);
    }
    /**
     * Returns the list of all custom mapping data sources.
     * @param options The options parameters.
     */
    listMappingDataSources(options) {
        return this.sendOperationRequest({ options }, listMappingDataSourcesOperationSpec);
    }
    /**
     * Return a specific mapping data source.
     * @param identifier Mapping data source's identifier
     * @param options The options parameters.
     */
    getMappingDataSource(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getMappingDataSourceOperationSpec);
    }
    /**
     * Delete the specified mapping data source from the database.
     * @param identifier Mapping data source's identifier
     * @param options The options parameters.
     */
    deleteMappingDataSource(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteMappingDataSourceOperationSpec);
    }
    /**
     * Returns the list of all values in a mapping data source
     * @param identifier Mapping data source's identifier
     * @param options The options parameters.
     */
    listMappingDataSourceValues(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, listMappingDataSourceValuesOperationSpec);
    }
    /**
     * Replaces the list of all values in a mapping data source
     * @param identifier Mapping data source's identifier
     * @param body Array of AnyObject
     * @param options The options parameters.
     */
    replaceMappingDataSourceValues(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, replaceMappingDataSourceValuesOperationSpec);
    }
    /**
     * Adds a value to a mapping data source
     * @param identifier Mapping data source's identifier
     * @param body Any object
     * @param options The options parameters.
     */
    addMappingDataSourceValue(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, addMappingDataSourceValueOperationSpec);
    }
    /**
     * Return a specific mapping dta source value.
     * @param identifier Mapping data source's identifier
     * @param value Mapping Data Source Value's value
     * @param options The options parameters.
     */
    getMappingDataSourceValue(identifier, value, options) {
        return this.sendOperationRequest({ identifier, value, options }, getMappingDataSourceValueOperationSpec);
    }
    /**
     * Delete the specified mapping data source value from the database.
     * @param identifier Mapping data source's identifier
     * @param value Mapping Data Source Value's value
     * @param options The options parameters.
     */
    deleteMappingDataSourceValue(identifier, value, options) {
        return this.sendOperationRequest({ identifier, value, options }, deleteMappingDataSourceValueOperationSpec);
    }
    /**
     * Create a custom mapping.
     * @param body
     * @param options The options parameters.
     */
    createMapping(body, options) {
        return this.sendOperationRequest({ body, options }, createMappingOperationSpec);
    }
    /**
     * Returns the list of all custom data mappings.
     * @param mappingDataSource Mapping data source's identifier
     * @param options The options parameters.
     */
    listMappings(mappingDataSource, options) {
        return this.sendOperationRequest({ mappingDataSource, options }, listMappingsOperationSpec);
    }
    /**
     * Return a specific mapping.
     * @param identifier Mapping's identifier
     * @param options The options parameters.
     */
    getMapping(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getMappingOperationSpec);
    }
    /**
     * Delete the specified mapping from the database.
     * @param identifier Mapping's identifier
     * @param options The options parameters.
     */
    deleteMapping(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteMappingOperationSpec);
    }
    /**
     * Updates a specific mapping.
     * @param identifier Mapping's identifier
     * @param body
     * @param options The options parameters.
     */
    updateMapping(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, updateMappingOperationSpec);
    }
    /**
     * Returns your tags.
     * @param options The options parameters.
     */
    getAllTags(options) {
        return this.sendOperationRequest({ options }, getAllTagsOperationSpec);
    }
    /**
     * Create a tag
     * @param body
     * @param options The options parameters.
     */
    createTag(body, options) {
        return this.sendOperationRequest({ body, options }, createTagOperationSpec);
    }
    /**
     * Return a specific tag.
     * @param id Tag's ID
     * @param options The options parameters.
     */
    getTag(id, options) {
        return this.sendOperationRequest({ id, options }, getTagOperationSpec);
    }
    /**
     * Update data of an tag.
     * @param id Tag's ID
     * @param body Tag data to update
     * @param options The options parameters.
     */
    updateTag(id, body, options) {
        return this.sendOperationRequest({ id, body, options }, updateTagOperationSpec);
    }
    /**
     * Deletes the specified tag from the database.
     * @param id Tag's ID
     * @param options The options parameters.
     */
    deleteTag(id, options) {
        return this.sendOperationRequest({ id, options }, deleteTagOperationSpec);
    }
    /**
     * Returns all the organizations
     * @param options The options parameters.
     */
    getAllOrganizations(options) {
        return this.sendOperationRequest({ options }, getAllOrganizationsOperationSpec);
    }
    /**
     * Create a new organization.
     * @param name
     * @param options The options parameters.
     */
    createOrganization(name, options) {
        return this.sendOperationRequest({ name, options }, createOrganizationOperationSpec);
    }
    /**
     * Get detail of an organization.
     * @param identifier Organization identifier.
     * @param options The options parameters.
     */
    getOrganization(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getOrganizationOperationSpec);
    }
    /**
     * Update the detail of an organization.
     * @param identifier Organization identifier.
     * @param options The options parameters.
     */
    updateOrganization(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, updateOrganizationOperationSpec);
    }
    /**
     * Delete the specified organization from the database.
     * @param identifier Organization identifier.
     * @param options The options parameters.
     */
    deleteOrganization(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteOrganizationOperationSpec);
    }
    /**
     * Returns all the organization memberships
     * @param options The options parameters.
     */
    getAllOrganizationMemberships(options) {
        return this.sendOperationRequest({ options }, getAllOrganizationMembershipsOperationSpec);
    }
    /**
     * Get detail of an organization membership.
     * @param identifier Membership identifier.
     * @param options The options parameters.
     */
    getOrganizationMembership(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getOrganizationMembershipOperationSpec);
    }
    /**
     * The admin users can use this endpoint to update the role of the members within their organization.
     * @param identifier Membership identifier.
     * @param body
     * @param options The options parameters.
     */
    updateOrganizationMembership(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, updateOrganizationMembershipOperationSpec);
    }
    /**
     * The admin users can use this endpoint to remove member from their organization. Other users can also
     * use this to leave their organization.
     * @param identifier Membership identifier.
     * @param options The options parameters.
     */
    deleteOrganizationMembership(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteOrganizationMembershipOperationSpec);
    }
    /**
     * Get list of all invitations you created or sent to you.
     * @param options The options parameters.
     */
    getAllInvitations(options) {
        return this.sendOperationRequest({ options }, getAllInvitationsOperationSpec);
    }
    /**
     * Create a new invitation.
     * @param body Invitation to create.
     * @param options The options parameters.
     */
    createInvitation(body, options) {
        return this.sendOperationRequest({ body, options }, createInvitationOperationSpec);
    }
    /**
     * Get detail of an invitation.
     * @param identifier Invitation identifier.
     * @param options The options parameters.
     */
    getInvitation(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, getInvitationOperationSpec);
    }
    /**
     * Update the detail of an invitation.
     * @param identifier Invitation identifier.
     * @param body
     * @param options The options parameters.
     */
    updateInvitation(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, updateInvitationOperationSpec);
    }
    /**
     * Delete the specified invitation from the database.
     * @param identifier Invitation identifier.
     * @param options The options parameters.
     */
    deleteInvitation(identifier, options) {
        return this.sendOperationRequest({ identifier, options }, deleteInvitationOperationSpec);
    }
    /**
     * Get detail of an invitation using a secret token. This allows users who have not registered/logged
     * in to view the invitation.
     * @param token Invitation token.
     * @param options The options parameters.
     */
    getInvitationByToken(token, options) {
        return this.sendOperationRequest({ token, options }, getInvitationByTokenOperationSpec);
    }
    /**
     * Choose to accept or decline an invitation.
     * @param token Invitation token.
     * @param body
     * @param options The options parameters.
     */
    respondToInvitation(token, body, options) {
        return this.sendOperationRequest({ token, body, options }, respondToInvitationOperationSpec);
    }
    /**
     * Returns your API users.
     * @param options The options parameters.
     */
    getAllApiUsers(options) {
        return this.sendOperationRequest({ options }, getAllApiUsersOperationSpec);
    }
    /**
     * Create an API user
     * @param body
     * @param options The options parameters.
     */
    createApiUser(body, options) {
        return this.sendOperationRequest({ body, options }, createApiUserOperationSpec);
    }
    /**
     * Return a specific API user.
     * @param id API user's ID
     * @param options The options parameters.
     */
    getApiUser(id, options) {
        return this.sendOperationRequest({ id, options }, getApiUserOperationSpec);
    }
    /**
     * Update data of an API user.
     * @param id API user's ID
     * @param body API user to update
     * @param options The options parameters.
     */
    updateApiUser(id, body, options) {
        return this.sendOperationRequest({ id, body, options }, updateApiUserOperationSpec);
    }
    /**
     * Deletes the specified API user from the database.
     * @param id API user's ID
     * @param options The options parameters.
     */
    deleteApiUser(id, options) {
        return this.sendOperationRequest({ id, options }, deleteApiUserOperationSpec);
    }
    /**
     * Regenerate API key for an API user.
     * @param id API user's ID
     * @param options The options parameters.
     */
    regenerateApiKeyForApiUser(id, options) {
        return this.sendOperationRequest({ id, options }, regenerateApiKeyForApiUserOperationSpec);
    }
    /**
     * Returns your resthook subscriptions.
     * @param options The options parameters.
     */
    getAllResthookSubscriptions(options) {
        return this.sendOperationRequest({ options }, getAllResthookSubscriptionsOperationSpec);
    }
    /**
     * After a subscription is successfully created, we'll send a POST request to your target URL with a
     * `X-Hook-Secret` header. <br />
     * You need to response to this request with a 200 status code to confirm your subscribe intention. <br
     * />
     * Then, you need to use the `X-Hook-Secret` to activate the subscription using the
     * [/resthook_subscriptions/activate](#post-/v3/resthook_subscriptions/activate) endpoint. <br />
     * For more information and detailed instructions, [see our webhooks documentation
     * here.](https://docs.affinda.com/docs/webhooks)
     * @param body
     * @param options The options parameters.
     */
    createResthookSubscription(body, options) {
        return this.sendOperationRequest({ body, options }, createResthookSubscriptionOperationSpec);
    }
    /**
     * Return a specific resthook subscription.
     * @param id Resthook subscription's ID
     * @param options The options parameters.
     */
    getResthookSubscription(id, options) {
        return this.sendOperationRequest({ id, options }, getResthookSubscriptionOperationSpec);
    }
    /**
     * Update data of a resthook subscription.
     * @param id ResthookSubscription's ID
     * @param body ResthookSubscription data to update
     * @param options The options parameters.
     */
    updateResthookSubscription(id, body, options) {
        return this.sendOperationRequest({ id, body, options }, updateResthookSubscriptionOperationSpec);
    }
    /**
     * Deletes the specified resthook subscription from the database.
     * @param id ResthookSubscription's ID
     * @param options The options parameters.
     */
    deleteResthookSubscription(id, options) {
        return this.sendOperationRequest({ id, options }, deleteResthookSubscriptionOperationSpec);
    }
    /**
     * After creating a subscription, we'll send a POST request to your target URL with a `X-Hook-Secret`
     * header. <br />
     * You should response to this with a 200 status code, and use the value of the `X-Hook-Secret` header
     * that you received to activate the subscription using this endpoint.
     * @param xHookSecret The secret received when creating a subscription.
     * @param options The options parameters.
     */
    activateResthookSubscription(xHookSecret, options) {
        return this.sendOperationRequest({ xHookSecret, options }, activateResthookSubscriptionOperationSpec);
    }
    /**
     * Returns the list of searchable occupation groups.
     * @param options The options parameters.
     */
    listOccupationGroups(options) {
        return this.sendOperationRequest({ options }, listOccupationGroupsOperationSpec);
    }
    /**
     * Searches through parsed resumes. Users have 3 options to create a search:<br /><br /> 1.	Match to a
     * job description - a parsed job description is used to find candidates that suit it<br /> 2.	Match to
     * a resume - a parsed resume is used to find other candidates that have similar attributes<br /> 3.
     * Search using custom criteria<br /><br /> Users should only populate 1 of jobDescription, resume or
     * the custom criteria.
     * @param body Search parameters
     * @param options The options parameters.
     */
    createResumeSearch(body, options) {
        return this.sendOperationRequest({ body, options }, createResumeSearchOperationSpec);
    }
    /**
     * This contains more detailed information about the matching score of the search criteria, or which
     * search criteria is missing in this resume.
     * The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
     * @param identifier Resume identifier
     * @param body Search parameters
     * @param options The options parameters.
     */
    getResumeSearchDetail(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, getResumeSearchDetailOperationSpec);
    }
    /**
     * Return configurations such as which fields can be displayed in the logged in user's embeddable
     * resume search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param options The options parameters.
     */
    getResumeSearchConfig(options) {
        return this.sendOperationRequest({ options }, getResumeSearchConfigOperationSpec);
    }
    /**
     * Update configurations such as which fields can be displayed in the logged in user's embeddable
     * resume search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param body
     * @param options The options parameters.
     */
    updateResumeSearchConfig(body, options) {
        return this.sendOperationRequest({ body, options }, updateResumeSearchConfigOperationSpec);
    }
    /**
     * Create and return a signed URL of the resume search tool which then can be embedded on a web page.
     * An optional parameter `config_override` can be passed to override the user-level configurations of
     * the embeddable resume search tool.
     * @param options The options parameters.
     */
    createResumeSearchEmbedUrl(options) {
        return this.sendOperationRequest({ options }, createResumeSearchEmbedUrlOperationSpec);
    }
    /**
     * Get the matching score between a resume and a job description. The score ranges between 0 and 1,
     * with 0 being not a match at all, and 1 being perfect match.<br/> Note, this score will not directly
     * match the score returned from POST
     * [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-).
     * @param resume Identify the resume to match.
     * @param jobDescription Identify the job description to match.
     * @param options The options parameters.
     */
    getResumeSearchMatch(resume, jobDescription, options) {
        return this.sendOperationRequest({ resume, jobDescription, options }, getResumeSearchMatchOperationSpec);
    }
    /**
     * Provided one or more job titles, get related suggestions for your search.
     * @param jobTitles Job title to query suggestions for
     * @param options The options parameters.
     */
    getResumeSearchSuggestionJobTitle(jobTitles, options) {
        return this.sendOperationRequest({ jobTitles, options }, getResumeSearchSuggestionJobTitleOperationSpec);
    }
    /**
     * Provided one or more skills, get related suggestions for your search.
     * @param skills Skill to query suggestions for
     * @param options The options parameters.
     */
    getResumeSearchSuggestionSkill(skills, options) {
        return this.sendOperationRequest({ skills, options }, getResumeSearchSuggestionSkillOperationSpec);
    }
    /**
     * Searches through parsed job descriptions. You can search with custom criterias or a resume.
     * @param body Search parameters
     * @param options The options parameters.
     */
    createJobDescriptionSearch(body, options) {
        return this.sendOperationRequest({ body, options }, createJobDescriptionSearchOperationSpec);
    }
    /**
     * This contains more detailed information about the matching score of the search criteria, or which
     * search criteria is missing in this job description.
     * The `identifier` is the unique ID returned via the
     * [/job_description_search](#post-/job_description_search) endpoint.
     * @param identifier Job Description identifier
     * @param body Search parameters
     * @param options The options parameters.
     */
    getJobDescriptionSearchDetail(identifier, body, options) {
        return this.sendOperationRequest({ identifier, body, options }, getJobDescriptionSearchDetailOperationSpec);
    }
    /**
     * Return configurations such as which fields can be displayed in the logged in user's embeddable job
     * description search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param options The options parameters.
     */
    getJobDescriptionSearchConfig(options) {
        return this.sendOperationRequest({ options }, getJobDescriptionSearchConfigOperationSpec);
    }
    /**
     * Update configurations such as which fields can be displayed in the logged in user's embeddable job
     * description search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param body
     * @param options The options parameters.
     */
    updateJobDescriptionSearchConfig(body, options) {
        return this.sendOperationRequest({ body, options }, updateJobDescriptionSearchConfigOperationSpec);
    }
    /**
     * Create and return a signed URL of the job description search tool which then can be embedded on a
     * web page. An optional parameter `config_override` can be passed to override the user-level
     * configurations of the embeddable search tool.
     * @param options The options parameters.
     */
    createJobDescriptionSearchEmbedUrl(options) {
        return this.sendOperationRequest({ options }, createJobDescriptionSearchEmbedUrlOperationSpec);
    }
    /**
     * Returns all the indexes
     * @param options The options parameters.
     */
    getAllIndexes(options) {
        return this.sendOperationRequest({ options }, getAllIndexesOperationSpec);
    }
    /**
     * Create an index for the search tool
     * @param body Index to create
     * @param options The options parameters.
     */
    createIndex(body, options) {
        return this.sendOperationRequest({ body, options }, createIndexOperationSpec);
    }
    /**
     * Updates the specified index
     * @param name Index name
     * @param body Index data to update
     * @param options The options parameters.
     */
    updateIndex(name, body, options) {
        return this.sendOperationRequest({ name, body, options }, updateIndexOperationSpec);
    }
    /**
     * Deletes the specified index from the database
     * @param name Index name
     * @param options The options parameters.
     */
    deleteIndex(name, options) {
        return this.sendOperationRequest({ name, options }, deleteIndexOperationSpec);
    }
    /**
     * Returns all the indexed documents for that index
     * @param name Index name
     * @param options The options parameters.
     */
    getAllIndexDocuments(name, options) {
        return this.sendOperationRequest({ name, options }, getAllIndexDocumentsOperationSpec);
    }
    /**
     * Create an indexed document for the search tool
     * @param name Index name
     * @param body Document to index
     * @param options The options parameters.
     */
    createIndexDocument(name, body, options) {
        return this.sendOperationRequest({ name, body, options }, createIndexDocumentOperationSpec);
    }
    /**
     * Delete the specified indexed document from the database
     * @param name Index name
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    deleteIndexDocument(name, identifier, options) {
        return this.sendOperationRequest({ name, identifier, options }, deleteIndexDocumentOperationSpec);
    }
    /**
     * Re-index a document.
     * This is relevant if you updated the document's data via the /annotations endpoint, and want to
     * refresh
     * the document's data in the search index.
     *
     * @param name Index name
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    reIndexDocument(name, identifier, options) {
        return this.sendOperationRequest({ name, identifier, options }, reIndexDocumentOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getAllWorkspacesOperationSpec = {
    path: "/v3/workspaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "Workspace" } },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [organization, name],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createWorkspaceOperationSpec = {
    path: "/v3/workspaces",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Workspace,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getWorkspaceOperationSpec = {
    path: "/v3/workspaces/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Workspace,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const updateWorkspaceOperationSpec = {
    path: "/v3/workspaces/{identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Workspace,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body1,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteWorkspaceOperationSpec = {
    path: "/v3/workspaces/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const getUsageByWorkspaceOperationSpec = {
    path: "/v3/workspaces/{identifier}/usage",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "UsageByWorkspace" },
                    },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [start, end],
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const getAllWorkspaceMembershipsOperationSpec = {
    path: "/v3/workspace_memberships",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PathsZ1JuagV3WorkspaceMembershipsGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        offset,
        limit,
        workspace,
        user,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createWorkspaceMembershipOperationSpec = {
    path: "/v3/workspace_memberships",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: WorkspaceMembership,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body2,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getWorkspaceMembershipOperationSpec = {
    path: "/v3/workspace_memberships/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceMembership,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const deleteWorkspaceMembershipOperationSpec = {
    path: "/v3/workspace_memberships/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const getAllCollectionsOperationSpec = {
    path: "/v3/collections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "Collection" } },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [workspace1],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createCollectionOperationSpec = {
    path: "/v3/collections",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Collection,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body3,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getCollectionOperationSpec = {
    path: "/v3/collections/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Collection,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const updateCollectionOperationSpec = {
    path: "/v3/collections/{identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Collection,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body4,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteCollectionOperationSpec = {
    path: "/v3/collections/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const createDataFieldForCollectionOperationSpec = {
    path: "/v3/collections/{identifier}/create_data_field",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DataField,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body5,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getDataFieldForCollectionOperationSpec = {
    path: "/v3/collections/{identifier}/fields/{datapoint_identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CollectionField,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [
        region,
        identifier,
        datapointIdentifier,
    ],
    headerParameters: [accept],
    serializer,
};
const updateDataFieldForCollectionOperationSpec = {
    path: "/v3/collections/{identifier}/fields/{datapoint_identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: CollectionField,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body6,
    urlParameters: [
        region,
        identifier,
        datapointIdentifier,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getUsageByCollectionOperationSpec = {
    path: "/v3/collections/{identifier}/usage",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "UsageByCollection" },
                    },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [start, end],
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const getAllDocumentsOperationSpec = {
    path: "/v3/documents",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PathsOxm5M7V3DocumentsGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        offset,
        limit,
        workspace,
        collection,
        state,
        tags,
        createdDt,
        search,
        ordering,
        includeData,
        exclude,
        inReview,
        failed,
        ready,
        validatable,
        hasChallenges,
        customIdentifier,
        compact,
        count,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createDocumentOperationSpec = {
    path: "/v3/documents",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Document,
        },
        201: {
            bodyMapper: Document,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    formDataParameters: [
        file,
        url,
        data,
        collection1,
        workspace2,
        wait,
        identifier1,
        customIdentifier1,
        fileName,
        expiryTime,
        language,
        rejectDuplicates,
        regionBias,
        lowPriority,
        compact1,
        deleteAfterParse,
        enableValidationTool,
    ],
    urlParameters: [region],
    headerParameters: [contentType1, accept1],
    serializer,
};
const getDocumentOperationSpec = {
    path: "/v3/documents/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Document,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [compact, format],
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const updateDocumentOperationSpec = {
    path: "/v3/documents/{identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Document,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body7,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteDocumentOperationSpec = {
    path: "/v3/documents/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const updateDocumentDataOperationSpec = {
    path: "/v3/documents/{identifier}/update_data",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Document,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body8,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const batchAddTagOperationSpec = {
    path: "/v3/documents/batch_add_tag",
    httpMethod: "POST",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body9,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const batchRemoveTagOperationSpec = {
    path: "/v3/documents/batch_remove_tag",
    httpMethod: "POST",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body10,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getAllValidationResultsOperationSpec = {
    path: "/v3/validation_results",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ValidationResult" },
                    },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [offset, limit, document],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createValidationResultOperationSpec = {
    path: "/v3/validation_results",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ValidationResult,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body11,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getValidationResultOperationSpec = {
    path: "/v3/validation_results/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ValidationResult,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const updateValidationResultOperationSpec = {
    path: "/v3/validation_results/{id}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ValidationResult,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body12,
    urlParameters: [region, id],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteValidationResultOperationSpec = {
    path: "/v3/validation_results/{id}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const batchCreateValidationResultsOperationSpec = {
    path: "/v3/validation_results/batch_create",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ValidationResult" },
                    },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body13,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const batchDeleteValidationResultsOperationSpec = {
    path: "/v3/validation_results/batch_delete",
    httpMethod: "POST",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body14,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getAllDocumentSplittersOperationSpec = {
    path: "/v3/document_splitters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "DocumentSplitter" },
                    },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        offset,
        limit,
        organization1,
        includePublic,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const getDocumentSplitterOperationSpec = {
    path: "/v3/document_splitters/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DocumentSplitter,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const editDocumentPagesOperationSpec = {
    path: "/v3/validate/{identifier}/split",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "Meta" } },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body15,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getAllExtractorsOperationSpec = {
    path: "/v3/extractors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "Extractor" } },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        organization,
        name,
        validatable,
        includePublicExtractors,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createExtractorOperationSpec = {
    path: "/v3/extractors",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Extractor,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body16,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getExtractorOperationSpec = {
    path: "/v3/extractors/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Extractor,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const updateExtractorOperationSpec = {
    path: "/v3/extractors/{identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Extractor,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body17,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteExtractorOperationSpec = {
    path: "/v3/extractors/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const getAllDataPointsOperationSpec = {
    path: "/v3/data_points",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "DataPoint" } },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        offset,
        limit,
        organization1,
        includePublic,
        extractor,
        slug,
        description,
        annotationContentType,
        identifier2,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createDataPointOperationSpec = {
    path: "/v3/data_points",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: DataPoint,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body18,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getDataPointOperationSpec = {
    path: "/v3/data_points/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataPoint,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const updateDataPointOperationSpec = {
    path: "/v3/data_points/{identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DataPoint,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body19,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteDataPointOperationSpec = {
    path: "/v3/data_points/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const getDataPointChoicesOperationSpec = {
    path: "/v3/data_point_choices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PathsMnwxgV3DataPointChoicesGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        offset,
        limit,
        search,
        dataPoint,
        collection2,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createDataPointChoiceOperationSpec = {
    path: "/v3/data_point_choices",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: DataPointChoice,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body20,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getDataPointChoiceOperationSpec = {
    path: "/v3/data_point_choices/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataPointChoice,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const updateDataPointChoiceOperationSpec = {
    path: "/v3/data_point_choices/{id}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DataPointChoice,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body21,
    urlParameters: [region, id],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteDataPointChoiceOperationSpec = {
    path: "/v3/data_point_choices/{id}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const replaceDataPointChoicesOperationSpec = {
    path: "/v3/data_point_choices/replace",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DataPointChoiceReplaceResponse,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body22,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getAllAnnotationsOperationSpec = {
    path: "/v3/annotations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Paths1D5Zg6MV3AnnotationsGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [document],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createAnnotationOperationSpec = {
    path: "/v3/annotations",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: AnnotationWithValidationResults,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body23,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getAnnotationOperationSpec = {
    path: "/v3/annotations/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Annotation,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const updateAnnotationOperationSpec = {
    path: "/v3/annotations/{id}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Annotation,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body24,
    urlParameters: [region, id],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteAnnotationOperationSpec = {
    path: "/v3/annotations/{id}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: AnotationDelete,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const batchCreateAnnotationsOperationSpec = {
    path: "/v3/annotations/batch_create",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "Annotation" } },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body25,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const batchUpdateAnnotationsOperationSpec = {
    path: "/v3/annotations/batch_update",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "Annotation" } },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body26,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const batchDeleteAnnotationsOperationSpec = {
    path: "/v3/annotations/batch_delete",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: BatchDeleteAnnotationsResponse,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body27,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const createMappingDataSourceOperationSpec = {
    path: "/v3/mapping_data_sources",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: MappingDataSource,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body28,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const listMappingDataSourcesOperationSpec = {
    path: "/v3/mapping_data_sources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Paths11QdcofV3MappingDataSourcesGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        name,
        offset,
        limit,
        workspace,
        organization1,
        identifier3,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const getMappingDataSourceOperationSpec = {
    path: "/v3/mapping_data_sources/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MappingDataSource,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const deleteMappingDataSourceOperationSpec = {
    path: "/v3/mapping_data_sources/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const listMappingDataSourceValuesOperationSpec = {
    path: "/v3/mapping_data_sources/{identifier}/values",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Paths1Qr7BnyV3MappingDataSourcesIdentifierValuesGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        offset,
        limit,
        search,
        annotation,
    ],
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const replaceMappingDataSourceValuesOperationSpec = {
    path: "/v3/mapping_data_sources/{identifier}/values",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } },
                    },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body29,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const addMappingDataSourceValueOperationSpec = {
    path: "/v3/mapping_data_sources/{identifier}/values",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: {
                type: { name: "Dictionary", value: { type: { name: "any" } } },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body30,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getMappingDataSourceValueOperationSpec = {
    path: "/v3/mapping_data_sources/{identifier}/values/{value}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: { name: "Dictionary", value: { type: { name: "any" } } },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier, value],
    headerParameters: [accept],
    serializer,
};
const deleteMappingDataSourceValueOperationSpec = {
    path: "/v3/mapping_data_sources/{identifier}/values/{value}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier, value],
    headerParameters: [accept],
    serializer,
};
const createMappingOperationSpec = {
    path: "/v3/mappings",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mapping,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body31,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const listMappingsOperationSpec = {
    path: "/v3/mappings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Paths1Dpvb2PV3MappingsGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        offset,
        limit,
        mappingDataSource,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const getMappingOperationSpec = {
    path: "/v3/mappings/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mapping,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const deleteMappingOperationSpec = {
    path: "/v3/mappings/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const updateMappingOperationSpec = {
    path: "/v3/mappings/{identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mapping,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body32,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getAllTagsOperationSpec = {
    path: "/v3/tags",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "Tag" } },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        name,
        offset,
        limit,
        workspace,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createTagOperationSpec = {
    path: "/v3/tags",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Tag,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body33,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getTagOperationSpec = {
    path: "/v3/tags/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Tag,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const updateTagOperationSpec = {
    path: "/v3/tags/{id}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Tag,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body34,
    urlParameters: [region, id],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteTagOperationSpec = {
    path: "/v3/tags/{id}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const getAllOrganizationsOperationSpec = {
    path: "/v3/organizations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "Organization" } },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createOrganizationOperationSpec = {
    path: "/v3/organizations",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Organization,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    formDataParameters: [
        name1,
        avatar,
        resthookSignatureKey,
    ],
    urlParameters: [region],
    headerParameters: [contentType1, accept1],
    serializer,
};
const getOrganizationOperationSpec = {
    path: "/v3/organizations/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Organization,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const updateOrganizationOperationSpec = {
    path: "/v3/organizations/{identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Organization,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    formDataParameters: [
        avatar,
        resthookSignatureKey,
        name2,
        validationToolConfig,
    ],
    urlParameters: [region, identifier],
    headerParameters: [contentType1, accept1],
    serializer,
};
const deleteOrganizationOperationSpec = {
    path: "/v3/organizations/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const getAllOrganizationMembershipsOperationSpec = {
    path: "/v3/organization_memberships",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PathsQ5Os5RV3OrganizationMembershipsGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        offset,
        limit,
        organization1,
        role,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const getOrganizationMembershipOperationSpec = {
    path: "/v3/organization_memberships/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OrganizationMembership,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const updateOrganizationMembershipOperationSpec = {
    path: "/v3/organization_memberships/{identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: OrganizationMembership,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body35,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteOrganizationMembershipOperationSpec = {
    path: "/v3/organization_memberships/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const getAllInvitationsOperationSpec = {
    path: "/v3/invitations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Paths18Wh2VcV3InvitationsGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        offset,
        limit,
        organization1,
        role,
        status,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createInvitationOperationSpec = {
    path: "/v3/invitations",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Invitation,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body36,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getInvitationOperationSpec = {
    path: "/v3/invitations/{identifier}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Invitation,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const updateInvitationOperationSpec = {
    path: "/v3/invitations/{identifier}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Invitation,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body37,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteInvitationOperationSpec = {
    path: "/v3/invitations/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier],
    headerParameters: [accept],
    serializer,
};
const getInvitationByTokenOperationSpec = {
    path: "/v3/invitations/token/{token}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Invitation,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, token],
    headerParameters: [accept],
    serializer,
};
const respondToInvitationOperationSpec = {
    path: "/v3/invitations/token/{token}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Invitation,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body38,
    urlParameters: [region, token],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getAllApiUsersOperationSpec = {
    path: "/v3/api_users",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Paths26Civ0V3ApiUsersGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [organization1],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createApiUserOperationSpec = {
    path: "/v3/api_users",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ApiUserWithKey,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body39,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getApiUserOperationSpec = {
    path: "/v3/api_users/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApiUserWithoutKey,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const updateApiUserOperationSpec = {
    path: "/v3/api_users/{id}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ApiUserWithoutKey,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body40,
    urlParameters: [region, id],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteApiUserOperationSpec = {
    path: "/v3/api_users/{id}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const regenerateApiKeyForApiUserOperationSpec = {
    path: "/v3/api_users/{id}/regenerate_api_key",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ApiUserWithKey,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id],
    headerParameters: [accept],
    serializer,
};
const getAllResthookSubscriptionsOperationSpec = {
    path: "/v3/resthook_subscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PathsVz5Kj2V3ResthookSubscriptionsGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [offset, limit],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createResthookSubscriptionOperationSpec = {
    path: "/v3/resthook_subscriptions",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ResthookSubscription,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body41,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getResthookSubscriptionOperationSpec = {
    path: "/v3/resthook_subscriptions/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResthookSubscription,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id1],
    headerParameters: [accept],
    serializer,
};
const updateResthookSubscriptionOperationSpec = {
    path: "/v3/resthook_subscriptions/{id}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ResthookSubscription,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body42,
    urlParameters: [region, id1],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteResthookSubscriptionOperationSpec = {
    path: "/v3/resthook_subscriptions/{id}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, id1],
    headerParameters: [accept],
    serializer,
};
const activateResthookSubscriptionOperationSpec = {
    path: "/v3/resthook_subscriptions/activate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResthookSubscription,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region],
    headerParameters: [accept, xHookSecret],
    serializer,
};
const listOccupationGroupsOperationSpec = {
    path: "/v3/occupation_groups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "OccupationGroup" },
                    },
                },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createResumeSearchOperationSpec = {
    path: "/v3/resume_search",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ResumeSearch,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body43,
    queryParameters: [offset, limit1],
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getResumeSearchDetailOperationSpec = {
    path: "/v3/resume_search/details/{identifier}",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResumeSearchDetail,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body43,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getResumeSearchConfigOperationSpec = {
    path: "/v3/resume_search/config",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResumeSearchConfig,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const updateResumeSearchConfigOperationSpec = {
    path: "/v3/resume_search/config",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ResumeSearchConfig,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body44,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const createResumeSearchEmbedUrlOperationSpec = {
    path: "/v3/resume_search/embed",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResumeSearchEmbed,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body45,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getResumeSearchMatchOperationSpec = {
    path: "/v3/resume_search/match",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResumeSearchMatch,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        resume,
        jobDescription,
        index,
        searchExpression,
        jobTitlesWeight,
        yearsExperienceWeight,
        locationsWeight,
        languagesWeight,
        skillsWeight,
        educationWeight,
        searchExpressionWeight,
        socCodesWeight,
        managementLevelWeight,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const getResumeSearchSuggestionJobTitleOperationSpec = {
    path: "/v3/resume_search/suggestion_job_title",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: { name: "Sequence", element: { type: { name: "String" } } },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [jobTitles],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const getResumeSearchSuggestionSkillOperationSpec = {
    path: "/v3/resume_search/suggestion_skill",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: { name: "Sequence", element: { type: { name: "String" } } },
            },
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [skills],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createJobDescriptionSearchOperationSpec = {
    path: "/v3/job_description_search",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: JobDescriptionSearch,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body46,
    queryParameters: [offset, limit],
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getJobDescriptionSearchDetailOperationSpec = {
    path: "/v3/job_description_search/details/{identifier}",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: JobDescriptionSearchDetail,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body46,
    urlParameters: [region, identifier],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getJobDescriptionSearchConfigOperationSpec = {
    path: "/v3/job_description_search/config",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobDescriptionSearchConfig,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const updateJobDescriptionSearchConfigOperationSpec = {
    path: "/v3/job_description_search/config",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: JobDescriptionSearchConfig,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body47,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const createJobDescriptionSearchEmbedUrlOperationSpec = {
    path: "/v3/job_description_search/embed",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: JobDescriptionSearchEmbed,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body48,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const getAllIndexesOperationSpec = {
    path: "/v3/index",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PathsDvrcp3V3IndexGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [
        name,
        offset,
        limit,
        documentType,
    ],
    urlParameters: [region],
    headerParameters: [accept],
    serializer,
};
const createIndexOperationSpec = {
    path: "/v3/index",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Index,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body49,
    urlParameters: [region],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const updateIndexOperationSpec = {
    path: "/v3/index/{name}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Index,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body50,
    urlParameters: [region, name3],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteIndexOperationSpec = {
    path: "/v3/index/{name}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, name3],
    headerParameters: [accept],
    serializer,
};
const getAllIndexDocumentsOperationSpec = {
    path: "/v3/index/{name}/documents",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PathsO7SnenV3IndexNameDocumentsGetResponses200ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    queryParameters: [offset, limit],
    urlParameters: [region, name3],
    headerParameters: [accept],
    serializer,
};
const createIndexDocumentOperationSpec = {
    path: "/v3/index/{name}/documents",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: PathsFte27NV3IndexNameDocumentsPostResponses201ContentApplicationJsonSchema,
        },
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    requestBody: body51,
    urlParameters: [region, name3],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const deleteIndexDocumentOperationSpec = {
    path: "/v3/index/{name}/documents/{identifier}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier, name3],
    headerParameters: [accept],
    serializer,
};
const reIndexDocumentOperationSpec = {
    path: "/v3/index/{name}/documents/{identifier}/re_index",
    httpMethod: "POST",
    responses: {
        200: {},
        400: {
            bodyMapper: RequestError,
            isError: true,
        },
        401: {
            bodyMapper: RequestError,
            isError: true,
        },
        default: {
            bodyMapper: RequestError,
        },
    },
    urlParameters: [region, identifier, name3],
    headerParameters: [accept],
    serializer,
};

class AffindaCredential {
    constructor(token) {
        this.token = token;
    }
    getToken(scopes, options) {
        return Promise.resolve({
            token: this.token,
            expiresOnTimestamp: 0
        });
    }
}

exports.AffindaAPI = AffindaAPI;
exports.AffindaCredential = AffindaCredential;
//# sourceMappingURL=index.js.map
