import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Region, AffindaAPIOptionalParams, GetAllWorkspacesOptionalParams, GetAllWorkspacesResponse, WorkspaceCreate, CreateWorkspaceOptionalParams, CreateWorkspaceResponse, GetWorkspaceOptionalParams, GetWorkspaceResponse, WorkspaceUpdate, UpdateWorkspaceOptionalParams, UpdateWorkspaceResponse, DeleteWorkspaceOptionalParams, GetUsageByWorkspaceOptionalParams, GetUsageByWorkspaceResponse, GetAllWorkspaceMembershipsOptionalParams, GetAllWorkspaceMembershipsResponse, WorkspaceMembershipCreate, CreateWorkspaceMembershipOptionalParams, CreateWorkspaceMembershipResponse, GetWorkspaceMembershipOptionalParams, GetWorkspaceMembershipResponse, DeleteWorkspaceMembershipOptionalParams, GetAllCollectionsOptionalParams, GetAllCollectionsResponse, CollectionCreate, CreateCollectionOptionalParams, CreateCollectionResponse, GetCollectionOptionalParams, GetCollectionResponse, CollectionUpdate, UpdateCollectionOptionalParams, UpdateCollectionResponse, DeleteCollectionOptionalParams, DataFieldCreate, CreateDataFieldForCollectionOptionalParams, CreateDataFieldForCollectionResponse, GetDataFieldForCollectionOptionalParams, GetDataFieldForCollectionResponse, CollectionField, UpdateDataFieldForCollectionOptionalParams, UpdateDataFieldForCollectionResponse, GetUsageByCollectionOptionalParams, GetUsageByCollectionResponse, GetAllDocumentsOptionalParams, GetAllDocumentsResponse, CreateDocumentOptionalParams, CreateDocumentResponse, GetDocumentOptionalParams, GetDocumentResponse, DocumentUpdate, UpdateDocumentOptionalParams, UpdateDocumentResponse, DeleteDocumentOptionalParams, PathsO1OmciV3DocumentsIdentifierUpdateDataPostRequestbodyContentApplicationJsonSchema, UpdateDocumentDataOptionalParams, UpdateDocumentDataResponse, BatchAddTagRequest, BatchAddTagOptionalParams, BatchRemoveTagRequest, BatchRemoveTagOptionalParams, GetAllValidationResultsOptionalParams, GetAllValidationResultsResponse, ValidationResultCreate, CreateValidationResultOptionalParams, CreateValidationResultResponse, GetValidationResultOptionalParams, GetValidationResultResponse, ValidationResultUpdate, UpdateValidationResultOptionalParams, UpdateValidationResultResponse, DeleteValidationResultOptionalParams, BatchCreateValidationResultsOptionalParams, BatchCreateValidationResultsResponse, BatchDeleteValidationResultsRequest, BatchDeleteValidationResultsOptionalParams, GetAllDocumentSplittersOptionalParams, GetAllDocumentSplittersResponse, GetDocumentSplitterOptionalParams, GetDocumentSplitterResponse, DocumentEditRequest, EditDocumentPagesOptionalParams, EditDocumentPagesResponse, GetAllExtractorsOptionalParams, GetAllExtractorsResponse, CreateExtractorOptionalParams, CreateExtractorResponse, GetExtractorOptionalParams, GetExtractorResponse, ExtractorUpdate, UpdateExtractorOptionalParams, UpdateExtractorResponse, DeleteExtractorOptionalParams, GetAllDataPointsOptionalParams, GetAllDataPointsResponse, CreateDataPointOptionalParams, CreateDataPointResponse, GetDataPointOptionalParams, GetDataPointResponse, DataPointUpdate, UpdateDataPointOptionalParams, UpdateDataPointResponse, DeleteDataPointOptionalParams, GetDataPointChoicesOptionalParams, GetDataPointChoicesResponse, CreateDataPointChoiceOptionalParams, CreateDataPointChoiceResponse, GetDataPointChoiceOptionalParams, GetDataPointChoiceResponse, DataPointChoiceUpdate, UpdateDataPointChoiceOptionalParams, UpdateDataPointChoiceResponse, DeleteDataPointChoiceOptionalParams, ReplaceDataPointChoicesOptionalParams, ReplaceDataPointChoicesResponse, GetAllAnnotationsOptionalParams, GetAllAnnotationsResponse, AnnotationCreate, CreateAnnotationOptionalParams, CreateAnnotationResponse, GetAnnotationOptionalParams, GetAnnotationResponse, AnnotationUpdate, UpdateAnnotationOptionalParams, UpdateAnnotationResponse, DeleteAnnotationOptionalParams, DeleteAnnotationResponse, BatchCreateAnnotationsOptionalParams, BatchCreateAnnotationsResponse, AnnotationBatchUpdate, BatchUpdateAnnotationsOptionalParams, BatchUpdateAnnotationsResponse, BatchDeleteAnnotationsOptionalParams, BatchDeleteAnnotationsOperationResponse, MappingDataSourceCreate, CreateMappingDataSourceOptionalParams, CreateMappingDataSourceResponse, ListMappingDataSourcesOptionalParams, ListMappingDataSourcesResponse, GetMappingDataSourceOptionalParams, GetMappingDataSourceResponse, DeleteMappingDataSourceOptionalParams, ListMappingDataSourceValuesOptionalParams, ListMappingDataSourceValuesResponse, ReplaceMappingDataSourceValuesOptionalParams, ReplaceMappingDataSourceValuesResponse, AddMappingDataSourceValueOptionalParams, AddMappingDataSourceValueResponse, GetMappingDataSourceValueOptionalParams, GetMappingDataSourceValueResponse, DeleteMappingDataSourceValueOptionalParams, MappingCreate, CreateMappingOptionalParams, CreateMappingResponse, ListMappingsOptionalParams, ListMappingsResponse, GetMappingOptionalParams, GetMappingResponse, DeleteMappingOptionalParams, MappingUpdate, UpdateMappingOptionalParams, UpdateMappingResponse, GetAllTagsOptionalParams, GetAllTagsResponse, TagCreate, CreateTagOptionalParams, CreateTagResponse, GetTagOptionalParams, GetTagResponse, TagUpdate, UpdateTagOptionalParams, UpdateTagResponse, DeleteTagOptionalParams, GetAllOrganizationsOptionalParams, GetAllOrganizationsResponse, CreateOrganizationOptionalParams, CreateOrganizationResponse, GetOrganizationOptionalParams, GetOrganizationResponse, UpdateOrganizationOptionalParams, UpdateOrganizationResponse, DeleteOrganizationOptionalParams, GetAllOrganizationMembershipsOptionalParams, GetAllOrganizationMembershipsResponse, GetOrganizationMembershipOptionalParams, GetOrganizationMembershipResponse, OrganizationMembershipUpdate, UpdateOrganizationMembershipOptionalParams, UpdateOrganizationMembershipResponse, DeleteOrganizationMembershipOptionalParams, GetAllInvitationsOptionalParams, GetAllInvitationsResponse, InvitationCreate, CreateInvitationOptionalParams, CreateInvitationResponse, GetInvitationOptionalParams, GetInvitationResponse, InvitationUpdate, UpdateInvitationOptionalParams, UpdateInvitationResponse, DeleteInvitationOptionalParams, GetInvitationByTokenOptionalParams, GetInvitationByTokenResponse, InvitationResponse, RespondToInvitationOptionalParams, RespondToInvitationResponse, GetAllApiUsersOptionalParams, GetAllApiUsersResponse, ApiUserCreate, CreateApiUserOptionalParams, CreateApiUserResponse, GetApiUserOptionalParams, GetApiUserResponse, ApiUserUpdate, UpdateApiUserOptionalParams, UpdateApiUserResponse, DeleteApiUserOptionalParams, RegenerateApiKeyForApiUserOptionalParams, RegenerateApiKeyForApiUserResponse, GetAllResthookSubscriptionsOptionalParams, GetAllResthookSubscriptionsResponse, ResthookSubscriptionCreate, CreateResthookSubscriptionOptionalParams, CreateResthookSubscriptionResponse, GetResthookSubscriptionOptionalParams, GetResthookSubscriptionResponse, ResthookSubscriptionUpdate, UpdateResthookSubscriptionOptionalParams, UpdateResthookSubscriptionResponse, DeleteResthookSubscriptionOptionalParams, ActivateResthookSubscriptionOptionalParams, ActivateResthookSubscriptionResponse, ListOccupationGroupsOptionalParams, ListOccupationGroupsResponse, ResumeSearchParameters, CreateResumeSearchOptionalParams, CreateResumeSearchResponse, GetResumeSearchDetailOptionalParams, GetResumeSearchDetailResponse, GetResumeSearchConfigOptionalParams, GetResumeSearchConfigResponse, ResumeSearchConfig, UpdateResumeSearchConfigOptionalParams, UpdateResumeSearchConfigResponse, CreateResumeSearchEmbedUrlOptionalParams, CreateResumeSearchEmbedUrlResponse, GetResumeSearchMatchOptionalParams, GetResumeSearchMatchResponse, GetResumeSearchSuggestionJobTitleOptionalParams, GetResumeSearchSuggestionJobTitleResponse, GetResumeSearchSuggestionSkillOptionalParams, GetResumeSearchSuggestionSkillResponse, JobDescriptionSearchParameters, CreateJobDescriptionSearchOptionalParams, CreateJobDescriptionSearchResponse, GetJobDescriptionSearchDetailOptionalParams, GetJobDescriptionSearchDetailResponse, GetJobDescriptionSearchConfigOptionalParams, GetJobDescriptionSearchConfigResponse, JobDescriptionSearchConfig, UpdateJobDescriptionSearchConfigOptionalParams, UpdateJobDescriptionSearchConfigResponse, CreateJobDescriptionSearchEmbedUrlOptionalParams, CreateJobDescriptionSearchEmbedUrlResponse, GetAllIndexesOptionalParams, GetAllIndexesResponse, IndexCreate, CreateIndexOptionalParams, CreateIndexResponse, IndexUpdate, UpdateIndexOptionalParams, UpdateIndexResponse, DeleteIndexOptionalParams, GetAllIndexDocumentsOptionalParams, GetAllIndexDocumentsResponse, PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema, CreateIndexDocumentOptionalParams, CreateIndexDocumentResponse, DeleteIndexDocumentOptionalParams, ReIndexDocumentOptionalParams } from "./models";
export declare class AffindaAPI extends coreClient.ServiceClient {
    region: Region;
    /**
     * Initializes a new instance of the AffindaAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, options?: AffindaAPIOptionalParams);
    /**
     * Returns your workspaces.
     * @param organization Filter by organization.
     * @param options The options parameters.
     */
    getAllWorkspaces(organization: string, options?: GetAllWorkspacesOptionalParams): Promise<GetAllWorkspacesResponse>;
    /**
     * Create a workspace
     * @param body Workspace to create
     * @param options The options parameters.
     */
    createWorkspace(body: WorkspaceCreate, options?: CreateWorkspaceOptionalParams): Promise<CreateWorkspaceResponse>;
    /**
     * Return a specific workspace.
     * @param identifier Workspace's identifier
     * @param options The options parameters.
     */
    getWorkspace(identifier: string, options?: GetWorkspaceOptionalParams): Promise<GetWorkspaceResponse>;
    /**
     * Update a workspace.
     * @param identifier Workspace's identifier
     * @param body Workspace data to update
     * @param options The options parameters.
     */
    updateWorkspace(identifier: string, body: WorkspaceUpdate, options?: UpdateWorkspaceOptionalParams): Promise<UpdateWorkspaceResponse>;
    /**
     * Deletes the specified workspace from the database.
     * @param identifier Workspace's identifier
     * @param options The options parameters.
     */
    deleteWorkspace(identifier: string, options?: DeleteWorkspaceOptionalParams): Promise<void>;
    /**
     * Return monthly credits consumption of a workspace.
     * @param identifier Workspace's identifier
     * @param options The options parameters.
     */
    getUsageByWorkspace(identifier: string, options?: GetUsageByWorkspaceOptionalParams): Promise<GetUsageByWorkspaceResponse>;
    /**
     * Returns the memberships of your workspaces.
     * @param options The options parameters.
     */
    getAllWorkspaceMemberships(options?: GetAllWorkspaceMembershipsOptionalParams): Promise<GetAllWorkspaceMembershipsResponse>;
    /**
     * Create a workspace membership.
     * @param body
     * @param options The options parameters.
     */
    createWorkspaceMembership(body: WorkspaceMembershipCreate, options?: CreateWorkspaceMembershipOptionalParams): Promise<CreateWorkspaceMembershipResponse>;
    /**
     * Return a specific workspace membership.
     * @param identifier Workspace membership's identifier.
     * @param options The options parameters.
     */
    getWorkspaceMembership(identifier: string, options?: GetWorkspaceMembershipOptionalParams): Promise<GetWorkspaceMembershipResponse>;
    /**
     * Remove an user from a workspace.
     * @param identifier Workspace membership's identifier.
     * @param options The options parameters.
     */
    deleteWorkspaceMembership(identifier: string, options?: DeleteWorkspaceMembershipOptionalParams): Promise<void>;
    /**
     * Returns your collections.
     * @param workspace Filter by workspace.
     * @param options The options parameters.
     */
    getAllCollections(workspace: string, options?: GetAllCollectionsOptionalParams): Promise<GetAllCollectionsResponse>;
    /**
     * Create a collection
     * @param body
     * @param options The options parameters.
     */
    createCollection(body: CollectionCreate, options?: CreateCollectionOptionalParams): Promise<CreateCollectionResponse>;
    /**
     * Return a specific collection.
     * @param identifier Collection's identifier
     * @param options The options parameters.
     */
    getCollection(identifier: string, options?: GetCollectionOptionalParams): Promise<GetCollectionResponse>;
    /**
     * Update data of a collection.
     * @param identifier Collection's identifier
     * @param body Collection data to update
     * @param options The options parameters.
     */
    updateCollection(identifier: string, body: CollectionUpdate, options?: UpdateCollectionOptionalParams): Promise<UpdateCollectionResponse>;
    /**
     * Deletes the specified collection from the database.
     * @param identifier Collection's identifier
     * @param options The options parameters.
     */
    deleteCollection(identifier: string, options?: DeleteCollectionOptionalParams): Promise<void>;
    /**
     * Create data field for a collection along with a new data point.
     * @param identifier Collection's identifier
     * @param body The data field and data point to be created.
     * @param options The options parameters.
     */
    createDataFieldForCollection(identifier: string, body: DataFieldCreate, options?: CreateDataFieldForCollectionOptionalParams): Promise<CreateDataFieldForCollectionResponse>;
    /**
     * Get a data field for a collection assosciated with a data point
     * @param identifier Collection's identifier
     * @param datapointIdentifier Datapoint's identifier
     * @param options The options parameters.
     */
    getDataFieldForCollection(identifier: string, datapointIdentifier: string, options?: GetDataFieldForCollectionOptionalParams): Promise<GetDataFieldForCollectionResponse>;
    /**
     * Update data field for a collection assosciated with a data point
     * @param identifier Collection's identifier
     * @param datapointIdentifier Datapoint's identifier
     * @param body Data field properties to update
     * @param options The options parameters.
     */
    updateDataFieldForCollection(identifier: string, datapointIdentifier: string, body: CollectionField, options?: UpdateDataFieldForCollectionOptionalParams): Promise<UpdateDataFieldForCollectionResponse>;
    /**
     * Return monthly credits consumption of a collection.
     * @param identifier Collection's identifier
     * @param options The options parameters.
     */
    getUsageByCollection(identifier: string, options?: GetUsageByCollectionOptionalParams): Promise<GetUsageByCollectionResponse>;
    /**
     * Returns all the document summaries for that user, limited to 300 per page.
     * @param options The options parameters.
     */
    getAllDocuments(options?: GetAllDocumentsOptionalParams): Promise<GetAllDocumentsResponse>;
    /**
     * Uploads a document for parsing. When successful, returns an `identifier` in the response for
     * subsequent use with the [/documents/{identifier}](#get-/v3/documents/-identifier-) endpoint to check
     * processing status and retrieve results.<br/>
     * @param options The options parameters.
     */
    createDocument(options?: CreateDocumentOptionalParams): Promise<CreateDocumentResponse>;
    /**
     * Return a specific document.
     * @param identifier Document's identifier
     * @param options The options parameters.
     */
    getDocument(identifier: string, options?: GetDocumentOptionalParams): Promise<GetDocumentResponse>;
    /**
     * Update file name, expiry time, or move to another collection, etc.
     * @param identifier Document's identifier
     * @param body Document data to update
     * @param options The options parameters.
     */
    updateDocument(identifier: string, body: DocumentUpdate, options?: UpdateDocumentOptionalParams): Promise<UpdateDocumentResponse>;
    /**
     * Deletes the specified document from the database.
     * @param identifier Document's identifier
     * @param options The options parameters.
     */
    deleteDocument(identifier: string, options?: DeleteDocumentOptionalParams): Promise<void>;
    /**
     * Update data of a document.
     * Only applicable for resumes and job descriptions. For other document types, please use the `PATCH
     * /annotations/{id}` endpoint or the `POST /annotations/batch_update` endpoint.
     * @param identifier Resume or Job Description identifier
     * @param body Resume data to update
     * @param options The options parameters.
     */
    updateDocumentData(identifier: string, body: PathsO1OmciV3DocumentsIdentifierUpdateDataPostRequestbodyContentApplicationJsonSchema, options?: UpdateDocumentDataOptionalParams): Promise<UpdateDocumentDataResponse>;
    /**
     * Add a tag to documents.
     * Tags are used to group documents together.
     * Tags can be used to filter documents.
     *
     * @param body Specify the tag and the documents to tag
     * @param options The options parameters.
     */
    batchAddTag(body: BatchAddTagRequest, options?: BatchAddTagOptionalParams): Promise<void>;
    /**
     * Remove a tag from documents.
     * @param body Specify the tag and the documents to remove the tag from
     * @param options The options parameters.
     */
    batchRemoveTag(body: BatchRemoveTagRequest, options?: BatchRemoveTagOptionalParams): Promise<void>;
    /**
     * Returns the validation results of a document.
     * @param document Filter by document.
     * @param options The options parameters.
     */
    getAllValidationResults(document: string, options?: GetAllValidationResultsOptionalParams): Promise<GetAllValidationResultsResponse>;
    /**
     * Create a validation result.
     * @param body
     * @param options The options parameters.
     */
    createValidationResult(body: ValidationResultCreate, options?: CreateValidationResultOptionalParams): Promise<CreateValidationResultResponse>;
    /**
     * Return a specific validation result.
     * @param id Validation result's ID.
     * @param options The options parameters.
     */
    getValidationResult(id: number, options?: GetValidationResultOptionalParams): Promise<GetValidationResultResponse>;
    /**
     * Update a validation result.
     * @param id Validation result's ID.
     * @param body Validation result data to update
     * @param options The options parameters.
     */
    updateValidationResult(id: number, body: ValidationResultUpdate, options?: UpdateValidationResultOptionalParams): Promise<UpdateValidationResultResponse>;
    /**
     * Remove validation result.
     * @param id Validation result's ID.
     * @param options The options parameters.
     */
    deleteValidationResult(id: number, options?: DeleteValidationResultOptionalParams): Promise<void>;
    /**
     * Batch create validation results.
     * @param body Array of ValidationResultCreate
     * @param options The options parameters.
     */
    batchCreateValidationResults(body: ValidationResultCreate[], options?: BatchCreateValidationResultsOptionalParams): Promise<BatchCreateValidationResultsResponse>;
    /**
     * Batch delete validation results
     * @param body
     * @param options The options parameters.
     */
    batchDeleteValidationResults(body: BatchDeleteValidationResultsRequest, options?: BatchDeleteValidationResultsOptionalParams): Promise<void>;
    /**
     * Returns all the document splitters visible to the user.
     * @param options The options parameters.
     */
    getAllDocumentSplitters(options?: GetAllDocumentSplittersOptionalParams): Promise<GetAllDocumentSplittersResponse>;
    /**
     * Return a specific document splitter.
     * @param identifier Document splitter's identifier
     * @param options The options parameters.
     */
    getDocumentSplitter(identifier: string, options?: GetDocumentSplitterOptionalParams): Promise<GetDocumentSplitterResponse>;
    /**
     * Split / merge / rotate / delete pages of a document.
     * Documents with multiple pages can be splitted into multiple documents, or merged into one document.
     * Each page can also be rotated. Edit operations will trigger re-parsing of the documents involved.
     *
     * @param identifier Document's identifier
     * @param body Describe how the pages should be edited
     * @param options The options parameters.
     */
    editDocumentPages(identifier: string, body: DocumentEditRequest, options?: EditDocumentPagesOptionalParams): Promise<EditDocumentPagesResponse>;
    /**
     * Returns your custom extractors as well as Affinda's off-the-shelf extractors.
     * @param organization Filter by organization.
     * @param options The options parameters.
     */
    getAllExtractors(organization: string, options?: GetAllExtractorsOptionalParams): Promise<GetAllExtractorsResponse>;
    /**
     * Create a custom extractor.
     * @param options The options parameters.
     */
    createExtractor(options?: CreateExtractorOptionalParams): Promise<CreateExtractorResponse>;
    /**
     * Return a specific extractor.
     * @param identifier Extractor's identifier
     * @param options The options parameters.
     */
    getExtractor(identifier: string, options?: GetExtractorOptionalParams): Promise<GetExtractorResponse>;
    /**
     * Update data of an extractor.
     * @param identifier Extractor's identifier
     * @param body Extractor data to update
     * @param options The options parameters.
     */
    updateExtractor(identifier: string, body: ExtractorUpdate, options?: UpdateExtractorOptionalParams): Promise<UpdateExtractorResponse>;
    /**
     * Deletes the specified extractor from the database.
     * @param identifier Extractor's identifier
     * @param options The options parameters.
     */
    deleteExtractor(identifier: string, options?: DeleteExtractorOptionalParams): Promise<void>;
    /**
     * Returns your custom data points as well as Affinda's off-the-shelf data points.
     * @param options The options parameters.
     */
    getAllDataPoints(options?: GetAllDataPointsOptionalParams): Promise<GetAllDataPointsResponse>;
    /**
     * Create a custom data point.
     * @param options The options parameters.
     */
    createDataPoint(options?: CreateDataPointOptionalParams): Promise<CreateDataPointResponse>;
    /**
     * Return a specific data point.
     * @param identifier Data point's identifier
     * @param options The options parameters.
     */
    getDataPoint(identifier: string, options?: GetDataPointOptionalParams): Promise<GetDataPointResponse>;
    /**
     * Update data of a data point.
     * @param identifier DataPoint's identifier
     * @param body Data point to update
     * @param options The options parameters.
     */
    updateDataPoint(identifier: string, body: DataPointUpdate, options?: UpdateDataPointOptionalParams): Promise<UpdateDataPointResponse>;
    /**
     * Deletes the specified data point from the database.
     * @param identifier DataPoint's identifier
     * @param options The options parameters.
     */
    deleteDataPoint(identifier: string, options?: DeleteDataPointOptionalParams): Promise<void>;
    /**
     * Returns available choices for a specific enum data point.
     * @param dataPoint The data point to get choices for.
     * @param collection The collection to get choices for.
     * @param options The options parameters.
     */
    getDataPointChoices(dataPoint: string, collection: string, options?: GetDataPointChoicesOptionalParams): Promise<GetDataPointChoicesResponse>;
    /**
     * Create a custom data point choice.
     * @param options The options parameters.
     */
    createDataPointChoice(options?: CreateDataPointChoiceOptionalParams): Promise<CreateDataPointChoiceResponse>;
    /**
     * Return a specific data point choice.
     * @param id Data point choice's ID
     * @param options The options parameters.
     */
    getDataPointChoice(id: number, options?: GetDataPointChoiceOptionalParams): Promise<GetDataPointChoiceResponse>;
    /**
     * Update data of a data point choice.
     * @param id Data point choice's ID
     * @param body Data point choice to update
     * @param options The options parameters.
     */
    updateDataPointChoice(id: number, body: DataPointChoiceUpdate, options?: UpdateDataPointChoiceOptionalParams): Promise<UpdateDataPointChoiceResponse>;
    /**
     * Deletes the specified data point choice from the database.
     * @param id Data point choice's ID
     * @param options The options parameters.
     */
    deleteDataPointChoice(id: number, options?: DeleteDataPointChoiceOptionalParams): Promise<void>;
    /**
     * Replace choices of a data point. Existing choices and incoming choices are matched base on their
     * `value`. New `value` will be created, existing `value` will be updated, and `value` not in incoming
     * choices will be deleted.
     * @param options The options parameters.
     */
    replaceDataPointChoices(options?: ReplaceDataPointChoicesOptionalParams): Promise<ReplaceDataPointChoicesResponse>;
    /**
     * Returns your annotations.
     * @param document Filter by document.
     * @param options The options parameters.
     */
    getAllAnnotations(document: string, options?: GetAllAnnotationsOptionalParams): Promise<GetAllAnnotationsResponse>;
    /**
     * Create a annotation
     * @param body
     * @param options The options parameters.
     */
    createAnnotation(body: AnnotationCreate, options?: CreateAnnotationOptionalParams): Promise<CreateAnnotationResponse>;
    /**
     * Return a specific annotation.
     * @param id Annotation's ID
     * @param options The options parameters.
     */
    getAnnotation(id: number, options?: GetAnnotationOptionalParams): Promise<GetAnnotationResponse>;
    /**
     * Update data of an annotation.
     * @param id Annotation's ID
     * @param body Annotation data to update
     * @param options The options parameters.
     */
    updateAnnotation(id: number, body: AnnotationUpdate, options?: UpdateAnnotationOptionalParams): Promise<UpdateAnnotationResponse>;
    /**
     * Deletes the specified annotation from the database.
     * @param id Annotation's ID
     * @param options The options parameters.
     */
    deleteAnnotation(id: number, options?: DeleteAnnotationOptionalParams): Promise<DeleteAnnotationResponse>;
    /**
     * Batch create annotations
     * @param body Array of AnnotationCreate
     * @param options The options parameters.
     */
    batchCreateAnnotations(body: AnnotationCreate[], options?: BatchCreateAnnotationsOptionalParams): Promise<BatchCreateAnnotationsResponse>;
    /**
     * Batch update annotations
     * @param body Array of AnnotationBatchUpdate
     * @param options The options parameters.
     */
    batchUpdateAnnotations(body: AnnotationBatchUpdate[], options?: BatchUpdateAnnotationsOptionalParams): Promise<BatchUpdateAnnotationsResponse>;
    /**
     * Batch delete annotations
     * @param body Array of annotation IDs to be deleted
     * @param options The options parameters.
     */
    batchDeleteAnnotations(body: number[], options?: BatchDeleteAnnotationsOptionalParams): Promise<BatchDeleteAnnotationsOperationResponse>;
    /**
     * Create a custom mapping data source.
     * @param body A mapping data source is used to map from raw data found by our AI models to records in
     *             your database.
     * @param options The options parameters.
     */
    createMappingDataSource(body: MappingDataSourceCreate, options?: CreateMappingDataSourceOptionalParams): Promise<CreateMappingDataSourceResponse>;
    /**
     * Returns the list of all custom mapping data sources.
     * @param options The options parameters.
     */
    listMappingDataSources(options?: ListMappingDataSourcesOptionalParams): Promise<ListMappingDataSourcesResponse>;
    /**
     * Return a specific mapping data source.
     * @param identifier Mapping data source's identifier
     * @param options The options parameters.
     */
    getMappingDataSource(identifier: string, options?: GetMappingDataSourceOptionalParams): Promise<GetMappingDataSourceResponse>;
    /**
     * Delete the specified mapping data source from the database.
     * @param identifier Mapping data source's identifier
     * @param options The options parameters.
     */
    deleteMappingDataSource(identifier: string, options?: DeleteMappingDataSourceOptionalParams): Promise<void>;
    /**
     * Returns the list of all values in a mapping data source
     * @param identifier Mapping data source's identifier
     * @param options The options parameters.
     */
    listMappingDataSourceValues(identifier: string, options?: ListMappingDataSourceValuesOptionalParams): Promise<ListMappingDataSourceValuesResponse>;
    /**
     * Replaces the list of all values in a mapping data source
     * @param identifier Mapping data source's identifier
     * @param body Array of AnyObject
     * @param options The options parameters.
     */
    replaceMappingDataSourceValues(identifier: string, body: Record<string, unknown>[], options?: ReplaceMappingDataSourceValuesOptionalParams): Promise<ReplaceMappingDataSourceValuesResponse>;
    /**
     * Adds a value to a mapping data source
     * @param identifier Mapping data source's identifier
     * @param body Any object
     * @param options The options parameters.
     */
    addMappingDataSourceValue(identifier: string, body: Record<string, unknown>, options?: AddMappingDataSourceValueOptionalParams): Promise<AddMappingDataSourceValueResponse>;
    /**
     * Return a specific mapping dta source value.
     * @param identifier Mapping data source's identifier
     * @param value Mapping Data Source Value's value
     * @param options The options parameters.
     */
    getMappingDataSourceValue(identifier: string, value: string, options?: GetMappingDataSourceValueOptionalParams): Promise<GetMappingDataSourceValueResponse>;
    /**
     * Delete the specified mapping data source value from the database.
     * @param identifier Mapping data source's identifier
     * @param value Mapping Data Source Value's value
     * @param options The options parameters.
     */
    deleteMappingDataSourceValue(identifier: string, value: string, options?: DeleteMappingDataSourceValueOptionalParams): Promise<void>;
    /**
     * Create a custom mapping.
     * @param body
     * @param options The options parameters.
     */
    createMapping(body: MappingCreate, options?: CreateMappingOptionalParams): Promise<CreateMappingResponse>;
    /**
     * Returns the list of all custom data mappings.
     * @param mappingDataSource Mapping data source's identifier
     * @param options The options parameters.
     */
    listMappings(mappingDataSource: string, options?: ListMappingsOptionalParams): Promise<ListMappingsResponse>;
    /**
     * Return a specific mapping.
     * @param identifier Mapping's identifier
     * @param options The options parameters.
     */
    getMapping(identifier: string, options?: GetMappingOptionalParams): Promise<GetMappingResponse>;
    /**
     * Delete the specified mapping from the database.
     * @param identifier Mapping's identifier
     * @param options The options parameters.
     */
    deleteMapping(identifier: string, options?: DeleteMappingOptionalParams): Promise<void>;
    /**
     * Updates a specific mapping.
     * @param identifier Mapping's identifier
     * @param body
     * @param options The options parameters.
     */
    updateMapping(identifier: string, body: MappingUpdate, options?: UpdateMappingOptionalParams): Promise<UpdateMappingResponse>;
    /**
     * Returns your tags.
     * @param options The options parameters.
     */
    getAllTags(options?: GetAllTagsOptionalParams): Promise<GetAllTagsResponse>;
    /**
     * Create a tag
     * @param body
     * @param options The options parameters.
     */
    createTag(body: TagCreate, options?: CreateTagOptionalParams): Promise<CreateTagResponse>;
    /**
     * Return a specific tag.
     * @param id Tag's ID
     * @param options The options parameters.
     */
    getTag(id: number, options?: GetTagOptionalParams): Promise<GetTagResponse>;
    /**
     * Update data of an tag.
     * @param id Tag's ID
     * @param body Tag data to update
     * @param options The options parameters.
     */
    updateTag(id: number, body: TagUpdate, options?: UpdateTagOptionalParams): Promise<UpdateTagResponse>;
    /**
     * Deletes the specified tag from the database.
     * @param id Tag's ID
     * @param options The options parameters.
     */
    deleteTag(id: number, options?: DeleteTagOptionalParams): Promise<void>;
    /**
     * Returns all the organizations
     * @param options The options parameters.
     */
    getAllOrganizations(options?: GetAllOrganizationsOptionalParams): Promise<GetAllOrganizationsResponse>;
    /**
     * Create a new organization.
     * @param name
     * @param options The options parameters.
     */
    createOrganization(name: string, options?: CreateOrganizationOptionalParams): Promise<CreateOrganizationResponse>;
    /**
     * Get detail of an organization.
     * @param identifier Organization identifier.
     * @param options The options parameters.
     */
    getOrganization(identifier: string, options?: GetOrganizationOptionalParams): Promise<GetOrganizationResponse>;
    /**
     * Update the detail of an organization.
     * @param identifier Organization identifier.
     * @param options The options parameters.
     */
    updateOrganization(identifier: string, options?: UpdateOrganizationOptionalParams): Promise<UpdateOrganizationResponse>;
    /**
     * Delete the specified organization from the database.
     * @param identifier Organization identifier.
     * @param options The options parameters.
     */
    deleteOrganization(identifier: string, options?: DeleteOrganizationOptionalParams): Promise<void>;
    /**
     * Returns all the organization memberships
     * @param options The options parameters.
     */
    getAllOrganizationMemberships(options?: GetAllOrganizationMembershipsOptionalParams): Promise<GetAllOrganizationMembershipsResponse>;
    /**
     * Get detail of an organization membership.
     * @param identifier Membership identifier.
     * @param options The options parameters.
     */
    getOrganizationMembership(identifier: string, options?: GetOrganizationMembershipOptionalParams): Promise<GetOrganizationMembershipResponse>;
    /**
     * The admin users can use this endpoint to update the role of the members within their organization.
     * @param identifier Membership identifier.
     * @param body
     * @param options The options parameters.
     */
    updateOrganizationMembership(identifier: string, body: OrganizationMembershipUpdate, options?: UpdateOrganizationMembershipOptionalParams): Promise<UpdateOrganizationMembershipResponse>;
    /**
     * The admin users can use this endpoint to remove member from their organization. Other users can also
     * use this to leave their organization.
     * @param identifier Membership identifier.
     * @param options The options parameters.
     */
    deleteOrganizationMembership(identifier: string, options?: DeleteOrganizationMembershipOptionalParams): Promise<void>;
    /**
     * Get list of all invitations you created or sent to you.
     * @param options The options parameters.
     */
    getAllInvitations(options?: GetAllInvitationsOptionalParams): Promise<GetAllInvitationsResponse>;
    /**
     * Create a new invitation.
     * @param body Invitation to create.
     * @param options The options parameters.
     */
    createInvitation(body: InvitationCreate, options?: CreateInvitationOptionalParams): Promise<CreateInvitationResponse>;
    /**
     * Get detail of an invitation.
     * @param identifier Invitation identifier.
     * @param options The options parameters.
     */
    getInvitation(identifier: string, options?: GetInvitationOptionalParams): Promise<GetInvitationResponse>;
    /**
     * Update the detail of an invitation.
     * @param identifier Invitation identifier.
     * @param body
     * @param options The options parameters.
     */
    updateInvitation(identifier: string, body: InvitationUpdate, options?: UpdateInvitationOptionalParams): Promise<UpdateInvitationResponse>;
    /**
     * Delete the specified invitation from the database.
     * @param identifier Invitation identifier.
     * @param options The options parameters.
     */
    deleteInvitation(identifier: string, options?: DeleteInvitationOptionalParams): Promise<void>;
    /**
     * Get detail of an invitation using a secret token. This allows users who have not registered/logged
     * in to view the invitation.
     * @param token Invitation token.
     * @param options The options parameters.
     */
    getInvitationByToken(token: string, options?: GetInvitationByTokenOptionalParams): Promise<GetInvitationByTokenResponse>;
    /**
     * Choose to accept or decline an invitation.
     * @param token Invitation token.
     * @param body
     * @param options The options parameters.
     */
    respondToInvitation(token: string, body: InvitationResponse, options?: RespondToInvitationOptionalParams): Promise<RespondToInvitationResponse>;
    /**
     * Returns your API users.
     * @param options The options parameters.
     */
    getAllApiUsers(options?: GetAllApiUsersOptionalParams): Promise<GetAllApiUsersResponse>;
    /**
     * Create an API user
     * @param body
     * @param options The options parameters.
     */
    createApiUser(body: ApiUserCreate, options?: CreateApiUserOptionalParams): Promise<CreateApiUserResponse>;
    /**
     * Return a specific API user.
     * @param id API user's ID
     * @param options The options parameters.
     */
    getApiUser(id: number, options?: GetApiUserOptionalParams): Promise<GetApiUserResponse>;
    /**
     * Update data of an API user.
     * @param id API user's ID
     * @param body API user to update
     * @param options The options parameters.
     */
    updateApiUser(id: number, body: ApiUserUpdate, options?: UpdateApiUserOptionalParams): Promise<UpdateApiUserResponse>;
    /**
     * Deletes the specified API user from the database.
     * @param id API user's ID
     * @param options The options parameters.
     */
    deleteApiUser(id: number, options?: DeleteApiUserOptionalParams): Promise<void>;
    /**
     * Regenerate API key for an API user.
     * @param id API user's ID
     * @param options The options parameters.
     */
    regenerateApiKeyForApiUser(id: number, options?: RegenerateApiKeyForApiUserOptionalParams): Promise<RegenerateApiKeyForApiUserResponse>;
    /**
     * Returns your resthook subscriptions.
     * @param options The options parameters.
     */
    getAllResthookSubscriptions(options?: GetAllResthookSubscriptionsOptionalParams): Promise<GetAllResthookSubscriptionsResponse>;
    /**
     * After a subscription is successfully created, we'll send a POST request to your target URL with a
     * `X-Hook-Secret` header. <br />
     * You need to response to this request with a 200 status code to confirm your subscribe intention. <br
     * />
     * Then, you need to use the `X-Hook-Secret` to activate the subscription using the
     * [/resthook_subscriptions/activate](#post-/v3/resthook_subscriptions/activate) endpoint. <br />
     * For more information and detailed instructions, [see our webhooks documentation
     * here.](https://docs.affinda.com/docs/webhooks)
     * @param body
     * @param options The options parameters.
     */
    createResthookSubscription(body: ResthookSubscriptionCreate, options?: CreateResthookSubscriptionOptionalParams): Promise<CreateResthookSubscriptionResponse>;
    /**
     * Return a specific resthook subscription.
     * @param id Resthook subscription's ID
     * @param options The options parameters.
     */
    getResthookSubscription(id: number, options?: GetResthookSubscriptionOptionalParams): Promise<GetResthookSubscriptionResponse>;
    /**
     * Update data of a resthook subscription.
     * @param id ResthookSubscription's ID
     * @param body ResthookSubscription data to update
     * @param options The options parameters.
     */
    updateResthookSubscription(id: number, body: ResthookSubscriptionUpdate, options?: UpdateResthookSubscriptionOptionalParams): Promise<UpdateResthookSubscriptionResponse>;
    /**
     * Deletes the specified resthook subscription from the database.
     * @param id ResthookSubscription's ID
     * @param options The options parameters.
     */
    deleteResthookSubscription(id: number, options?: DeleteResthookSubscriptionOptionalParams): Promise<void>;
    /**
     * After creating a subscription, we'll send a POST request to your target URL with a `X-Hook-Secret`
     * header. <br />
     * You should response to this with a 200 status code, and use the value of the `X-Hook-Secret` header
     * that you received to activate the subscription using this endpoint.
     * @param xHookSecret The secret received when creating a subscription.
     * @param options The options parameters.
     */
    activateResthookSubscription(xHookSecret: string, options?: ActivateResthookSubscriptionOptionalParams): Promise<ActivateResthookSubscriptionResponse>;
    /**
     * Returns the list of searchable occupation groups.
     * @param options The options parameters.
     */
    listOccupationGroups(options?: ListOccupationGroupsOptionalParams): Promise<ListOccupationGroupsResponse>;
    /**
     * Searches through parsed resumes. Users have 3 options to create a search:<br /><br /> 1.	Match to a
     * job description - a parsed job description is used to find candidates that suit it<br /> 2.	Match to
     * a resume - a parsed resume is used to find other candidates that have similar attributes<br /> 3.
     * Search using custom criteria<br /><br /> Users should only populate 1 of jobDescription, resume or
     * the custom criteria.
     * @param body Search parameters
     * @param options The options parameters.
     */
    createResumeSearch(body: ResumeSearchParameters, options?: CreateResumeSearchOptionalParams): Promise<CreateResumeSearchResponse>;
    /**
     * This contains more detailed information about the matching score of the search criteria, or which
     * search criteria is missing in this resume.
     * The `identifier` is the unique ID returned via the [/resume_search](#post-/resume_search) endpoint.
     * @param identifier Resume identifier
     * @param body Search parameters
     * @param options The options parameters.
     */
    getResumeSearchDetail(identifier: string, body: ResumeSearchParameters, options?: GetResumeSearchDetailOptionalParams): Promise<GetResumeSearchDetailResponse>;
    /**
     * Return configurations such as which fields can be displayed in the logged in user's embeddable
     * resume search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param options The options parameters.
     */
    getResumeSearchConfig(options?: GetResumeSearchConfigOptionalParams): Promise<GetResumeSearchConfigResponse>;
    /**
     * Update configurations such as which fields can be displayed in the logged in user's embeddable
     * resume search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param body
     * @param options The options parameters.
     */
    updateResumeSearchConfig(body: ResumeSearchConfig, options?: UpdateResumeSearchConfigOptionalParams): Promise<UpdateResumeSearchConfigResponse>;
    /**
     * Create and return a signed URL of the resume search tool which then can be embedded on a web page.
     * An optional parameter `config_override` can be passed to override the user-level configurations of
     * the embeddable resume search tool.
     * @param options The options parameters.
     */
    createResumeSearchEmbedUrl(options?: CreateResumeSearchEmbedUrlOptionalParams): Promise<CreateResumeSearchEmbedUrlResponse>;
    /**
     * Get the matching score between a resume and a job description. The score ranges between 0 and 1,
     * with 0 being not a match at all, and 1 being perfect match.<br/> Note, this score will not directly
     * match the score returned from POST
     * [/resume_search/details/{identifier}](#post-/resume_search/details/-identifier-).
     * @param resume Identify the resume to match.
     * @param jobDescription Identify the job description to match.
     * @param options The options parameters.
     */
    getResumeSearchMatch(resume: string, jobDescription: string, options?: GetResumeSearchMatchOptionalParams): Promise<GetResumeSearchMatchResponse>;
    /**
     * Provided one or more job titles, get related suggestions for your search.
     * @param jobTitles Job title to query suggestions for
     * @param options The options parameters.
     */
    getResumeSearchSuggestionJobTitle(jobTitles: string[], options?: GetResumeSearchSuggestionJobTitleOptionalParams): Promise<GetResumeSearchSuggestionJobTitleResponse>;
    /**
     * Provided one or more skills, get related suggestions for your search.
     * @param skills Skill to query suggestions for
     * @param options The options parameters.
     */
    getResumeSearchSuggestionSkill(skills: string[], options?: GetResumeSearchSuggestionSkillOptionalParams): Promise<GetResumeSearchSuggestionSkillResponse>;
    /**
     * Searches through parsed job descriptions. You can search with custom criterias or a resume.
     * @param body Search parameters
     * @param options The options parameters.
     */
    createJobDescriptionSearch(body: JobDescriptionSearchParameters | null, options?: CreateJobDescriptionSearchOptionalParams): Promise<CreateJobDescriptionSearchResponse>;
    /**
     * This contains more detailed information about the matching score of the search criteria, or which
     * search criteria is missing in this job description.
     * The `identifier` is the unique ID returned via the
     * [/job_description_search](#post-/job_description_search) endpoint.
     * @param identifier Job Description identifier
     * @param body Search parameters
     * @param options The options parameters.
     */
    getJobDescriptionSearchDetail(identifier: string, body: JobDescriptionSearchParameters | null, options?: GetJobDescriptionSearchDetailOptionalParams): Promise<GetJobDescriptionSearchDetailResponse>;
    /**
     * Return configurations such as which fields can be displayed in the logged in user's embeddable job
     * description search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param options The options parameters.
     */
    getJobDescriptionSearchConfig(options?: GetJobDescriptionSearchConfigOptionalParams): Promise<GetJobDescriptionSearchConfigResponse>;
    /**
     * Update configurations such as which fields can be displayed in the logged in user's embeddable job
     * description search tool, what are their weights, what is the maximum number of results that can be
     * returned, etc.
     * @param body
     * @param options The options parameters.
     */
    updateJobDescriptionSearchConfig(body: JobDescriptionSearchConfig, options?: UpdateJobDescriptionSearchConfigOptionalParams): Promise<UpdateJobDescriptionSearchConfigResponse>;
    /**
     * Create and return a signed URL of the job description search tool which then can be embedded on a
     * web page. An optional parameter `config_override` can be passed to override the user-level
     * configurations of the embeddable search tool.
     * @param options The options parameters.
     */
    createJobDescriptionSearchEmbedUrl(options?: CreateJobDescriptionSearchEmbedUrlOptionalParams): Promise<CreateJobDescriptionSearchEmbedUrlResponse>;
    /**
     * Returns all the indexes
     * @param options The options parameters.
     */
    getAllIndexes(options?: GetAllIndexesOptionalParams): Promise<GetAllIndexesResponse>;
    /**
     * Create an index for the search tool
     * @param body Index to create
     * @param options The options parameters.
     */
    createIndex(body: IndexCreate, options?: CreateIndexOptionalParams): Promise<CreateIndexResponse>;
    /**
     * Updates the specified index
     * @param name Index name
     * @param body Index data to update
     * @param options The options parameters.
     */
    updateIndex(name: string, body: IndexUpdate, options?: UpdateIndexOptionalParams): Promise<UpdateIndexResponse>;
    /**
     * Deletes the specified index from the database
     * @param name Index name
     * @param options The options parameters.
     */
    deleteIndex(name: string, options?: DeleteIndexOptionalParams): Promise<void>;
    /**
     * Returns all the indexed documents for that index
     * @param name Index name
     * @param options The options parameters.
     */
    getAllIndexDocuments(name: string, options?: GetAllIndexDocumentsOptionalParams): Promise<GetAllIndexDocumentsResponse>;
    /**
     * Create an indexed document for the search tool
     * @param name Index name
     * @param body Document to index
     * @param options The options parameters.
     */
    createIndexDocument(name: string, body: PathsCl024WV3IndexNameDocumentsPostRequestbodyContentApplicationJsonSchema, options?: CreateIndexDocumentOptionalParams): Promise<CreateIndexDocumentResponse>;
    /**
     * Delete the specified indexed document from the database
     * @param name Index name
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    deleteIndexDocument(name: string, identifier: string, options?: DeleteIndexDocumentOptionalParams): Promise<void>;
    /**
     * Re-index a document.
     * This is relevant if you updated the document's data via the /annotations endpoint, and want to
     * refresh
     * the document's data in the search index.
     *
     * @param name Index name
     * @param identifier Document identifier
     * @param options The options parameters.
     */
    reIndexDocument(name: string, identifier: string, options?: ReIndexDocumentOptionalParams): Promise<void>;
}
//# sourceMappingURL=affindaAPI.d.ts.map